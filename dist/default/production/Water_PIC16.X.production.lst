

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Sat Jan 09 22:52:27 2016

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F876A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	cinit,global,class=CODE,delta=2
     8                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,delta=2
    21                           	psect	text2250,local,class=CODE,delta=2
    22                           	psect	text2252,local,class=CODE,delta=2
    23                           	psect	swtext1,local,class=CONST,delta=2
    24                           	psect	text2258,local,class=CODE,delta=2
    25                           	psect	text2259,local,class=CODE,delta=2
    26                           	psect	text2262,local,class=CODE,delta=2
    27                           	psect	text2264,local,class=CODE,delta=2
    28                           	psect	text2267,local,class=CODE,delta=2
    29                           	psect	swtext2,local,class=CONST,delta=2
    30                           	psect	text2287,local,class=CODE,delta=2
    31                           	psect	text2293,local,class=CODE,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text2298,local,class=CODE,delta=2
    34                           	psect	swtext3,local,class=CONST,delta=2
    35                           	psect	swtext4,local,class=CONST,delta=2
    36                           	psect	text2322,local,class=CODE,delta=2
    37                           	psect	pa_nodes,global,class=CODE,delta=2
    38                           	dabs	1,0x7E,2
    39  000A                     	;#
    40                           
    41                           	psect	config
    42  2007  DF36               	dw	57142	;#
    43                           
    44                           	psect	idataBANK0
    45  0000                     __pidataBANK0:	
    46                           
    47                           	psect	idataBANK3
    48  0000                     __pidataBANK3:	
    49  000E                     _TMR1	set	14
    50  000B                     _INTCON	set	11
    51  0005                     _PORTA	set	5
    52  0006                     _PORTB	set	6
    53  0007                     _PORTC	set	7
    54  0013                     _SSPBUF	set	19
    55  0014                     _SSPCON	set	20
    56  0012                     _T2CON	set	18
    57  0011                     _TMR2	set	17
    58  006C                     _EEIF	set	108
    59  005F                     _GIE	set	95
    60  0030                     _RB0	set	48
    61  0038                     _RC0	set	56
    62  0039                     _RC1	set	57
    63  003A                     _RC2	set	58
    64  0060                     _TMR1IF	set	96
    65  0080                     _TMR1ON	set	128
    66  0061                     _TMR2IF	set	97
    67  009F                     _ADCON1	set	159
    68  0081                     _OPTION_REG	set	129
    69  0092                     _PR2	set	146
    70  0093                     _SSPADD	set	147
    71  0091                     _SSPCON2	set	145
    72  0094                     _SSPSTAT	set	148
    73  0085                     _TRISA	set	133
    74  0086                     _TRISB	set	134
    75  0087                     _TRISC	set	135
    76  048D                     _ACKDT	set	1165
    77  048C                     _ACKEN	set	1164
    78  04A0                     _BF	set	1184
    79  048A                     _PEN	set	1162
    80  048B                     _RCEN	set	1163
    81  0489                     _RSEN	set	1161
    82  0488                     _SEN	set	1160
    83  0460                     _TMR1IE	set	1120
    84  043B                     _TRISC3	set	1083
    85  043C                     _TRISC4	set	1084
    86  010D                     _EEADR	set	269
    87  010C                     _EEDATA	set	268
    88  018D                     _EECON2	set	397
    89  0C67                     _EEPGD	set	3175
    90  0C60                     _RD	set	3168
    91  0C61                     _WR	set	3169
    92  0C62                     _WREN	set	3170
    93                           
    94                           	psect	cinit
    95  19EB                     start_initialization:	
    96                           
    97                           ; Clear objects allocated to BITBANK0
    98  19EB  01DD               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
    99  19EC  01DE               	clrf	((__pbitbssBANK0/(0+8)+1))& (0+127)
   100                           
   101                           ; Clear objects allocated to BANK0
   102  19ED  1383               	bcf	3,7	;select IRP bank0
   103  19EE  3052               	movlw	low __pbssBANK0
   104  19EF  0084               	movwf	4
   105  19F0  305D               	movlw	low (__pbssBANK0+11)
   106  19F1  120A  158A  2000   	fcall	clear_ram
      +       160A  158A         
   107                           
   108                           ; Clear objects allocated to BANK1
   109  19F6  1683               	bsf	3,5	;RP0=1, select bank1
   110  19F7  01EF               	clrf	__pbssBANK1& (0+127)
   111                           
   112                           ; Clear objects allocated to BANK3
   113  19F8  1783               	bsf	3,7	;select IRP bank2
   114  19F9  30DA               	movlw	low __pbssBANK3
   115  19FA  0084               	movwf	4
   116  19FB  30E5               	movlw	low (__pbssBANK3+11)
   117  19FC  120A  158A  2000   	fcall	clear_ram
      +       160A  158A         
   118                           
   119                           ; Clear objects allocated to BANK2
   120  1A01  3010               	movlw	low __pbssBANK2
   121  1A02  0084               	movwf	4
   122  1A03  3050               	movlw	low (__pbssBANK2+64)
   123  1A04  120A  158A  2000   	fcall	clear_ram
      +       160A  158A         
   124                           
   125                           ; Initialize objects allocated to BANK3
   126  1A09  1703               	bsf	3,6	;RP1=1, select bank3
   127                           
   128                           ;initializer for TimeToInd@F1317
   129  1A0A  3022               	movlw	34
   130  1A0B  00BF               	movwf	__pdataBANK3& (0+127)
   131  1A0C  3022               	movlw	34
   132  1A0D  00C0               	movwf	(__pdataBANK3+1)& (0+127)
   133  1A0E  3022               	movlw	34
   134  1A0F  00C1               	movwf	(__pdataBANK3+2)& (0+127)
   135  1A10  3022               	movlw	34
   136  1A11  00C2               	movwf	(__pdataBANK3+3)& (0+127)
   137  1A12  3022               	movlw	34
   138  1A13  00C3               	movwf	(__pdataBANK3+4)& (0+127)
   139  1A14  3022               	movlw	34
   140  1A15  00C4               	movwf	(__pdataBANK3+5)& (0+127)
   141  1A16  3022               	movlw	34
   142  1A17  00C5               	movwf	(__pdataBANK3+6)& (0+127)
   143  1A18  3022               	movlw	34
   144  1A19  00C6               	movwf	(__pdataBANK3+7)& (0+127)
   145  1A1A  3022               	movlw	34
   146  1A1B  00C7               	movwf	(__pdataBANK3+8)& (0+127)
   147  1A1C  3022               	movlw	34
   148  1A1D  00C8               	movwf	(__pdataBANK3+9)& (0+127)
   149  1A1E  3022               	movlw	34
   150  1A1F  00C9               	movwf	(__pdataBANK3+10)& (0+127)
   151  1A20  3022               	movlw	34
   152  1A21  00CA               	movwf	(__pdataBANK3+11)& (0+127)
   153  1A22  3022               	movlw	34
   154  1A23  00CB               	movwf	(__pdataBANK3+12)& (0+127)
   155  1A24  3022               	movlw	34
   156  1A25  00CC               	movwf	(__pdataBANK3+13)& (0+127)
   157  1A26  3022               	movlw	34
   158  1A27  00CD               	movwf	(__pdataBANK3+14)& (0+127)
   159  1A28  3022               	movlw	34
   160  1A29  00CE               	movwf	(__pdataBANK3+15)& (0+127)
   161  1A2A  30FF               	movlw	255
   162  1A2B  00CF               	movwf	(__pdataBANK3+16)& (0+127)
   163                           
   164                           ;initializer for TimeToInd@F1311
   165  1A2C  3022               	movlw	34
   166  1A2D  00D0               	movwf	(__pdataBANK3+17)& (0+127)
   167  1A2E  3022               	movlw	34
   168  1A2F  00D1               	movwf	(__pdataBANK3+18)& (0+127)
   169  1A30  3022               	movlw	34
   170  1A31  00D2               	movwf	(__pdataBANK3+19)& (0+127)
   171  1A32  30FF               	movlw	255
   172  1A33  00D3               	movwf	(__pdataBANK3+20)& (0+127)
   173                           
   174                           ;initializer for TimeEdit@F1344
   175  1A34  3000               	movlw	0
   176  1A35  00D4               	movwf	(__pdataBANK3+21)& (0+127)
   177  1A36  3002               	movlw	2
   178  1A37  00D5               	movwf	(__pdataBANK3+22)& (0+127)
   179                           
   180                           ;initializer for _AdressOfNextStartCell
   181  1A38  30F0               	movlw	240
   182  1A39  00D6               	movwf	(__pdataBANK3+23)& (0+127)
   183                           
   184                           ;initializer for GetDayOfWeek@array
   185  1A3A  3000               	movlw	0
   186  1A3B  00D7               	movwf	(__pdataBANK3+24)& (0+127)
   187  1A3C  3000               	movlw	0
   188  1A3D  00D8               	movwf	(__pdataBANK3+25)& (0+127)
   189  1A3E  30FF               	movlw	255
   190  1A3F  00D9               	movwf	(__pdataBANK3+26)& (0+127)
   191                           
   192                           ; Initialize objects allocated to BANK0
   193  1A40  1283               	bcf	3,5	;RP0=0, select bank0
   194  1A41  1303               	bcf	3,6	;RP1=0, select bank0
   195                           
   196                           ;initializer for _LCD_ON_TIMEOUT
   197  1A42  3060               	movlw	96
   198  1A43  00DF               	movwf	__pdataBANK0& (0+127)
   199  1A44  30EA               	movlw	234
   200  1A45  00E0               	movwf	(__pdataBANK0+1)& (0+127)
   201                           
   202                           ;initializer for F@PressedKeyIndex
   203  1A46  30FF               	movlw	255
   204  1A47  00E1               	movwf	(__pdataBANK0+2)& (0+127)
   205                           
   206                           ;initializer for _GlobalBlinkCycleTime
   207  1A48  3064               	movlw	100
   208  1A49  00E2               	movwf	(__pdataBANK0+3)& (0+127)
   209                           
   210                           ;initializer for _cDays
   211  1A4A  3001               	movlw	1
   212  1A4B  00E3               	movwf	(__pdataBANK0+4)& (0+127)
   213                           
   214                           ;initializer for _cMonths
   215  1A4C  3001               	movlw	1
   216  1A4D  00E4               	movwf	(__pdataBANK0+5)& (0+127)
   217                           
   218                           ;initializer for _cWeekDay
   219  1A4E  3004               	movlw	4
   220  1A4F  00E5               	movwf	(__pdataBANK0+6)& (0+127)
   221  1A50                     end_of_initialization:	
   222                           ;End of C runtime variable initialization code
   223                           
   224  1A50  0183               	clrf	3
   225  1A51  160A  158A  2920   	ljmp	_main	;jump to C main() function
   226                           
   227                           	psect	bitbssBANK0
   228  02E8                     __pbitbssBANK0:	
   229  02E8                     _GlobalBlink:	
   230  02E8                     	ds	1
   231  02E9                     _IsLCDModified:	
   232  02E9                     	ds	1
   233  02EA                     _LCD_Light_On:	
   234  02EA                     	ds	1
   235  02EB                     _LCD_Power_On:	
   236  02EB                     	ds	1
   237  02EC                     _LockSignals:	
   238  02EC                     	ds	1
   239  02ED                     _ModeOfFirstLine:	
   240  02ED                     	ds	1
   241  02EE                     _RelevanceOfNextStartCell:	
   242  02EE                     	ds	1
   243  02EF                     _TimeIsRead:	
   244  02EF                     	ds	1
   245  02F0                     _isTimeSetting:	
   246  02F0                     	ds	1
   247                           
   248                           	psect	bssBANK0
   249  0052                     __pbssBANK0:	
   250  0052                     _Minutes:	
   251  0052                     	ds	4
   252  0056                     F@ButtonPressTimeOut:	
   253  0056                     	ds	1
   254  0057                     F@KeyIndex:	
   255  0057                     	ds	1
   256  0058                     _CurrentReadingCell:	
   257  0058                     	ds	1
   258  0059                     _CurrentSignalsData:	
   259  0059                     	ds	1
   260  005A                     _SignalsOut:	
   261  005A                     	ds	1
   262  005B                     _cHours:	
   263  005B                     	ds	1
   264  005C                     _cMinutes:	
   265  005C                     	ds	1
   266                           
   267                           	psect	dataBANK0
   268  005F                     __pdataBANK0:	
   269  005F                     _LCD_ON_TIMEOUT:	
   270  005F                     	ds	2
   271  0061                     F@PressedKeyIndex:	
   272  0061                     	ds	1
   273  0062                     _GlobalBlinkCycleTime:	
   274  0062                     	ds	1
   275  0063                     _cDays:	
   276  0063                     	ds	1
   277  0064                     _cMonths:	
   278  0064                     	ds	1
   279  0065                     _cWeekDay:	
   280  0065                     	ds	1
   281                           
   282                           	psect	bssBANK1
   283  00EF                     __pbssBANK1:	
   284  00EF                     _KeyCode:	
   285  00EF                     	ds	1
   286                           
   287                           	psect	bssBANK3
   288  01DA                     __pbssBANK3:	
   289  01DA                     _Clock:	
   290  01DA                     	ds	4
   291  01DE                     Scheduler@NumberOfCells:	
   292  01DE                     	ds	1
   293  01DF                     _CurrentSignals:	
   294  01DF                     	ds	1
   295  01E0                     _SignalsForInd:	
   296  01E0                     	ds	1
   297  01E1                     _NearTimeStart:	
   298  01E1                     	ds	4
   299                           
   300                           	psect	dataBANK3
   301  01BF                     __pdataBANK3:	
   302  01BF                     TimeToInd@F1317:	
   303  01BF                     	ds	17
   304  01D0                     TimeToInd@F1311:	
   305  01D0                     	ds	4
   306  01D4                     TimeEdit@F1344:	
   307  01D4                     	ds	2
   308  01D6                     _AdressOfNextStartCell:	
   309  01D6                     	ds	1
   310  01D7                     GetDayOfWeek@array:	
   311  01D7                     	ds	3
   312                           
   313                           	psect	bssBANK2
   314  0110                     __pbssBANK2:	
   315  0110                     _digits:	
   316  0110                     	ds	32
   317  0130                     _modifide_digits:	
   318  0130                     	ds	32
   319                           
   320                           	psect	clrtext
   321  0800                     clear_ram:	
   322                           ;	Called with FSR containing the base address, and
   323                           ;	W with the last address+1
   324                           
   325  0800  0064               	clrwdt	;clear the watchdog before getting into this loop
   326  0801                     clrloop:	
   327  0801  0180               	clrf	0	;clear RAM location pointed to by FSR
   328  0802  0A84               	incf	4,f	;increment pointer
   329  0803  0604               	xorwf	4,w	;XOR with final address
   330  0804  1903               	btfsc	3,2	;have we reached the end yet?
   331  0805  3400               	retlw	0	;all done for this memory range, return
   332  0806  0604               	xorwf	4,w	;XOR again to restore value
   333  0807  2801               	goto	clrloop	;do the next byte
   334                           
   335                           	psect	cstackBANK3
   336  0190                     __pcstackBANK3:	
   337  0190                     ?_Scheduler:	
   338  0190                     TimeToInd@day:	
   339                           ; 0 bytes @ 0x0
   340                           
   341  0190                     Scheduler@new:	
   342                           ; 1 bytes @ 0x0
   343                           
   344                           
   345                           ; 1 bytes @ 0x0
   346  0190                     	ds	1
   347  0191                     TimeToInd@line_1291:	
   348  0191                     Scheduler@StartFrom:	
   349                           ; 1 bytes @ 0x1
   350                           
   351                           
   352                           ; 1 bytes @ 0x1
   353  0191                     	ds	1
   354  0192                     Scheduler@isDataModified:	
   355  0192                     TimeToInd@TimeStart:	
   356                           ; 1 bytes @ 0x2
   357                           
   358                           
   359                           ; 2 bytes @ 0x2
   360  0192                     	ds	2
   361  0194                     TimeToInd@TimeStop:	
   362                           
   363                           ; 2 bytes @ 0x4
   364  0194                     	ds	2
   365  0196                     TimeToInd@D:	
   366                           
   367                           ; 4 bytes @ 0x6
   368  0196                     	ds	4
   369  019A                     TimeToInd@SignalOn:	
   370                           
   371                           ; 1 bytes @ 0xA
   372  019A                     	ds	1
   373  019B                     TimeToInd@SignalOn_1300:	
   374                           
   375                           ; 1 bytes @ 0xB
   376  019B                     	ds	1
   377  019C                     TimeToInd@Days:	
   378                           
   379                           ; 1 bytes @ 0xC
   380  019C                     	ds	1
   381  019D                     TimeToInd@DataArray2:	
   382                           
   383                           ; 1 bytes @ 0xD
   384  019D                     	ds	1
   385  019E                     TimeToInd@DataArray:	
   386                           
   387                           ; 17 bytes @ 0xE
   388  019E                     	ds	17
   389  01AF                     TimeToInd@Day:	
   390                           
   391                           ; 1 bytes @ 0x1F
   392  01AF                     	ds	1
   393  01B0                     TimeToInd@Signals:	
   394                           
   395                           ; 1 bytes @ 0x20
   396  01B0                     	ds	1
   397  01B1                     TimeToInd@i:	
   398                           
   399                           ; 1 bytes @ 0x21
   400  01B1                     	ds	1
   401  01B2                     TimeToInd@i_1299:	
   402                           
   403                           ; 1 bytes @ 0x22
   404  01B2                     	ds	1
   405  01B3                     TimeToInd@SignalsFinal:	
   406                           
   407                           ; 1 bytes @ 0x23
   408  01B3                     	ds	1
   409  01B4                     TimeToInd@j:	
   410                           
   411                           ; 1 bytes @ 0x24
   412  01B4                     	ds	1
   413  01B5                     TimeToInd@nSymb:	
   414                           
   415                           ; 1 bytes @ 0x25
   416  01B5                     	ds	1
   417  01B6                     TimeToInd@Time:	
   418                           
   419                           ; 2 bytes @ 0x26
   420  01B6                     	ds	2
   421  01B8                     TimeToInd@symbol:	
   422                           
   423                           ; 1 bytes @ 0x28
   424  01B8                     	ds	1
   425  01B9                     TimeToInd@line:	
   426                           
   427                           ; 1 bytes @ 0x29
   428  01B9                     	ds	1
   429  01BA                     TimeToInd@temp:	
   430                           
   431                           ; 4 bytes @ 0x2A
   432  01BA                     	ds	4
   433  01BE                     ??_main:	
   434                           
   435                           ; 0 bytes @ 0x2E
   436  01BE                     	ds	1
   437                           
   438                           	psect	cstackBANK1
   439  00A0                     __pcstackBANK1:	
   440  00A0                     ??_I2CInit:	
   441  00A0                     ??_I2CStart:	
   442                           ; 0 bytes @ 0x0
   443                           
   444  00A0                     ??_I2CSend:	
   445                           ; 0 bytes @ 0x0
   446                           
   447  00A0                     ??_I2CStop:	
   448                           ; 0 bytes @ 0x0
   449                           
   450  00A0                     ?_setBlink:	
   451                           ; 0 bytes @ 0x0
   452                           
   453  00A0                     ??_clrInd:	
   454                           ; 0 bytes @ 0x0
   455                           
   456  00A0                     ??_GetDayOfWeek:	
   457                           ; 0 bytes @ 0x0
   458                           
   459  00A0                     ?_EEWR:	
   460                           ; 0 bytes @ 0x0
   461                           
   462  00A0                     ??_EERD:	
   463                           ; 0 bytes @ 0x0
   464                           
   465  00A0                     ??_lcd_send_initial_half_byte:	
   466                           ; 0 bytes @ 0x0
   467                           
   468  00A0                     ??_ConvertDayToBit:	
   469                           ; 0 bytes @ 0x0
   470                           
   471  00A0                     ??_FillMinutes:	
   472                           ; 0 bytes @ 0x0
   473                           
   474  00A0                     ?_getDigit:	
   475                           ; 0 bytes @ 0x0
   476                           
   477  00A0                     ?_entNum:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  00A0                     ?___lbdiv:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  00A0                     ?___lwdiv:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  00A0                     ?___lwmod:	
   487                           ; 2 bytes @ 0x0
   488                           
   489  00A0                     ?___lmul:	
   490                           ; 2 bytes @ 0x0
   491                           
   492  00A0                     ?___llmod:	
   493                           ; 4 bytes @ 0x0
   494                           
   495  00A0                     ?___lldiv:	
   496                           ; 4 bytes @ 0x0
   497                           
   498  00A0                     ?___almod:	
   499                           ; 4 bytes @ 0x0
   500                           
   501  00A0                     ?___aldiv:	
   502                           ; 4 bytes @ 0x0
   503                           
   504  00A0                     getDigit@symbol:	
   505                           ; 4 bytes @ 0x0
   506                           
   507  00A0                     setBlink@symbol:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  00A0                     entNum@borderUp:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  00A0                     GetDayOfWeek@day:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  00A0                     EEWR@data:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  00A0                     EERD@adress:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  00A0                     ConvertDayToBit@DayNumber:	
   523                           ; 1 bytes @ 0x0
   524                           
   525  00A0                     I2CSend@dat:	
   526                           ; 1 bytes @ 0x0
   527                           
   528  00A0                     ___lbdiv@divisor:	
   529                           ; 1 bytes @ 0x0
   530                           
   531  00A0                     ___lwdiv@divisor:	
   532                           ; 1 bytes @ 0x0
   533                           
   534  00A0                     ___lwmod@divisor:	
   535                           ; 2 bytes @ 0x0
   536                           
   537  00A0                     ___lmul@multiplier:	
   538                           ; 2 bytes @ 0x0
   539                           
   540  00A0                     ___llmod@divisor:	
   541                           ; 4 bytes @ 0x0
   542                           
   543  00A0                     ___lldiv@divisor:	
   544                           ; 4 bytes @ 0x0
   545                           
   546  00A0                     ___almod@divisor:	
   547                           ; 4 bytes @ 0x0
   548                           
   549  00A0                     ___aldiv@divisor:	
   550                           ; 4 bytes @ 0x0
   551                           
   552                           
   553                           ; 4 bytes @ 0x0
   554  00A0                     	ds	1
   555  00A1                     ??_getDigit:	
   556  00A1                     ??_entNum:	
   557                           ; 0 bytes @ 0x1
   558                           
   559  00A1                     ??_EEWR:	
   560                           ; 0 bytes @ 0x1
   561                           
   562  00A1                     ??___lbdiv:	
   563                           ; 0 bytes @ 0x1
   564                           
   565  00A1                     setBlink@value:	
   566                           ; 0 bytes @ 0x1
   567                           
   568  00A1                     entNum@borderDown:	
   569                           ; 1 bytes @ 0x1
   570                           
   571  00A1                     EEWR@adress:	
   572                           ; 1 bytes @ 0x1
   573                           
   574  00A1                     EERD@INTCON_BUP:	
   575                           ; 1 bytes @ 0x1
   576                           
   577  00A1                     lcd_send_initial_half_byte@data:	
   578                           ; 1 bytes @ 0x1
   579                           
   580  00A1                     ___lbdiv@dividend:	
   581                           ; 1 bytes @ 0x1
   582                           
   583                           
   584                           ; 1 bytes @ 0x1
   585  00A1                     	ds	1
   586  00A2                     ??_setBlink:	
   587  00A2                     entNum@KeyValue:	
   588                           ; 0 bytes @ 0x2
   589                           
   590  00A2                     EEWR@INTCON_BUP:	
   591                           ; 1 bytes @ 0x2
   592                           
   593  00A2                     EERD@EEDATA_BUP:	
   594                           ; 1 bytes @ 0x2
   595                           
   596  00A2                     ___lbdiv@counter:	
   597                           ; 1 bytes @ 0x2
   598                           
   599  00A2                     _lcd_send_initial_half_byte$1348:	
   600                           ; 1 bytes @ 0x2
   601                           
   602  00A2                     ___lwdiv@dividend:	
   603                           ; 2 bytes @ 0x2
   604                           
   605  00A2                     ___lwmod@dividend:	
   606                           ; 2 bytes @ 0x2
   607                           
   608                           
   609                           ; 2 bytes @ 0x2
   610  00A2                     	ds	1
   611  00A3                     ?_ParseDataRecord:	
   612  00A3                     ?_WriteFourBytesEE:	
   613                           ; 0 bytes @ 0x3
   614                           
   615  00A3                     ?_FindCell:	
   616                           ; 0 bytes @ 0x3
   617                           
   618  00A3                     clrInd@b:	
   619                           ; 1 bytes @ 0x3
   620                           
   621  00A3                     FindCell@New:	
   622                           ; 1 bytes @ 0x3
   623                           
   624  00A3                     ___lbdiv@quotient:	
   625                           ; 1 bytes @ 0x3
   626                           
   627  00A3                     WriteFourBytesEE@data:	
   628                           ; 1 bytes @ 0x3
   629                           
   630  00A3                     ParseDataRecord@Data:	
   631                           ; 4 bytes @ 0x3
   632                           
   633                           
   634                           ; 4 bytes @ 0x3
   635  00A3                     	ds	1
   636  00A4                     ??___lwdiv:	
   637  00A4                     ??___lwmod:	
   638                           ; 0 bytes @ 0x4
   639                           
   640  00A4                     getDigit@line:	
   641                           ; 0 bytes @ 0x4
   642                           
   643  00A4                     clrInd@a:	
   644                           ; 1 bytes @ 0x4
   645                           
   646  00A4                     lcd_send_initial_half_byte@data_temp:	
   647                           ; 1 bytes @ 0x4
   648                           
   649  00A4                     FindCell@previous:	
   650                           ; 1 bytes @ 0x4
   651                           
   652  00A4                     ___lwdiv@counter:	
   653                           ; 1 bytes @ 0x4
   654                           
   655  00A4                     ___lwmod@counter:	
   656                           ; 1 bytes @ 0x4
   657                           
   658  00A4                     ___lmul@multiplicand:	
   659                           ; 1 bytes @ 0x4
   660                           
   661  00A4                     ___llmod@dividend:	
   662                           ; 4 bytes @ 0x4
   663                           
   664  00A4                     ___lldiv@dividend:	
   665                           ; 4 bytes @ 0x4
   666                           
   667  00A4                     ___almod@dividend:	
   668                           ; 4 bytes @ 0x4
   669                           
   670  00A4                     ___aldiv@dividend:	
   671                           ; 4 bytes @ 0x4
   672                           
   673                           
   674                           ; 4 bytes @ 0x4
   675  00A4                     	ds	1
   676  00A5                     ??_FindCell:	
   677  00A5                     ??_getBorderUp:	
   678                           ; 0 bytes @ 0x5
   679                           
   680  00A5                     ?___wmul:	
   681                           ; 0 bytes @ 0x5
   682                           
   683  00A5                     setBlink@value0:	
   684                           ; 2 bytes @ 0x5
   685                           
   686  00A5                     getBorderUp@n:	
   687                           ; 1 bytes @ 0x5
   688                           
   689  00A5                     lcd_send_initial_half_byte@a:	
   690                           ; 1 bytes @ 0x5
   691                           
   692  00A5                     _FindCell$1365:	
   693                           ; 2 bytes @ 0x5
   694                           
   695  00A5                     ___wmul@multiplier:	
   696                           ; 2 bytes @ 0x5
   697                           
   698  00A5                     ___lwdiv@quotient:	
   699                           ; 2 bytes @ 0x5
   700                           
   701                           
   702                           ; 2 bytes @ 0x5
   703  00A5                     	ds	1
   704  00A6                     setBlink@line:	
   705  00A6                     getBorderUp@BorderUp:	
   706                           ; 1 bytes @ 0x6
   707                           
   708                           
   709                           ; 1 bytes @ 0x6
   710  00A6                     	ds	1
   711  00A7                     ??_WriteFourBytesEE:	
   712  00A7                     ??_lcd_send_byte:	
   713                           ; 0 bytes @ 0x7
   714                           
   715  00A7                     WriteFourBytesEE@adress:	
   716                           ; 0 bytes @ 0x7
   717                           
   718  00A7                     FindCell@adressNew:	
   719                           ; 1 bytes @ 0x7
   720                           
   721  00A7                     ParseDataRecord@TimeStart:	
   722                           ; 1 bytes @ 0x7
   723                           
   724  00A7                     ___wmul@multiplicand:	
   725                           ; 2 bytes @ 0x7
   726                           
   727                           
   728                           ; 2 bytes @ 0x7
   729  00A7                     	ds	1
   730  00A8                     ??___lmul:	
   731  00A8                     ??___llmod:	
   732                           ; 0 bytes @ 0x8
   733                           
   734  00A8                     ??___lldiv:	
   735                           ; 0 bytes @ 0x8
   736                           
   737  00A8                     ??___almod:	
   738                           ; 0 bytes @ 0x8
   739                           
   740  00A8                     ??___aldiv:	
   741                           ; 0 bytes @ 0x8
   742                           
   743  00A8                     WriteFourBytesEE@i:	
   744                           ; 0 bytes @ 0x8
   745                           
   746  00A8                     lcd_send_byte@data:	
   747                           ; 1 bytes @ 0x8
   748                           
   749  00A8                     FindCell@D:	
   750                           ; 1 bytes @ 0x8
   751                           
   752  00A8                     ___llmod@counter:	
   753                           ; 1 bytes @ 0x8
   754                           
   755  00A8                     ___almod@counter:	
   756                           ; 1 bytes @ 0x8
   757                           
   758  00A8                     ___aldiv@counter:	
   759                           ; 1 bytes @ 0x8
   760                           
   761  00A8                     ___lmul@product:	
   762                           ; 1 bytes @ 0x8
   763                           
   764  00A8                     ___lldiv@quotient:	
   765                           ; 4 bytes @ 0x8
   766                           
   767                           
   768                           ; 4 bytes @ 0x8
   769  00A8                     	ds	1
   770  00A9                     ??_lcd_off:	
   771  00A9                     ??_lcd_init:	
   772                           ; 0 bytes @ 0x9
   773                           
   774  00A9                     ??___wmul:	
   775                           ; 0 bytes @ 0x9
   776                           
   777  00A9                     FindCell@adressStart:	
   778                           ; 0 bytes @ 0x9
   779                           
   780  00A9                     ___almod@sign:	
   781                           ; 1 bytes @ 0x9
   782                           
   783  00A9                     ___aldiv@sign:	
   784                           ; 1 bytes @ 0x9
   785                           
   786  00A9                     ParseDataRecord@TimeStop:	
   787                           ; 1 bytes @ 0x9
   788                           
   789  00A9                     ___wmul@product:	
   790                           ; 2 bytes @ 0x9
   791                           
   792                           
   793                           ; 2 bytes @ 0x9
   794  00A9                     	ds	1
   795  00AA                     FindCell@adress:	
   796  00AA                     ___aldiv@quotient:	
   797                           ; 1 bytes @ 0xA
   798                           
   799                           
   800                           ; 4 bytes @ 0xA
   801  00AA                     	ds	1
   802  00AB                     lcd_init@INTCON_BUF:	
   803  00AB                     ParseDataRecord@Days:	
   804                           ; 1 bytes @ 0xB
   805                           
   806                           
   807                           ; 2 bytes @ 0xB
   808  00AB                     	ds	1
   809  00AC                     ?_WriteTime:	
   810  00AC                     ??_lcd_on:	
   811                           ; 0 bytes @ 0xC
   812                           
   813  00AC                     WriteTime@Hours:	
   814                           ; 0 bytes @ 0xC
   815                           
   816  00AC                     ___lldiv@counter:	
   817                           ; 1 bytes @ 0xC
   818                           
   819                           
   820                           ; 1 bytes @ 0xC
   821  00AC                     	ds	1
   822  00AD                     WriteTime@DayOfWeek:	
   823  00AD                     ParseDataRecord@Signals:	
   824                           ; 1 bytes @ 0xD
   825                           
   826                           
   827                           ; 2 bytes @ 0xD
   828  00AD                     	ds	1
   829  00AE                     ?_ParseTime:	
   830  00AE                     ??_WriteTime:	
   831                           ; 0 bytes @ 0xE
   832                           
   833  00AE                     ?_setDigit:	
   834                           ; 0 bytes @ 0xE
   835                           
   836  00AE                     setDigit@symbol:	
   837                           ; 0 bytes @ 0xE
   838                           
   839  00AE                     ParseTime@TimeValue:	
   840                           ; 1 bytes @ 0xE
   841                           
   842                           
   843                           ; 4 bytes @ 0xE
   844  00AE                     	ds	1
   845  00AF                     ??_ParseDataRecord:	
   846  00AF                     setDigit@data:	
   847                           ; 0 bytes @ 0xF
   848                           
   849                           
   850                           ; 1 bytes @ 0xF
   851  00AF                     	ds	1
   852  00B0                     ??_setDigit:	
   853                           
   854                           ; 0 bytes @ 0x10
   855  00B0                     	ds	1
   856  00B1                     ?_ReadFourBytesEE:	
   857                           
   858                           ; 4 bytes @ 0x11
   859  00B1                     	ds	1
   860  00B2                     ParseTime@Time:	
   861                           
   862                           ; 1 bytes @ 0x12
   863  00B2                     	ds	1
   864  00B3                     setDigit@e0:	
   865  00B3                     ParseTime@Day:	
   866                           ; 1 bytes @ 0x13
   867                           
   868                           
   869                           ; 1 bytes @ 0x13
   870  00B3                     	ds	1
   871  00B4                     ??_ParseTime:	
   872  00B4                     _setDigit$1257:	
   873                           ; 0 bytes @ 0x14
   874                           
   875                           
   876                           ; 1 bytes @ 0x14
   877  00B4                     	ds	1
   878  00B5                     ??_ReadFourBytesEE:	
   879  00B5                     setDigit@value:	
   880                           ; 0 bytes @ 0x15
   881                           
   882                           
   883                           ; 1 bytes @ 0x15
   884  00B5                     	ds	1
   885  00B6                     setDigit@value0:	
   886  00B6                     ParseTime@DayTime:	
   887                           ; 1 bytes @ 0x16
   888                           
   889                           
   890                           ; 2 bytes @ 0x16
   891  00B6                     	ds	1
   892  00B7                     setDigit@line:	
   893                           
   894                           ; 1 bytes @ 0x17
   895  00B7                     	ds	1
   896  00B8                     ?_SendArrayToLCD:	
   897  00B8                     ?_NumericToIndicator:	
   898                           ; 0 bytes @ 0x18
   899                           
   900  00B8                     ?_ReIndTimeEdit:	
   901                           ; 0 bytes @ 0x18
   902                           
   903  00B8                     ??_TimesToIndicator:	
   904                           ; 0 bytes @ 0x18
   905                           
   906  00B8                     ?_ItemsToIndicator:	
   907                           ; 0 bytes @ 0x18
   908                           
   909  00B8                     SendArrayToLCD@line:	
   910                           ; 0 bytes @ 0x18
   911                           
   912  00B8                     ItemsToIndicator@max_i:	
   913                           ; 1 bytes @ 0x18
   914                           
   915  00B8                     NumericToIndicator@n:	
   916                           ; 1 bytes @ 0x18
   917                           
   918  00B8                     ReIndTimeEdit@n:	
   919                           ; 4 bytes @ 0x18
   920                           
   921                           
   922                           ; 4 bytes @ 0x18
   923  00B8                     	ds	1
   924  00B9                     SendArrayToLCD@position:	
   925  00B9                     ItemsToIndicator@firstDigit:	
   926                           ; 1 bytes @ 0x19
   927                           
   928                           
   929                           ; 1 bytes @ 0x19
   930  00B9                     	ds	1
   931  00BA                     ??_SendArrayToLCD:	
   932  00BA                     ??_ItemsToIndicator:	
   933                           ; 0 bytes @ 0x1A
   934                           
   935  00BA                     TimesToIndicator@Times:	
   936                           ; 0 bytes @ 0x1A
   937                           
   938  00BA                     ItemsToIndicator@items:	
   939                           ; 1 bytes @ 0x1A
   940                           
   941  00BA                     WriteTime@Minutes:	
   942                           ; 1 bytes @ 0x1A
   943                           
   944                           
   945                           ; 1 bytes @ 0x1A
   946  00BA                     	ds	1
   947  00BB                     SendArrayToLCD@Symb:	
   948  00BB                     ItemsToIndicator@i:	
   949                           ; 1 bytes @ 0x1B
   950                           
   951  00BB                     WriteTime@INTCON_BUP:	
   952                           ; 1 bytes @ 0x1B
   953                           
   954  00BB                     TimesToIndicator@temp:	
   955                           ; 1 bytes @ 0x1B
   956                           
   957                           
   958                           ; 2 bytes @ 0x1B
   959  00BB                     	ds	1
   960  00BC                     ??_ReIndTimeEdit:	
   961  00BC                     NumericToIndicator@displacement:	
   962                           ; 0 bytes @ 0x1C
   963                           
   964  00BC                     SendArrayToLCD@i:	
   965                           ; 1 bytes @ 0x1C
   966                           
   967  00BC                     ReIndTimeEdit@temp:	
   968                           ; 2 bytes @ 0x1C
   969                           
   970                           
   971                           ; 4 bytes @ 0x1C
   972  00BC                     	ds	1
   973  00BD                     ??_NumericToIndicator:	
   974  00BD                     ?_RefreshSchedulerIndicator:	
   975                           ; 0 bytes @ 0x1D
   976                           
   977  00BD                     ReadFourBytesEE@adress:	
   978                           ; 1 bytes @ 0x1D
   979                           
   980  00BD                     RefreshSchedulerIndicator@New:	
   981                           ; 1 bytes @ 0x1D
   982                           
   983  00BD                     TimesToIndicator@j:	
   984                           ; 1 bytes @ 0x1D
   985                           
   986                           
   987                           ; 1 bytes @ 0x1D
   988  00BD                     	ds	1
   989  00BE                     RefreshSchedulerIndicator@CopyFrom:	
   990  00BE                     ReadFourBytesEE@x:	
   991                           ; 1 bytes @ 0x1E
   992                           
   993                           
   994                           ; 4 bytes @ 0x1E
   995  00BE                     	ds	1
   996  00BF                     ??_RefreshSchedulerIndicator:	
   997                           
   998                           ; 0 bytes @ 0x1F
   999  00BF                     	ds	1
  1000  00C0                     ??_TimeEdit:	
  1001  00C0                     _RefreshSchedulerIndicator$1370:	
  1002                           ; 0 bytes @ 0x20
  1003                           
  1004                           
  1005                           ; 2 bytes @ 0x20
  1006  00C0                     	ds	2
  1007  00C2                     RefreshSchedulerIndicator@adress:	
  1008  00C2                     ReadFourBytesEE@i:	
  1009                           ; 1 bytes @ 0x22
  1010                           
  1011                           
  1012                           ; 2 bytes @ 0x22
  1013  00C2                     	ds	2
  1014  00C4                     ??_FindNextTimeStart:	
  1015  00C4                     ?_EditSchedule:	
  1016                           ; 0 bytes @ 0x24
  1017                           
  1018  00C4                     EditSchedule@SourceOfRecord:	
  1019                           ; 1 bytes @ 0x24
  1020                           
  1021                           
  1022                           ; 1 bytes @ 0x24
  1023  00C4                     	ds	1
  1024  00C5                     ??_EditSchedule:	
  1025                           
  1026                           ; 0 bytes @ 0x25
  1027  00C5                     	ds	3
  1028  00C8                     FindNextTimeStart@TimeStop:	
  1029  00C8                     TimeEdit@t:	
  1030                           ; 2 bytes @ 0x28
  1031                           
  1032                           
  1033                           ; 4 bytes @ 0x28
  1034  00C8                     	ds	2
  1035  00CA                     FindNextTimeStart@adressStart:	
  1036                           
  1037                           ; 1 bytes @ 0x2A
  1038  00CA                     	ds	1
  1039  00CB                     FindNextTimeStart@DayOn:	
  1040                           
  1041                           ; 1 bytes @ 0x2B
  1042  00CB                     	ds	1
  1043  00CC                     TimeEdit@borders:	
  1044  00CC                     FindNextTimeStart@LastFoundTimeStart:	
  1045                           ; 2 bytes @ 0x2C
  1046                           
  1047                           
  1048                           ; 4 bytes @ 0x2C
  1049  00CC                     	ds	2
  1050  00CE                     TimeEdit@c:	
  1051                           
  1052                           ; 1 bytes @ 0x2E
  1053  00CE                     	ds	1
  1054  00CF                     TimeEdit@j:	
  1055                           
  1056                           ; 1 bytes @ 0x2F
  1057  00CF                     	ds	1
  1058  00D0                     FindNextTimeStart@Data:	
  1059                           
  1060                           ; 4 bytes @ 0x30
  1061  00D0                     	ds	4
  1062  00D4                     FindNextTimeStart@TimeStart:	
  1063                           
  1064                           ; 2 bytes @ 0x34
  1065  00D4                     	ds	1
  1066  00D5                     EditSchedule@TargetAdress:	
  1067                           
  1068                           ; 1 bytes @ 0x35
  1069  00D5                     	ds	1
  1070  00D6                     EditSchedule@BeginEditTimes:	
  1071  00D6                     FindNextTimeStart@TimeIsFound:	
  1072                           ; 1 bytes @ 0x36
  1073                           
  1074                           
  1075                           ; 1 bytes @ 0x36
  1076  00D6                     	ds	1
  1077  00D7                     EditSchedule@adress:	
  1078  00D7                     FindNextTimeStart@TimeOfSignals:	
  1079                           ; 1 bytes @ 0x37
  1080                           
  1081                           
  1082                           ; 4 bytes @ 0x37
  1083  00D7                     	ds	1
  1084  00D8                     EditSchedule@BorderUp:	
  1085                           
  1086                           ; 1 bytes @ 0x38
  1087  00D8                     	ds	1
  1088  00D9                     EditSchedule@TimeStart:	
  1089                           
  1090                           ; 2 bytes @ 0x39
  1091  00D9                     	ds	2
  1092  00DB                     FindNextTimeStart@TimeFrom:	
  1093  00DB                     EditSchedule@TimeStop:	
  1094                           ; 1 bytes @ 0x3B
  1095                           
  1096                           
  1097                           ; 2 bytes @ 0x3B
  1098  00DB                     	ds	1
  1099  00DC                     FindNextTimeStart@Signals:	
  1100                           
  1101                           ; 1 bytes @ 0x3C
  1102  00DC                     	ds	1
  1103  00DD                     FindNextTimeStart@Days:	
  1104  00DD                     EditSchedule@T:	
  1105                           ; 1 bytes @ 0x3D
  1106                           
  1107                           
  1108                           ; 4 bytes @ 0x3D
  1109  00DD                     	ds	1
  1110  00DE                     FindNextTimeStart@adress:	
  1111                           
  1112                           ; 1 bytes @ 0x3E
  1113  00DE                     	ds	1
  1114  00DF                     FindNextTimeStart@DayIndex:	
  1115                           
  1116                           ; 1 bytes @ 0x3F
  1117  00DF                     	ds	1
  1118  00E0                     ??_TimeToInd:	
  1119                           
  1120                           ; 0 bytes @ 0x40
  1121  00E0                     	ds	1
  1122  00E1                     EditSchedule@mode:	
  1123                           
  1124                           ; 1 bytes @ 0x41
  1125  00E1                     	ds	1
  1126  00E2                     EditSchedule@Times:	
  1127                           
  1128                           ; 4 bytes @ 0x42
  1129  00E2                     	ds	4
  1130  00E6                     EditSchedule@Data:	
  1131                           
  1132                           ; 4 bytes @ 0x46
  1133  00E6                     	ds	4
  1134  00EA                     EditSchedule@Days:	
  1135                           
  1136                           ; 1 bytes @ 0x4A
  1137  00EA                     	ds	1
  1138  00EB                     EditSchedule@Signals:	
  1139                           
  1140                           ; 1 bytes @ 0x4B
  1141  00EB                     	ds	1
  1142  00EC                     EditSchedule@j:	
  1143                           
  1144                           ; 1 bytes @ 0x4C
  1145  00EC                     	ds	1
  1146  00ED                     EditSchedule@key:	
  1147                           
  1148                           ; 1 bytes @ 0x4D
  1149  00ED                     	ds	1
  1150  00EE                     EditSchedule@n:	
  1151                           
  1152                           ; 1 bytes @ 0x4E
  1153  00EE                     	ds	1
  1154  00EF                     ??_main2:	
  1155  00EF                     ??_Scheduler:	
  1156                           ; 0 bytes @ 0x4F
  1157                           
  1158                           
  1159                           	psect	cstackCOMMON
  1160  0070                     __pcstackCOMMON:	
  1161                           ; 0 bytes @ 0x4F
  1162                           
  1163  0070                     ?_lcd_off:	
  1164  0070                     ?_main2:	
  1165                           ; 0 bytes @ 0x0
  1166                           
  1167  0070                     ?_lcd_init:	
  1168                           ; 0 bytes @ 0x0
  1169                           
  1170  0070                     ?_ReadTime:	
  1171                           ; 0 bytes @ 0x0
  1172                           
  1173  0070                     ?_I2CInit:	
  1174                           ; 0 bytes @ 0x0
  1175                           
  1176  0070                     ?_I2CStart:	
  1177                           ; 0 bytes @ 0x0
  1178                           
  1179  0070                     ?_I2CSend:	
  1180                           ; 0 bytes @ 0x0
  1181                           
  1182  0070                     ?_I2CRestart:	
  1183                           ; 0 bytes @ 0x0
  1184                           
  1185  0070                     ??_I2CRestart:	
  1186                           ; 0 bytes @ 0x0
  1187                           
  1188  0070                     ??_I2CRead:	
  1189                           ; 0 bytes @ 0x0
  1190                           
  1191  0070                     ?_I2CAck:	
  1192                           ; 0 bytes @ 0x0
  1193                           
  1194  0070                     ??_I2CAck:	
  1195                           ; 0 bytes @ 0x0
  1196                           
  1197  0070                     ?_I2CNak:	
  1198                           ; 0 bytes @ 0x0
  1199                           
  1200  0070                     ??_I2CNak:	
  1201                           ; 0 bytes @ 0x0
  1202                           
  1203  0070                     ?_I2CStop:	
  1204                           ; 0 bytes @ 0x0
  1205                           
  1206  0070                     ?_clrInd:	
  1207                           ; 0 bytes @ 0x0
  1208                           
  1209  0070                     ??_convDig_LCD:	
  1210                           ; 0 bytes @ 0x0
  1211                           
  1212  0070                     ?_TimeToInd:	
  1213                           ; 0 bytes @ 0x0
  1214                           
  1215  0070                     ?_TimeEdit:	
  1216                           ; 0 bytes @ 0x0
  1217                           
  1218  0070                     ?_delay:	
  1219                           ; 0 bytes @ 0x0
  1220                           
  1221  0070                     ?_SendSymbolToLCD:	
  1222                           ; 0 bytes @ 0x0
  1223                           
  1224  0070                     ?_lcd_send_initial_half_byte:	
  1225                           ; 0 bytes @ 0x0
  1226                           
  1227  0070                     ?_lcd_send_byte:	
  1228                           ; 0 bytes @ 0x0
  1229                           
  1230  0070                     ?_lcd_on:	
  1231                           ; 0 bytes @ 0x0
  1232                           
  1233  0070                     ??_ConvKeyNum:	
  1234                           ; 0 bytes @ 0x0
  1235                           
  1236  0070                     ?_TimesToIndicator:	
  1237                           ; 0 bytes @ 0x0
  1238                           
  1239  0070                     ?_SignalsOnOff:	
  1240                           ; 0 bytes @ 0x0
  1241                           
  1242  0070                     ?_FillMinutes:	
  1243                           ; 0 bytes @ 0x0
  1244                           
  1245  0070                     ?_F:	
  1246                           ; 0 bytes @ 0x0
  1247                           
  1248  0070                     ?_main:	
  1249                           ; 0 bytes @ 0x0
  1250                           
  1251  0070                     ?i1_EEWR:	
  1252                           ; 0 bytes @ 0x0
  1253                           
  1254  0070                     ??i1_EERD:	
  1255                           ; 0 bytes @ 0x0
  1256                           
  1257  0070                     ?i1_lcd_send_initial_half_byte:	
  1258                           ; 0 bytes @ 0x0
  1259                           
  1260  0070                     ??i1_lcd_send_initial_half_byte:	
  1261                           ; 0 bytes @ 0x0
  1262                           
  1263  0070                     ?i1_lcd_send_byte:	
  1264                           ; 0 bytes @ 0x0
  1265                           
  1266  0070                     ??i1_ConvertDayToBit:	
  1267                           ; 0 bytes @ 0x0
  1268                           
  1269  0070                     ?i1_FillMinutes:	
  1270                           ; 0 bytes @ 0x0
  1271                           
  1272  0070                     ??i1_FillMinutes:	
  1273                           ; 0 bytes @ 0x0
  1274                           
  1275  0070                     ?i1_I2CInit:	
  1276                           ; 0 bytes @ 0x0
  1277                           
  1278  0070                     ??i1_I2CInit:	
  1279                           ; 0 bytes @ 0x0
  1280                           
  1281  0070                     ?i1_I2CStart:	
  1282                           ; 0 bytes @ 0x0
  1283                           
  1284  0070                     ??i1_I2CStart:	
  1285                           ; 0 bytes @ 0x0
  1286                           
  1287  0070                     ?i1_I2CStop:	
  1288                           ; 0 bytes @ 0x0
  1289                           
  1290  0070                     ??i1_I2CStop:	
  1291                           ; 0 bytes @ 0x0
  1292                           
  1293  0070                     ?i1_I2CSend:	
  1294                           ; 0 bytes @ 0x0
  1295                           
  1296  0070                     ??i1_I2CSend:	
  1297                           ; 0 bytes @ 0x0
  1298                           
  1299  0070                     ?_FindNextTimeStart:	
  1300                           ; 0 bytes @ 0x0
  1301                           
  1302  0070                     ?_I2CRead:	
  1303                           ; 1 bytes @ 0x0
  1304                           
  1305  0070                     ?_convDig_LCD:	
  1306                           ; 1 bytes @ 0x0
  1307                           
  1308  0070                     ?_GetDayOfWeek:	
  1309                           ; 1 bytes @ 0x0
  1310                           
  1311  0070                     ?_EERD:	
  1312                           ; 1 bytes @ 0x0
  1313                           
  1314  0070                     ?_ConvKeyNum:	
  1315                           ; 1 bytes @ 0x0
  1316                           
  1317  0070                     ?_getBorderUp:	
  1318                           ; 1 bytes @ 0x0
  1319                           
  1320  0070                     ?_ConvertDayToBit:	
  1321                           ; 1 bytes @ 0x0
  1322                           
  1323  0070                     ?_BCD_to_DEC:	
  1324                           ; 1 bytes @ 0x0
  1325                           
  1326  0070                     ?___bmul:	
  1327                           ; 1 bytes @ 0x0
  1328                           
  1329  0070                     ?i1_EERD:	
  1330                           ; 1 bytes @ 0x0
  1331                           
  1332  0070                     ?i1_ConvertDayToBit:	
  1333                           ; 1 bytes @ 0x0
  1334                           
  1335  0070                     ?i1___lwdiv:	
  1336                           ; 1 bytes @ 0x0
  1337                           
  1338  0070                     ?i1___lwmod:	
  1339                           ; 2 bytes @ 0x0
  1340                           
  1341  0070                     ?i1___aldiv:	
  1342                           ; 2 bytes @ 0x0
  1343                           
  1344  0070                     convDig_LCD@dig:	
  1345                           ; 4 bytes @ 0x0
  1346                           
  1347  0070                     ConvKeyNum@Num:	
  1348                           ; 1 bytes @ 0x0
  1349                           
  1350  0070                     I2CRead@temp:	
  1351                           ; 1 bytes @ 0x0
  1352                           
  1353  0070                     ___bmul@multiplicand:	
  1354                           ; 1 bytes @ 0x0
  1355                           
  1356  0070                     i1EEWR@data:	
  1357                           ; 1 bytes @ 0x0
  1358                           
  1359  0070                     i1EERD@adress:	
  1360                           ; 1 bytes @ 0x0
  1361                           
  1362  0070                     i1ConvertDayToBit@DayNumber:	
  1363                           ; 1 bytes @ 0x0
  1364                           
  1365  0070                     i1I2CSend@dat:	
  1366                           ; 1 bytes @ 0x0
  1367                           
  1368  0070                     delay@count:	
  1369                           ; 1 bytes @ 0x0
  1370                           
  1371  0070                     i1___lwdiv@divisor:	
  1372                           ; 2 bytes @ 0x0
  1373                           
  1374  0070                     i1___lwmod@divisor:	
  1375                           ; 2 bytes @ 0x0
  1376                           
  1377  0070                     i1___aldiv@divisor:	
  1378                           ; 2 bytes @ 0x0
  1379                           
  1380                           
  1381                           ; 4 bytes @ 0x0
  1382  0070                     	ds	1
  1383  0071                     ??___bmul:	
  1384  0071                     ??i1_EEWR:	
  1385                           ; 0 bytes @ 0x1
  1386                           
  1387  0071                     ___bmul@product:	
  1388                           ; 0 bytes @ 0x1
  1389                           
  1390  0071                     i1EEWR@adress:	
  1391                           ; 1 bytes @ 0x1
  1392                           
  1393  0071                     i1EERD@INTCON_BUP:	
  1394                           ; 1 bytes @ 0x1
  1395                           
  1396  0071                     i1lcd_send_initial_half_byte@data:	
  1397                           ; 1 bytes @ 0x1
  1398                           
  1399                           
  1400                           ; 1 bytes @ 0x1
  1401  0071                     	ds	1
  1402  0072                     ??_delay:	
  1403  0072                     delay@del:	
  1404                           ; 0 bytes @ 0x2
  1405                           
  1406  0072                     ___bmul@multiplier:	
  1407                           ; 1 bytes @ 0x2
  1408                           
  1409  0072                     i1EEWR@INTCON_BUP:	
  1410                           ; 1 bytes @ 0x2
  1411                           
  1412  0072                     i1EERD@EEDATA_BUP:	
  1413                           ; 1 bytes @ 0x2
  1414                           
  1415  0072                     i1_lcd_send_initial_half_byte$1348:	
  1416                           ; 1 bytes @ 0x2
  1417                           
  1418  0072                     i1___lwdiv@dividend:	
  1419                           ; 2 bytes @ 0x2
  1420                           
  1421  0072                     i1___lwmod@dividend:	
  1422                           ; 2 bytes @ 0x2
  1423                           
  1424                           
  1425                           ; 2 bytes @ 0x2
  1426  0072                     	ds	1
  1427  0073                     ??_SendSymbolToLCD:	
  1428  0073                     ?i1_ReadFourBytesEE:	
  1429                           ; 0 bytes @ 0x3
  1430                           
  1431  0073                     ?i1___lmul:	
  1432                           ; 4 bytes @ 0x3
  1433                           
  1434  0073                     i1___lmul@multiplier:	
  1435                           ; 4 bytes @ 0x3
  1436                           
  1437                           
  1438                           ; 4 bytes @ 0x3
  1439  0073                     	ds	1
  1440  0074                     ??i1___lwdiv:	
  1441  0074                     ??i1___lwmod:	
  1442                           ; 0 bytes @ 0x4
  1443                           
  1444  0074                     i1lcd_send_initial_half_byte@data_temp:	
  1445                           ; 0 bytes @ 0x4
  1446                           
  1447  0074                     i1___lwdiv@counter:	
  1448                           ; 1 bytes @ 0x4
  1449                           
  1450  0074                     i1___lwmod@counter:	
  1451                           ; 1 bytes @ 0x4
  1452                           
  1453  0074                     _SendSymbolToLCD$1335:	
  1454                           ; 1 bytes @ 0x4
  1455                           
  1456  0074                     i1___aldiv@dividend:	
  1457                           ; 2 bytes @ 0x4
  1458                           
  1459                           
  1460                           ; 4 bytes @ 0x4
  1461  0074                     	ds	1
  1462  0075                     i1lcd_send_initial_half_byte@a:	
  1463  0075                     i1___lwdiv@quotient:	
  1464                           ; 2 bytes @ 0x5
  1465                           
  1466                           
  1467                           ; 2 bytes @ 0x5
  1468  0075                     	ds	1
  1469  0076                     _SendSymbolToLCD$1336:	
  1470                           
  1471                           ; 2 bytes @ 0x6
  1472  0076                     	ds	1
  1473  0077                     ??i1_lcd_send_byte:	
  1474  0077                     i1ReadFourBytesEE@adress:	
  1475                           ; 0 bytes @ 0x7
  1476                           
  1477  0077                     i1___lmul@multiplicand:	
  1478                           ; 1 bytes @ 0x7
  1479                           
  1480                           
  1481                           ; 4 bytes @ 0x7
  1482  0077                     	ds	1
  1483  0078                     ??i1___aldiv:	
  1484  0078                     SendSymbolToLCD@Symb:	
  1485                           ; 0 bytes @ 0x8
  1486                           
  1487  0078                     i1lcd_send_byte@data:	
  1488                           ; 1 bytes @ 0x8
  1489                           
  1490  0078                     i1___aldiv@counter:	
  1491                           ; 1 bytes @ 0x8
  1492                           
  1493  0078                     i1ReadFourBytesEE@x:	
  1494                           ; 1 bytes @ 0x8
  1495                           
  1496                           
  1497                           ; 4 bytes @ 0x8
  1498  0078                     	ds	1
  1499  0079                     i1___aldiv@sign:	
  1500  0079                     SendSymbolToLCD@a:	
  1501                           ; 1 bytes @ 0x9
  1502                           
  1503                           
  1504                           ; 2 bytes @ 0x9
  1505  0079                     	ds	1
  1506  007A                     i1___aldiv@quotient:	
  1507                           
  1508                           ; 4 bytes @ 0xA
  1509  007A                     	ds	1
  1510  007B                     ??_BCD_to_DEC:	
  1511  007B                     ?i1_WriteTime:	
  1512                           ; 0 bytes @ 0xB
  1513                           
  1514  007B                     ??i1___lmul:	
  1515                           ; 0 bytes @ 0xB
  1516                           
  1517  007B                     SendSymbolToLCD@Smb:	
  1518                           ; 0 bytes @ 0xB
  1519                           
  1520  007B                     i1WriteTime@Hours:	
  1521                           ; 1 bytes @ 0xB
  1522                           
  1523                           
  1524                           ; 1 bytes @ 0xB
  1525  007B                     	ds	1
  1526  007C                     BCD_to_DEC@BCD:	
  1527  007C                     i1WriteTime@DayOfWeek:	
  1528                           ; 1 bytes @ 0xC
  1529                           
  1530  007C                     i1ReadFourBytesEE@i:	
  1531                           ; 1 bytes @ 0xC
  1532                           
  1533                           
  1534                           ; 2 bytes @ 0xC
  1535  007C                     	ds	2
  1536                           
  1537                           	psect	cstackBANK0
  1538  0020                     __pcstackBANK0:	
  1539  0020                     ??i1_ReadFourBytesEE:	
  1540  0020                     i1___lmul@product:	
  1541                           ; 0 bytes @ 0x0
  1542                           
  1543                           
  1544                           ; 4 bytes @ 0x0
  1545  0020                     	ds	4
  1546  0024                     ??i1_WriteTime:	
  1547                           
  1548                           ; 0 bytes @ 0x4
  1549  0024                     	ds	4
  1550  0028                     ??_SignalsOnOff:	
  1551                           
  1552                           ; 0 bytes @ 0x8
  1553  0028                     	ds	2
  1554  002A                     SignalsOnOff@TimeStart:	
  1555                           
  1556                           ; 2 bytes @ 0xA
  1557  002A                     	ds	2
  1558  002C                     SignalsOnOff@TimeStop:	
  1559                           
  1560                           ; 2 bytes @ 0xC
  1561  002C                     	ds	2
  1562  002E                     _SignalsOnOff$1441:	
  1563                           
  1564                           ; 2 bytes @ 0xE
  1565  002E                     	ds	2
  1566  0030                     i1WriteTime@INTCON_BUP:	
  1567  0030                     SignalsOnOff@ThisTime:	
  1568                           ; 1 bytes @ 0x10
  1569                           
  1570                           
  1571                           ; 2 bytes @ 0x10
  1572  0030                     	ds	1
  1573  0031                     i1WriteTime@Minutes:	
  1574                           
  1575                           ; 1 bytes @ 0x11
  1576  0031                     	ds	1
  1577  0032                     ??_ReadTime:	
  1578  0032                     SignalsOnOff@DayTime:	
  1579                           ; 0 bytes @ 0x12
  1580                           
  1581                           
  1582                           ; 2 bytes @ 0x12
  1583  0032                     	ds	2
  1584  0034                     SignalsOnOff@Days:	
  1585                           
  1586                           ; 1 bytes @ 0x14
  1587  0034                     	ds	1
  1588  0035                     SignalsOnOff@Signals:	
  1589                           
  1590                           ; 1 bytes @ 0x15
  1591  0035                     	ds	1
  1592  0036                     SignalsOnOff@ThisDay:	
  1593                           
  1594                           ; 1 bytes @ 0x16
  1595  0036                     	ds	1
  1596  0037                     SignalsOnOff@Data_1442:	
  1597                           
  1598                           ; 1 bytes @ 0x17
  1599  0037                     	ds	1
  1600  0038                     SignalsOnOff@Data:	
  1601                           
  1602                           ; 4 bytes @ 0x18
  1603  0038                     	ds	10
  1604  0042                     ReadTime@Seconds:	
  1605                           
  1606                           ; 1 bytes @ 0x22
  1607  0042                     	ds	1
  1608  0043                     ReadTime@I:	
  1609                           
  1610                           ; 1 bytes @ 0x23
  1611  0043                     	ds	1
  1612  0044                     ??_F:	
  1613                           
  1614                           ; 0 bytes @ 0x24
  1615  0044                     	ds	8
  1616  004C                     F@MinuteAgo:	
  1617                           
  1618                           ; 1 bytes @ 0x2C
  1619  004C                     	ds	1
  1620  004D                     F@DigitValue:	
  1621                           
  1622                           ; 1 bytes @ 0x2D
  1623  004D                     	ds	1
  1624  004E                     F@digit:	
  1625                           
  1626                           ; 1 bytes @ 0x2E
  1627  004E                     	ds	1
  1628  004F                     F@symbol:	
  1629                           
  1630                           ; 2 bytes @ 0x2F
  1631  004F                     	ds	2
  1632  0051                     F@line:	
  1633                           
  1634                           ; 1 bytes @ 0x31
  1635  0051                     	ds	1
  1636                           
  1637                           	psect	maintext
  1638  1920                     __pmaintext:	
  1639 ;;Data sizes: Strings 0, constant 0, data 34, bss 87, persistent 0 stack 0
  1640 ;;Auto spaces:   Size  Autos    Used
  1641 ;; COMMON          14     14      14
  1642 ;; BANK0           80     50      70
  1643 ;; BANK1           80     79      80
  1644 ;; BANK3           96     47      85
  1645 ;; BANK2           96      0      64
  1646 ;;
  1647 ;; Pointer list with targets:
  1648 ;; ?i1_ReadFourBytesEE	unsigned long  size(1) Largest target is 0
  1649 ;;
  1650 ;; ?i1___lmul	unsigned long  size(1) Largest target is 0
  1651 ;;
  1652 ;; ?i1___lwdiv	unsigned int  size(1) Largest target is 0
  1653 ;;
  1654 ;; ?i1___lwmod	unsigned int  size(1) Largest target is 0
  1655 ;;
  1656 ;; ?i1___aldiv	long  size(1) Largest target is 0
  1657 ;;
  1658 ;; ?___lmul	unsigned long  size(1) Largest target is 0
  1659 ;;
  1660 ;; ?_ReadFourBytesEE	unsigned long  size(1) Largest target is 0
  1661 ;;
  1662 ;; ?___wmul	unsigned int  size(1) Largest target is 0
  1663 ;;
  1664 ;; ?___lwdiv	unsigned int  size(1) Largest target is 0
  1665 ;;
  1666 ;; ?___lwmod	unsigned int  size(1) Largest target is 0
  1667 ;;
  1668 ;; ?___almod	long  size(1) Largest target is 0
  1669 ;;
  1670 ;; ?___aldiv	long  size(1) Largest target is 0
  1671 ;;
  1672 ;; ?_GetDayOfWeek	PTR unsigned char  size(1) Largest target is 3
  1673 ;;		 -> GetDayOfWeek@array(BANK3[3]), 
  1674 ;;
  1675 ;; ?___lldiv	unsigned long  size(1) Largest target is 0
  1676 ;;
  1677 ;; ?___llmod	unsigned long  size(1) Largest target is 0
  1678 ;;
  1679 ;; FindNextTimeStart@TimeFrom	PTR unsigned long  size(1) Largest target is 4
  1680 ;;		 -> NearTimeStart(BANK3[4]), 
  1681 ;;
  1682 ;; ParseDataRecord@Signals	PTR unsigned char  size(2) Largest target is 1
  1683 ;;		 -> FindNextTimeStart@Signals(BANK1[1]), EditSchedule@Signals(BANK1[1]), TimeToInd@Signals(BANK3[1]), 
  1684 ;;
  1685 ;; ParseDataRecord@Days	PTR unsigned char  size(2) Largest target is 1
  1686 ;;		 -> FindNextTimeStart@Days(BANK1[1]), EditSchedule@Days(BANK1[1]), TimeToInd@Days(BANK3[1]), 
  1687 ;;
  1688 ;; ParseDataRecord@TimeStop	PTR unsigned int  size(2) Largest target is 2
  1689 ;;		 -> FindNextTimeStart@TimeStop(BANK1[2]), EditSchedule@TimeStop(BANK1[2]), TimeToInd@TimeStop(BANK3[2]), 
  1690 ;;
  1691 ;; ParseDataRecord@TimeStart	PTR unsigned int  size(2) Largest target is 2
  1692 ;;		 -> FindNextTimeStart@TimeStart(BANK1[2]), EditSchedule@TimeStart(BANK1[2]), TimeToInd@TimeStart(BANK3[2]), 
  1693 ;;
  1694 ;; ParseTime@Day	PTR unsigned char  size(1) Largest target is 1
  1695 ;;		 -> TimeToInd@Day(BANK3[1]), 
  1696 ;;
  1697 ;; ParseTime@Time	PTR unsigned int  size(1) Largest target is 2
  1698 ;;		 -> TimeToInd@Time(BANK3[2]), 
  1699 ;;
  1700 ;; TimesToIndicator@Times	PTR unsigned int  size(1) Largest target is 4
  1701 ;;		 -> EditSchedule@Times(BANK1[4]), 
  1702 ;;
  1703 ;; SendArrayToLCD@Symb	PTR unsigned char  size(1) Largest target is 17
  1704 ;;		 -> TimeToInd@DataArray(BANK3[17]), TimeToInd@D(BANK3[4]), GetDayOfWeek@array(BANK3[3]), 
  1705 ;;
  1706 ;; TimeToInd@DataArray2	PTR unsigned char  size(1) Largest target is 3
  1707 ;;		 -> GetDayOfWeek@array(BANK3[3]), 
  1708 ;;
  1709 ;; sp__GetDayOfWeek	PTR unsigned char  size(1) Largest target is 3
  1710 ;;		 -> GetDayOfWeek@array(BANK3[3]), 
  1711 ;;
  1712 ;;
  1713 ;; Critical Paths under _main in COMMON
  1714 ;;
  1715 ;;   None.
  1716 ;;
  1717 ;; Critical Paths under _F in COMMON
  1718 ;;
  1719 ;;   _ReadTime->i1_WriteTime
  1720 ;;   _ReadTime->_BCD_to_DEC
  1721 ;;   _SignalsOnOff->i1_ReadFourBytesEE
  1722 ;;   _SignalsOnOff->i1___aldiv
  1723 ;;   i1_WriteTime->i1___lmul
  1724 ;;   i1_lcd_send_byte->i1_lcd_send_initial_half_byte
  1725 ;;   i1_ReadFourBytesEE->i1_EERD
  1726 ;;   _BCD_to_DEC->i1___lmul
  1727 ;;   _SendSymbolToLCD->_delay
  1728 ;;   i1___lmul->___bmul
  1729 ;;
  1730 ;; Critical Paths under _main in BANK0
  1731 ;;
  1732 ;;   None.
  1733 ;;
  1734 ;; Critical Paths under _F in BANK0
  1735 ;;
  1736 ;;   _F->_ReadTime
  1737 ;;   _ReadTime->i1_WriteTime
  1738 ;;   _SignalsOnOff->i1_ReadFourBytesEE
  1739 ;;   i1_WriteTime->i1___lmul
  1740 ;;   _BCD_to_DEC->i1___lmul
  1741 ;;
  1742 ;; Critical Paths under _main in BANK1
  1743 ;;
  1744 ;;   _Scheduler->_EditSchedule
  1745 ;;   _lcd_on->_lcd_init
  1746 ;;   _TimeToInd->_FindNextTimeStart
  1747 ;;   _EditSchedule->_ReadFourBytesEE
  1748 ;;   _RefreshSchedulerIndicator->_NumericToIndicator
  1749 ;;   _lcd_init->_lcd_send_byte
  1750 ;;   _TimeEdit->_ReIndTimeEdit
  1751 ;;   _FindNextTimeStart->_ReadFourBytesEE
  1752 ;;   _lcd_off->_lcd_send_byte
  1753 ;;   _getBorderUp->_getDigit
  1754 ;;   _ItemsToIndicator->_setDigit
  1755 ;;   _TimesToIndicator->_setDigit
  1756 ;;   _FindCell->_EERD
  1757 ;;   _lcd_send_byte->_lcd_send_initial_half_byte
  1758 ;;   _WriteFourBytesEE->_EEWR
  1759 ;;   _WriteTime->___lmul
  1760 ;;   _ReIndTimeEdit->_setDigit
  1761 ;;   _ParseTime->___aldiv
  1762 ;;   _ReadFourBytesEE->_ParseDataRecord
  1763 ;;   _SendArrayToLCD->_setDigit
  1764 ;;   _NumericToIndicator->_setDigit
  1765 ;;   ___wmul->_getDigit
  1766 ;;   _ParseDataRecord->_EERD
  1767 ;;   _setDigit->___aldiv
  1768 ;;
  1769 ;; Critical Paths under _F in BANK1
  1770 ;;
  1771 ;;   None.
  1772 ;;
  1773 ;; Critical Paths under _main in BANK3
  1774 ;;
  1775 ;;   _main2->_TimeToInd
  1776 ;;
  1777 ;; Critical Paths under _F in BANK3
  1778 ;;
  1779 ;;   None.
  1780 ;;
  1781 ;; Critical Paths under _main in BANK2
  1782 ;;
  1783 ;;   None.
  1784 ;;
  1785 ;; Critical Paths under _F in BANK2
  1786 ;;
  1787 ;;   None.
  1788 ;;
  1789 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1790 ;;
  1791 ;;
  1792 ;;Call Graph Tables:
  1793 ;;
  1794 ;; ---------------------------------------------------------------------------------
  1795 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1796 ;; ---------------------------------------------------------------------------------
  1797 ;; (0) _main                                                 1     1      0   33470
  1798 ;;                                             46 BANK3      1     1      0
  1799 ;;                             _clrInd
  1800 ;;                               _EERD
  1801 ;;                             _lcd_on
  1802 ;;                              _main2
  1803 ;; ---------------------------------------------------------------------------------
  1804 ;; (1) _main2                                                0     0      0   32416
  1805 ;;                  _FindNextTimeStart
  1806 ;;                            _lcd_off
  1807 ;;                             _lcd_on
  1808 ;;                          _TimeToInd
  1809 ;;                           _TimeEdit
  1810 ;;                          _Scheduler
  1811 ;;                               _EEWR
  1812 ;;                             _clrInd
  1813 ;;                        _FillMinutes
  1814 ;; ---------------------------------------------------------------------------------
  1815 ;; (2) _Scheduler                                            3     2      1   12955
  1816 ;;                                              0 BANK3      3     2      1
  1817 ;;                             _clrInd
  1818 ;;                   _WriteFourBytesEE
  1819 ;;                          _Scheduler
  1820 ;;                       _EditSchedule
  1821 ;;                           _FindCell
  1822 ;;          _RefreshSchedulerIndicator
  1823 ;;                              _main2
  1824 ;; ---------------------------------------------------------------------------------
  1825 ;; (2) _lcd_on                                               0     0      0     695
  1826 ;;                           _lcd_init
  1827 ;;                      _lcd_send_byte
  1828 ;; ---------------------------------------------------------------------------------
  1829 ;; (2) _TimeToInd                                           50    50      0   10462
  1830 ;;                                             64 BANK1      4     4      0
  1831 ;;                                              0 BANK3     46    46      0
  1832 ;;                            _lcd_off
  1833 ;;                  _FindNextTimeStart
  1834 ;;                             _clrInd
  1835 ;;                     _SendArrayToLCD
  1836 ;;                           _setDigit
  1837 ;;                            ___aldiv
  1838 ;;                            ___almod
  1839 ;;                       _GetDayOfWeek
  1840 ;;                    _ReadFourBytesEE
  1841 ;;                    _ParseDataRecord
  1842 ;;                          _ParseTime
  1843 ;;                            ___lwmod
  1844 ;;                            ___lwdiv
  1845 ;; ---------------------------------------------------------------------------------
  1846 ;; (3) _EditSchedule                                        43    42      1    7698
  1847 ;;                                             36 BANK1     43    42      1
  1848 ;;                    _ReadFourBytesEE
  1849 ;;                    _ParseDataRecord
  1850 ;;                             _clrInd
  1851 ;;                   _WriteFourBytesEE
  1852 ;;                   _TimesToIndicator
  1853 ;;                           _setBlink
  1854 ;;                           _getDigit
  1855 ;;                             ___wmul
  1856 ;;                            ___lbdiv
  1857 ;;                        _getBorderUp
  1858 ;;                           _setDigit
  1859 ;;                             _entNum
  1860 ;;                   _ItemsToIndicator
  1861 ;;                    _ConvertDayToBit
  1862 ;; ---------------------------------------------------------------------------------
  1863 ;; (3) _RefreshSchedulerIndicator                            6     4      2    3045
  1864 ;;                                             29 BANK1      6     4      2
  1865 ;;                               _EERD
  1866 ;;                 _NumericToIndicator
  1867 ;;                           _FindCell
  1868 ;;                           _setDigit
  1869 ;; ---------------------------------------------------------------------------------
  1870 ;; (3) _lcd_init                                             3     3      0     454
  1871 ;;                                              9 BANK1      3     3      0
  1872 ;;         _lcd_send_initial_half_byte
  1873 ;;                      _lcd_send_byte
  1874 ;; ---------------------------------------------------------------------------------
  1875 ;; (2) _TimeEdit                                            16    16      0    6043
  1876 ;;                                             32 BANK1     16    16      0
  1877 ;;                             _clrInd
  1878 ;;                            ___aldiv
  1879 ;;                           _setBlink
  1880 ;;                             _entNum
  1881 ;;                           _getDigit
  1882 ;;                             ___wmul
  1883 ;;                           _setDigit
  1884 ;;                              _main2
  1885 ;;                          _WriteTime
  1886 ;;                      _ReIndTimeEdit
  1887 ;; ---------------------------------------------------------------------------------
  1888 ;; (3) _FindNextTimeStart                                   28    28      0    1664
  1889 ;;                                             36 BANK1     28    28      0
  1890 ;;                    _ReadFourBytesEE
  1891 ;;                    _ParseDataRecord
  1892 ;;                             ___lmul
  1893 ;; ---------------------------------------------------------------------------------
  1894 ;; (3) _lcd_off                                              0     0      0     241
  1895 ;;                      _lcd_send_byte
  1896 ;; ---------------------------------------------------------------------------------
  1897 ;; (4) _getBorderUp                                          2     2      0     170
  1898 ;;                                              5 BANK1      2     2      0
  1899 ;;                           _getDigit
  1900 ;; ---------------------------------------------------------------------------------
  1901 ;; (4) _ItemsToIndicator                                     4     2      2     808
  1902 ;;                                             24 BANK1      4     2      2
  1903 ;;                           _setDigit
  1904 ;; ---------------------------------------------------------------------------------
  1905 ;; (4) _TimesToIndicator                                     6     6      0    1745
  1906 ;;                                             24 BANK1      6     6      0
  1907 ;;                            ___lbdiv
  1908 ;;                            ___lwmod
  1909 ;;                           _setDigit
  1910 ;;                            ___lwdiv
  1911 ;; ---------------------------------------------------------------------------------
  1912 ;; (4) _FindCell                                             8     6      2     566
  1913 ;;                                              3 BANK1      8     6      2
  1914 ;;                               _EERD
  1915 ;; ---------------------------------------------------------------------------------
  1916 ;; (4) _lcd_send_byte                                        2     2      0     241
  1917 ;;                                              7 BANK1      2     2      0
  1918 ;;         _lcd_send_initial_half_byte
  1919 ;; ---------------------------------------------------------------------------------
  1920 ;; (4) _WriteFourBytesEE                                     6     2      4     260
  1921 ;;                                              3 BANK1      6     2      4
  1922 ;;                               _EEWR
  1923 ;; ---------------------------------------------------------------------------------
  1924 ;; (3) _WriteTime                                           16    14      2     387
  1925 ;;                                             12 BANK1     16    14      2
  1926 ;;                            _I2CInit
  1927 ;;                           _I2CStart
  1928 ;;                            _I2CSend
  1929 ;;                            _I2CStop
  1930 ;;                             ___lmul
  1931 ;;                           _getDigit (ARG)
  1932 ;; ---------------------------------------------------------------------------------
  1933 ;; (3) _ReIndTimeEdit                                        8     4      4    1720
  1934 ;;                                             24 BANK1      8     4      4
  1935 ;;                            ___almod
  1936 ;;                           _setDigit
  1937 ;;                            ___aldiv
  1938 ;; ---------------------------------------------------------------------------------
  1939 ;; (3) _ParseTime                                           10     4      6    1076
  1940 ;;                                             14 BANK1     10     4      6
  1941 ;;                            ___aldiv
  1942 ;;                            ___lwmod
  1943 ;;                            ___lwdiv
  1944 ;; ---------------------------------------------------------------------------------
  1945 ;; (4) _ReadFourBytesEE                                     19    15      4     294
  1946 ;;                                             17 BANK1     19    15      4
  1947 ;;                               _EERD
  1948 ;;                    _ParseDataRecord (ARG)
  1949 ;; ---------------------------------------------------------------------------------
  1950 ;; (3) _SendArrayToLCD                                       6     4      2     777
  1951 ;;                                             24 BANK1      6     4      2
  1952 ;;                           _setDigit
  1953 ;;                       _GetDayOfWeek (ARG)
  1954 ;; ---------------------------------------------------------------------------------
  1955 ;; (4) _NumericToIndicator                                   5     0      5    1448
  1956 ;;                                             24 BANK1      5     0      5
  1957 ;;                             _clrInd
  1958 ;;                            ___llmod
  1959 ;;                           _setDigit
  1960 ;;                            ___lldiv
  1961 ;; ---------------------------------------------------------------------------------
  1962 ;; (4) ___aldiv                                             14     6      8     445
  1963 ;;                                              0 BANK1     14     6      8
  1964 ;; ---------------------------------------------------------------------------------
  1965 ;; (4) ___almod                                             10     2      8     433
  1966 ;;                                              0 BANK1     10     2      8
  1967 ;; ---------------------------------------------------------------------------------
  1968 ;; (5) ___lldiv                                             13     5      8     241
  1969 ;;                                              0 BANK1     13     5      8
  1970 ;; ---------------------------------------------------------------------------------
  1971 ;; (5) ___llmod                                              9     1      8     232
  1972 ;;                                              0 BANK1      9     1      8
  1973 ;; ---------------------------------------------------------------------------------
  1974 ;; (4) ___lmul                                              12     4      8     136
  1975 ;;                                              0 BANK1     12     4      8
  1976 ;; ---------------------------------------------------------------------------------
  1977 ;; (4) ___lbdiv                                              4     3      1     241
  1978 ;;                                              0 BANK1      4     3      1
  1979 ;; ---------------------------------------------------------------------------------
  1980 ;; (5) ___lwmod                                              5     1      4     232
  1981 ;;                                              0 BANK1      5     1      4
  1982 ;; ---------------------------------------------------------------------------------
  1983 ;; (5) ___lwdiv                                              7     3      4     241
  1984 ;;                                              0 BANK1      7     3      4
  1985 ;; ---------------------------------------------------------------------------------
  1986 ;; (4) ___wmul                                               6     2      4     136
  1987 ;;                                              5 BANK1      6     2      4
  1988 ;;                           _getDigit (ARG)
  1989 ;; ---------------------------------------------------------------------------------
  1990 ;; (4) _I2CStop                                              0     0      0       0
  1991 ;; ---------------------------------------------------------------------------------
  1992 ;; (4) _I2CSend                                              1     1      0      31
  1993 ;;                                              0 BANK1      1     1      0
  1994 ;; ---------------------------------------------------------------------------------
  1995 ;; (4) _I2CStart                                             0     0      0       0
  1996 ;; ---------------------------------------------------------------------------------
  1997 ;; (4) _I2CInit                                              0     0      0       0
  1998 ;; ---------------------------------------------------------------------------------
  1999 ;; (2) _FillMinutes                                          0     0      0       0
  2000 ;; ---------------------------------------------------------------------------------
  2001 ;; (4) _ConvertDayToBit                                      1     1      0      31
  2002 ;;                                              0 BANK1      1     1      0
  2003 ;; ---------------------------------------------------------------------------------
  2004 ;; (5) _lcd_send_initial_half_byte                           7     7      0     179
  2005 ;;                                              0 BANK1      7     7      0
  2006 ;; ---------------------------------------------------------------------------------
  2007 ;; (5) _EERD                                                 3     3      0      99
  2008 ;;                                              0 BANK1      3     3      0
  2009 ;; ---------------------------------------------------------------------------------
  2010 ;; (2) _EEWR                                                 3     2      1      96
  2011 ;;                                              0 BANK1      3     2      1
  2012 ;; ---------------------------------------------------------------------------------
  2013 ;; (4) _ParseDataRecord                                     14     2     12     319
  2014 ;;                                              3 BANK1     14     2     12
  2015 ;;                               _EERD (ARG)
  2016 ;; ---------------------------------------------------------------------------------
  2017 ;; (3) _GetDayOfWeek                                         1     1      0     217
  2018 ;;                                              0 BANK1      1     1      0
  2019 ;; ---------------------------------------------------------------------------------
  2020 ;; (4) _entNum                                               3     2      1     158
  2021 ;;                                              0 BANK1      3     2      1
  2022 ;; ---------------------------------------------------------------------------------
  2023 ;; (2) _clrInd                                               5     5      0     260
  2024 ;;                                              0 BANK1      5     5      0
  2025 ;; ---------------------------------------------------------------------------------
  2026 ;; (4) _setBlink                                             7     5      2     375
  2027 ;;                                              0 BANK1      7     5      2
  2028 ;; ---------------------------------------------------------------------------------
  2029 ;; (4) _setDigit                                            10     8      2     551
  2030 ;;                                             14 BANK1     10     8      2
  2031 ;;                            ___almod (ARG)
  2032 ;;                            ___aldiv (ARG)
  2033 ;;                           _getDigit (ARG)
  2034 ;;                            ___lwmod (ARG)
  2035 ;;                            ___lwdiv (ARG)
  2036 ;;                            ___llmod (ARG)
  2037 ;; ---------------------------------------------------------------------------------
  2038 ;; (5) _getDigit                                             5     4      1      62
  2039 ;;                                              0 BANK1      5     4      1
  2040 ;; ---------------------------------------------------------------------------------
  2041 ;; Estimated maximum stack depth 5
  2042 ;; ---------------------------------------------------------------------------------
  2043 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  2044 ;; ---------------------------------------------------------------------------------
  2045 ;; (6) _F                                                   14    14      0    6340
  2046 ;;                                             36 BANK0     14    14      0
  2047 ;;                       _SignalsOnOff
  2048 ;;                      i1_FillMinutes
  2049 ;;                    i1_lcd_send_byte
  2050 ;;                        _convDig_LCD
  2051 ;;                    _SendSymbolToLCD
  2052 ;;                           _ReadTime
  2053 ;;                         _ConvKeyNum
  2054 ;; ---------------------------------------------------------------------------------
  2055 ;; (7) _ReadTime                                            18    18      0    1710
  2056 ;;                                             18 BANK0     18    18      0
  2057 ;;                          i1_I2CInit
  2058 ;;                         i1_I2CStart
  2059 ;;                          i1_I2CSend
  2060 ;;                         _I2CRestart
  2061 ;;                            _I2CRead
  2062 ;;                             _I2CAck
  2063 ;;                             _I2CNak
  2064 ;;                          i1_I2CStop
  2065 ;;                             i1_EERD
  2066 ;;                        i1_WriteTime
  2067 ;;                         _BCD_to_DEC
  2068 ;;                           i1___lmul
  2069 ;; ---------------------------------------------------------------------------------
  2070 ;; (7) _SignalsOnOff                                        20    20      0    3467
  2071 ;;                                              8 BANK0     20    20      0
  2072 ;;                  i1_ReadFourBytesEE
  2073 ;;                          i1___aldiv
  2074 ;;                          i1___lwmod
  2075 ;;                          i1___lwdiv
  2076 ;;                  i1_ConvertDayToBit
  2077 ;;                             i1_EEWR
  2078 ;; ---------------------------------------------------------------------------------
  2079 ;; (8) i1_WriteTime                                         16    14      2     886
  2080 ;;                                             11 COMMON     2     0      2
  2081 ;;                                              4 BANK0     14    14      0
  2082 ;;                          i1_I2CInit
  2083 ;;                         i1_I2CStart
  2084 ;;                          i1_I2CSend
  2085 ;;                          i1_I2CStop
  2086 ;;                           i1___lmul
  2087 ;;                             i1_EERD (ARG)
  2088 ;; ---------------------------------------------------------------------------------
  2089 ;; (7) i1_lcd_send_byte                                      2     2      0     527
  2090 ;;                                              7 COMMON     2     2      0
  2091 ;;       i1_lcd_send_initial_half_byte
  2092 ;; ---------------------------------------------------------------------------------
  2093 ;; (8) i1_ReadFourBytesEE                                   19    15      4     667
  2094 ;;                                              3 COMMON    11     7      4
  2095 ;;                                              0 BANK0      8     8      0
  2096 ;;                             i1_EERD
  2097 ;; ---------------------------------------------------------------------------------
  2098 ;; (8) _BCD_to_DEC                                           2     2      0     136
  2099 ;;                                             11 COMMON     2     2      0
  2100 ;;                             ___bmul
  2101 ;;                           i1___lmul (ARG)
  2102 ;; ---------------------------------------------------------------------------------
  2103 ;; (7) _SendSymbolToLCD                                      9     9      0     209
  2104 ;;                                              3 COMMON     9     9      0
  2105 ;;                              _delay
  2106 ;; ---------------------------------------------------------------------------------
  2107 ;; (8) i1___aldiv                                           14     6      8     977
  2108 ;;                                              0 COMMON    14     6      8
  2109 ;; ---------------------------------------------------------------------------------
  2110 ;; (8) i1___lmul                                            12     4      8     300
  2111 ;;                                              3 COMMON     8     0      8
  2112 ;;                                              0 BANK0      4     4      0
  2113 ;;                             ___bmul (ARG)
  2114 ;; ---------------------------------------------------------------------------------
  2115 ;; (8) i1___lwmod                                            5     1      4     521
  2116 ;;                                              0 COMMON     5     1      4
  2117 ;; ---------------------------------------------------------------------------------
  2118 ;; (8) i1___lwdiv                                            7     3      4     527
  2119 ;;                                              0 COMMON     7     3      4
  2120 ;; ---------------------------------------------------------------------------------
  2121 ;; (9) i1_I2CSend                                            1     1      0      73
  2122 ;;                                              0 COMMON     1     1      0
  2123 ;; ---------------------------------------------------------------------------------
  2124 ;; (9) i1_I2CStop                                            0     0      0       0
  2125 ;; ---------------------------------------------------------------------------------
  2126 ;; (9) i1_I2CStart                                           0     0      0       0
  2127 ;; ---------------------------------------------------------------------------------
  2128 ;; (9) i1_I2CInit                                            0     0      0       0
  2129 ;; ---------------------------------------------------------------------------------
  2130 ;; (7) i1_FillMinutes                                        0     0      0       0
  2131 ;; ---------------------------------------------------------------------------------
  2132 ;; (8) i1_ConvertDayToBit                                    1     1      0      73
  2133 ;;                                              0 COMMON     1     1      0
  2134 ;; ---------------------------------------------------------------------------------
  2135 ;; (8) i1_lcd_send_initial_half_byte                         7     7      0     381
  2136 ;;                                              0 COMMON     7     7      0
  2137 ;; ---------------------------------------------------------------------------------
  2138 ;; (8) i1_EERD                                               3     3      0     223
  2139 ;;                                              0 COMMON     3     3      0
  2140 ;; ---------------------------------------------------------------------------------
  2141 ;; (8) i1_EEWR                                               3     2      1     221
  2142 ;;                                              0 COMMON     3     2      1
  2143 ;; ---------------------------------------------------------------------------------
  2144 ;; (9) ___bmul                                               3     2      1      92
  2145 ;;                                              0 COMMON     3     2      1
  2146 ;; ---------------------------------------------------------------------------------
  2147 ;; (8) _I2CNak                                               0     0      0       0
  2148 ;; ---------------------------------------------------------------------------------
  2149 ;; (8) _I2CAck                                               0     0      0       0
  2150 ;; ---------------------------------------------------------------------------------
  2151 ;; (8) _I2CRead                                              1     1      0      23
  2152 ;;                                              0 COMMON     1     1      0
  2153 ;; ---------------------------------------------------------------------------------
  2154 ;; (8) _I2CRestart                                           0     0      0       0
  2155 ;; ---------------------------------------------------------------------------------
  2156 ;; (7) _ConvKeyNum                                           1     1      0      22
  2157 ;;                                              0 COMMON     1     1      0
  2158 ;; ---------------------------------------------------------------------------------
  2159 ;; (8) _delay                                                3     1      2      45
  2160 ;;                                              0 COMMON     3     1      2
  2161 ;; ---------------------------------------------------------------------------------
  2162 ;; (7) _convDig_LCD                                          1     1      0      22
  2163 ;;                                              0 COMMON     1     1      0
  2164 ;; ---------------------------------------------------------------------------------
  2165 ;; Estimated maximum stack depth 9
  2166 ;; ---------------------------------------------------------------------------------
  2167 ;; Call Graph Graphs:
  2168 ;; _main (ROOT)
  2169 ;;   _clrInd
  2170 ;;   _EERD
  2171 ;;   _lcd_on
  2172 ;;     _lcd_init
  2173 ;;       _lcd_send_initial_half_byte
  2174 ;;       _lcd_send_byte
  2175 ;;         _lcd_send_initial_half_byte
  2176 ;;     _lcd_send_byte
  2177 ;;       _lcd_send_initial_half_byte
  2178 ;;   _main2
  2179 ;;     _FindNextTimeStart
  2180 ;;       _ReadFourBytesEE
  2181 ;;         _EERD
  2182 ;;         _ParseDataRecord (ARG)
  2183 ;;           _EERD (ARG)
  2184 ;;       _ParseDataRecord
  2185 ;;         _EERD (ARG)
  2186 ;;       ___lmul
  2187 ;;     _lcd_off
  2188 ;;       _lcd_send_byte
  2189 ;;         _lcd_send_initial_half_byte
  2190 ;;     _lcd_on
  2191 ;;       _lcd_init
  2192 ;;         _lcd_send_initial_half_byte
  2193 ;;         _lcd_send_byte
  2194 ;;           _lcd_send_initial_half_byte
  2195 ;;       _lcd_send_byte
  2196 ;;         _lcd_send_initial_half_byte
  2197 ;;     _TimeToInd
  2198 ;;       _lcd_off
  2199 ;;         _lcd_send_byte
  2200 ;;           _lcd_send_initial_half_byte
  2201 ;;       _FindNextTimeStart
  2202 ;;         _ReadFourBytesEE
  2203 ;;           _EERD
  2204 ;;           _ParseDataRecord (ARG)
  2205 ;;             _EERD (ARG)
  2206 ;;         _ParseDataRecord
  2207 ;;           _EERD (ARG)
  2208 ;;         ___lmul
  2209 ;;       _clrInd
  2210 ;;       _SendArrayToLCD
  2211 ;;         _setDigit
  2212 ;;           ___almod (ARG)
  2213 ;;           ___aldiv (ARG)
  2214 ;;           _getDigit (ARG)
  2215 ;;           ___lwmod (ARG)
  2216 ;;           ___lwdiv (ARG)
  2217 ;;           ___llmod (ARG)
  2218 ;;         _GetDayOfWeek (ARG)
  2219 ;;       _setDigit
  2220 ;;         ___almod (ARG)
  2221 ;;         ___aldiv (ARG)
  2222 ;;         _getDigit (ARG)
  2223 ;;         ___lwmod (ARG)
  2224 ;;         ___lwdiv (ARG)
  2225 ;;         ___llmod (ARG)
  2226 ;;       ___aldiv
  2227 ;;       ___almod
  2228 ;;       _GetDayOfWeek
  2229 ;;       _ReadFourBytesEE
  2230 ;;         _EERD
  2231 ;;         _ParseDataRecord (ARG)
  2232 ;;           _EERD (ARG)
  2233 ;;       _ParseDataRecord
  2234 ;;         _EERD (ARG)
  2235 ;;       _ParseTime
  2236 ;;         ___aldiv
  2237 ;;         ___lwmod
  2238 ;;         ___lwdiv
  2239 ;;       ___lwmod
  2240 ;;       ___lwdiv
  2241 ;;     _TimeEdit
  2242 ;;       _clrInd
  2243 ;;       ___aldiv
  2244 ;;       _setBlink
  2245 ;;       _entNum
  2246 ;;       _getDigit
  2247 ;;       ___wmul
  2248 ;;         _getDigit (ARG)
  2249 ;;       _setDigit
  2250 ;;         ___almod (ARG)
  2251 ;;         ___aldiv (ARG)
  2252 ;;         _getDigit (ARG)
  2253 ;;         ___lwmod (ARG)
  2254 ;;         ___lwdiv (ARG)
  2255 ;;         ___llmod (ARG)
  2256 ;;       _WriteTime
  2257 ;;         _I2CInit
  2258 ;;         _I2CStart
  2259 ;;         _I2CSend
  2260 ;;         _I2CStop
  2261 ;;         ___lmul
  2262 ;;         _getDigit (ARG)
  2263 ;;       _ReIndTimeEdit
  2264 ;;         ___almod
  2265 ;;         _setDigit
  2266 ;;           ___almod (ARG)
  2267 ;;           ___aldiv (ARG)
  2268 ;;           _getDigit (ARG)
  2269 ;;           ___lwmod (ARG)
  2270 ;;           ___lwdiv (ARG)
  2271 ;;           ___llmod (ARG)
  2272 ;;         ___aldiv
  2273 ;;     _Scheduler
  2274 ;;       _clrInd
  2275 ;;       _WriteFourBytesEE
  2276 ;;         _EEWR
  2277 ;;       _EditSchedule
  2278 ;;         _ReadFourBytesEE
  2279 ;;           _EERD
  2280 ;;           _ParseDataRecord (ARG)
  2281 ;;             _EERD (ARG)
  2282 ;;         _ParseDataRecord
  2283 ;;           _EERD (ARG)
  2284 ;;         _clrInd
  2285 ;;         _WriteFourBytesEE
  2286 ;;           _EEWR
  2287 ;;         _TimesToIndicator
  2288 ;;           ___lbdiv
  2289 ;;           ___lwmod
  2290 ;;           _setDigit
  2291 ;;             ___almod (ARG)
  2292 ;;             ___aldiv (ARG)
  2293 ;;             _getDigit (ARG)
  2294 ;;             ___lwmod (ARG)
  2295 ;;             ___lwdiv (ARG)
  2296 ;;             ___llmod (ARG)
  2297 ;;           ___lwdiv
  2298 ;;         _setBlink
  2299 ;;         _getDigit
  2300 ;;         ___wmul
  2301 ;;           _getDigit (ARG)
  2302 ;;         ___lbdiv
  2303 ;;         _getBorderUp
  2304 ;;           _getDigit
  2305 ;;         _setDigit
  2306 ;;           ___almod (ARG)
  2307 ;;           ___aldiv (ARG)
  2308 ;;           _getDigit (ARG)
  2309 ;;           ___lwmod (ARG)
  2310 ;;           ___lwdiv (ARG)
  2311 ;;           ___llmod (ARG)
  2312 ;;         _entNum
  2313 ;;         _ItemsToIndicator
  2314 ;;           _setDigit
  2315 ;;             ___almod (ARG)
  2316 ;;             ___aldiv (ARG)
  2317 ;;             _getDigit (ARG)
  2318 ;;             ___lwmod (ARG)
  2319 ;;             ___lwdiv (ARG)
  2320 ;;             ___llmod (ARG)
  2321 ;;         _ConvertDayToBit
  2322 ;;       _FindCell
  2323 ;;         _EERD
  2324 ;;       _RefreshSchedulerIndicator
  2325 ;;         _EERD
  2326 ;;         _NumericToIndicator
  2327 ;;           _clrInd
  2328 ;;           ___llmod
  2329 ;;           _setDigit
  2330 ;;             ___almod (ARG)
  2331 ;;             ___aldiv (ARG)
  2332 ;;             _getDigit (ARG)
  2333 ;;             ___lwmod (ARG)
  2334 ;;             ___lwdiv (ARG)
  2335 ;;             ___llmod (ARG)
  2336 ;;           ___lldiv
  2337 ;;         _FindCell
  2338 ;;           _EERD
  2339 ;;         _setDigit
  2340 ;;           ___almod (ARG)
  2341 ;;           ___aldiv (ARG)
  2342 ;;           _getDigit (ARG)
  2343 ;;           ___lwmod (ARG)
  2344 ;;           ___lwdiv (ARG)
  2345 ;;           ___llmod (ARG)
  2346 ;;     _EEWR
  2347 ;;     _clrInd
  2348 ;;     _FillMinutes
  2349 ;;
  2350 ;; _F (ROOT)
  2351 ;;   _SignalsOnOff
  2352 ;;     i1_ReadFourBytesEE
  2353 ;;       i1_EERD
  2354 ;;     i1___aldiv
  2355 ;;     i1___lwmod
  2356 ;;     i1___lwdiv
  2357 ;;     i1_ConvertDayToBit
  2358 ;;     i1_EEWR
  2359 ;;   i1_FillMinutes
  2360 ;;   i1_lcd_send_byte
  2361 ;;     i1_lcd_send_initial_half_byte
  2362 ;;   _convDig_LCD
  2363 ;;   _SendSymbolToLCD
  2364 ;;     _delay
  2365 ;;   _ReadTime
  2366 ;;     i1_I2CInit
  2367 ;;     i1_I2CStart
  2368 ;;     i1_I2CSend
  2369 ;;     _I2CRestart
  2370 ;;     _I2CRead
  2371 ;;     _I2CAck
  2372 ;;     _I2CNak
  2373 ;;     i1_I2CStop
  2374 ;;     i1_EERD
  2375 ;;     i1_WriteTime
  2376 ;;       i1_I2CInit
  2377 ;;       i1_I2CStart
  2378 ;;       i1_I2CSend
  2379 ;;       i1_I2CStop
  2380 ;;       i1___lmul
  2381 ;;         ___bmul (ARG)
  2382 ;;       i1_EERD (ARG)
  2383 ;;     _BCD_to_DEC
  2384 ;;       ___bmul
  2385 ;;       i1___lmul (ARG)
  2386 ;;         ___bmul (ARG)
  2387 ;;     i1___lmul
  2388 ;;       ___bmul (ARG)
  2389 ;;   _ConvKeyNum
  2390 ;;
  2391 ;; Address spaces:
  2392 ;;Name               Size   Autos  Total    Cost      Usage
  2393 ;;BANK3               60     2F      55       9       88.5%
  2394 ;;BITBANK3            60      0       0       8        0.0%
  2395 ;;SFR3                 0      0       0       4        0.0%
  2396 ;;BITSFR3              0      0       0       4        0.0%
  2397 ;;BANK2               60      0      40      11       66.7%
  2398 ;;BITBANK2            60      0       0      10        0.0%
  2399 ;;SFR2                 0      0       0       5        0.0%
  2400 ;;BITSFR2              0      0       0       5        0.0%
  2401 ;;SFR1                 0      0       0       2        0.0%
  2402 ;;BITSFR1              0      0       0       2        0.0%
  2403 ;;BANK1               50     4F      50       7      100.0%
  2404 ;;BITBANK1            50      0       0       6        0.0%
  2405 ;;CODE                 0      0       0       0        0.0%
  2406 ;;DATA                 0      0     146      12        0.0%
  2407 ;;ABS                  0      0     139       3        0.0%
  2408 ;;NULL                 0      0       0       0        0.0%
  2409 ;;STACK                0      0       D       2        0.0%
  2410 ;;BANK0               50     32      46       5       87.5%
  2411 ;;BITBANK0            50      0       2       4        2.5%
  2412 ;;SFR0                 0      0       0       1        0.0%
  2413 ;;BITSFR0              0      0       0       1        0.0%
  2414 ;;COMMON               E      E       E       1      100.0%
  2415 ;;BITCOMMON            E      0       0       0        0.0%
  2416 ;;EEDATA             100      0       0       0        0.0%
  2417                           
  2418                           
  2419 ;; *************** function _main *****************
  2420 ;; Defined at:
  2421 ;;		line 1266 in file "prog.c"
  2422 ;; Parameters:    Size  Location     Type
  2423 ;;		None
  2424 ;; Auto vars:     Size  Location     Type
  2425 ;;		None
  2426 ;; Return value:  Size  Location     Type
  2427 ;;		None               void
  2428 ;; Registers used:
  2429 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2430 ;; Tracked objects:
  2431 ;;		On entry : 17F/0
  2432 ;;		On exit  : 160/120
  2433 ;;		Unchanged: 0/0
  2434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2435 ;;      Params:         0       0       0       0       0
  2436 ;;      Locals:         0       0       0       0       0
  2437 ;;      Temps:          0       0       0       1       0
  2438 ;;      Totals:         0       0       0       1       0
  2439 ;;Total ram usage:        1 bytes
  2440 ;; Hardware stack levels required when called:    9
  2441 ;; This function calls:
  2442 ;;		_clrInd
  2443 ;;		_EERD
  2444 ;;		_lcd_on
  2445 ;;		_main2
  2446 ;; This function is called by:
  2447 ;;		Startup code after reset
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450  1920                     _main:	
  2451                           
  2452                           ;prog.c: 1267: TimeIsRead = 0;
  2453                           
  2454 ;; hardware stack exceeded
  2455                           ; Regs used in _main: [allreg]
  2456  1920  13DD               	bcf	_TimeIsRead/(0+8),_TimeIsRead& (0+7)
  2457                           
  2458                           ;prog.c: 1268: INTCON = 0;
  2459  1921  018B               	clrf	11	;volatile
  2460                           
  2461                           ;prog.c: 1269: clrInd();
  2462  1922  120A  118A  2690   	fcall	_clrInd
      +       160A  158A         
  2463                           
  2464                           ;prog.c: 1270: OPTION_REG = 0b00001011;
  2465  1927  300B               	movlw	11
  2466  1928  1683               	bsf	3,5	;RP0=1, select bank1
  2467  1929  0081               	movwf	1	;volatile
  2468                           
  2469                           ;prog.c: 1271: ADCON1 = 0b00000111;
  2470  192A  3007               	movlw	7
  2471  192B  009F               	movwf	31	;volatile
  2472                           
  2473                           ;prog.c: 1272: TRISA = 0b00000000;
  2474  192C  0185               	clrf	5	;volatile
  2475                           
  2476                           ;prog.c: 1273: TRISB = 0b00000001;
  2477  192D  3001               	movlw	1
  2478  192E  0086               	movwf	6	;volatile
  2479                           
  2480                           ;prog.c: 1274: TRISC = 0b00000000;
  2481  192F  0187               	clrf	7	;volatile
  2482                           
  2483                           ;prog.c: 1276: Clock = 0;
  2484  1930  1703               	bsf	3,6	;RP1=1, select bank3
  2485  1931  30FB               	movlw	251
  2486  1932  01DA               	clrf	_Clock^(0+384)
  2487  1933  01DB               	clrf	(_Clock+1)^(0+384)
  2488  1934  01DC               	clrf	(_Clock+2)^(0+384)
  2489  1935  01DD               	clrf	(_Clock+3)^(0+384)
  2490                           
  2491                           ;prog.c: 1277: LockSignals = EERD(251);
  2492  1936  120A  118A  27E5   	fcall	_EERD
      +       160A  158A         
  2493  193B  1703               	bsf	3,6	;RP1=1, select bank3
  2494  193C  00BE               	movwf	??_main^(0+384)
  2495  193D  1283               	bcf	3,5	;RP0=0, select bank0
  2496  193E  1303               	bcf	3,6	;RP1=0, select bank0
  2497  193F  125D               	bcf	_LockSignals/(0+8),_LockSignals& (0+7)
  2498  1940  1683               	bsf	3,5	;RP0=1, select bank3
  2499  1941  1703               	bsf	3,6	;RP1=1, select bank3
  2500  1942  1C3E               	btfss	??_main^(0+384),0
  2501  1943  2947               	goto	l11317
  2502  1944  1283               	bcf	3,5	;RP0=0, select bank0
  2503  1945  1303               	bcf	3,6	;RP1=0, select bank0
  2504  1946  165D               	bsf	_LockSignals/(0+8),_LockSignals& (0+7)
  2505  1947                     l11317:	
  2506                           
  2507                           ;prog.c: 1278: TMR1 = 51200;
  2508  1947  1283               	bcf	3,5	;RP0=0, select bank0
  2509  1948  1303               	bcf	3,6	;RP1=0, select bank0
  2510  1949  018E               	clrf	14	;volatile
  2511  194A  30C8               	movlw	200
  2512  194B  008F               	movwf	15	;volatile
  2513                           
  2514                           ;prog.c: 1279: TMR1ON = 1;
  2515  194C  1410               	bsf	16,0
  2516                           
  2517                           ;prog.c: 1280: TMR1IE = 1;
  2518  194D  1683               	bsf	3,5	;RP0=1, select bank1
  2519  194E  30C0               	movlw	192
  2520  194F  140C               	bsf	12,0
  2521                           
  2522                           ;prog.c: 1281: INTCON = 0b11000000;
  2523  1950  008B               	movwf	11	;volatile
  2524                           
  2525                           ;prog.c: 1282: PORTA = 0b00000000;
  2526  1951  1283               	bcf	3,5	;RP0=0, select bank0
  2527  1952  0185               	clrf	5	;volatile
  2528                           
  2529                           ;prog.c: 1283: PORTB = 0b00000000;
  2530  1953  0186               	clrf	6	;volatile
  2531                           
  2532                           ;prog.c: 1284: PORTC = 0b00000000;
  2533  1954  0187               	clrf	7	;volatile
  2534                           
  2535                           ;prog.c: 1285: T2CON = 0b00100100;
  2536  1955  3024               	movlw	36
  2537  1956  0092               	movwf	18	;volatile
  2538                           
  2539                           ;prog.c: 1286: lcd_on();
  2540  1957  160A  158A  26DF   	fcall	_lcd_on
      +       160A  158A         
  2541                           
  2542                           ;prog.c: 1287: main2();
  2543  195C  160A  158A  2490   	fcall	_main2
  2544  195F  120A  118A  2812   	ljmp	start
  2545  1962                     __end_of_main:	
  2546                           
  2547                           	psect	text2250
  2548  0015                     __ptext2250:	
  2549 ;; =============== function _TimeToInd ends ============
  2550                           
  2551                           
  2552 ;; *************** function _EditSchedule *****************
  2553 ;; Defined at:
  2554 ;;		line 870 in file "prog.c"
  2555 ;; Parameters:    Size  Location     Type
  2556 ;;  adress          1    wreg     unsigned char 
  2557 ;;  SourceOfReco    1   36[BANK1 ] unsigned char 
  2558 ;; Auto vars:     Size  Location     Type
  2559 ;;  adress          1   55[BANK1 ] unsigned char 
  2560 ;;  j               1   76[BANK1 ] unsigned char 
  2561 ;;  T               4   61[BANK1 ] unsigned int [2]
  2562 ;;  n               1   78[BANK1 ] unsigned char 
  2563 ;;  BorderUp        1   56[BANK1 ] unsigned char 
  2564 ;;  Times           4   66[BANK1 ] unsigned int [2]
  2565 ;;  Data            4   70[BANK1 ] unsigned long 
  2566 ;;  TimeStop        2   59[BANK1 ] unsigned int 
  2567 ;;  TimeStart       2   57[BANK1 ] unsigned int 
  2568 ;;  key             1   77[BANK1 ] unsigned char 
  2569 ;;  Signals         1   75[BANK1 ] unsigned char 
  2570 ;;  Days            1   74[BANK1 ] unsigned char 
  2571 ;;  mode            1   65[BANK1 ] unsigned char 
  2572 ;;  BeginEditTim    1   54[BANK1 ] unsigned char 
  2573 ;;  TargetAdress    1   53[BANK1 ] unsigned char 
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  1    wreg      unsigned char 
  2576 ;; Registers used:
  2577 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2578 ;; Tracked objects:
  2579 ;;		On entry : 60/160
  2580 ;;		On exit  : 160/100
  2581 ;;		Unchanged: FFE00/0
  2582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2583 ;;      Params:         0       0       1       0       0
  2584 ;;      Locals:         0       0      26       0       0
  2585 ;;      Temps:          0       0      16       0       0
  2586 ;;      Totals:         0       0      43       0       0
  2587 ;;Total ram usage:       43 bytes
  2588 ;; Hardware stack levels used:    1
  2589 ;; Hardware stack levels required when called:    6
  2590 ;; This function calls:
  2591 ;;		_ReadFourBytesEE
  2592 ;;		_ParseDataRecord
  2593 ;;		_clrInd
  2594 ;;		_WriteFourBytesEE
  2595 ;;		_TimesToIndicator
  2596 ;;		_setBlink
  2597 ;;		_getDigit
  2598 ;;		___wmul
  2599 ;;		___lbdiv
  2600 ;;		_getBorderUp
  2601 ;;		_setDigit
  2602 ;;		_entNum
  2603 ;;		_ItemsToIndicator
  2604 ;;		_ConvertDayToBit
  2605 ;; This function is called by:
  2606 ;;		_Scheduler
  2607 ;; This function uses a non-reentrant model
  2608 ;;
  2609  0015                     _EditSchedule:	
  2610                           
  2611 ;; hardware stack exceeded
  2612                           ; Regs used in _EditSchedule: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2613                           ;EditSchedule@adress stored from wreg
  2614  0015  1303               	bcf	3,6	;RP1=0, select bank1
  2615  0016  00D7               	movwf	EditSchedule@adress^(0+128)
  2616                           
  2617                           ;prog.c: 871: unsigned char TargetAdress;
  2618                           ;prog.c: 872: if(SourceOfRecord==240){
  2619  0017  0844               	movf	EditSchedule@SourceOfRecord^(0+128),w
  2620  0018  3AF0               	xorlw	240
  2621  0019  1D03               	skipz
  2622  001A  281D               	goto	l10709
  2623                           
  2624                           ;prog.c: 873: TargetAdress = adress;
  2625  001B  0857               	movf	EditSchedule@adress^(0+128),w
  2626  001C  281E               	goto	L6
  2627  001D                     l10709:	
  2628                           ;prog.c: 874: }else{
  2629                           
  2630                           
  2631                           ;prog.c: 875: TargetAdress = SourceOfRecord;
  2632  001D  0844               	movf	EditSchedule@SourceOfRecord^(0+128),w
  2633  001E                     L6:	
  2634  001E  00D5               	movwf	EditSchedule@TargetAdress^(0+128)
  2635                           
  2636                           ;prog.c: 876: }
  2637                           ;prog.c: 877: unsigned long int Data = ReadFourBytesEE(TargetAdress);
  2638  001F  27A3  120A  118A   	fcall	_ReadFourBytesEE
  2639  0022  0834               	movf	(?_ReadFourBytesEE+3)^(0+128),w
  2640  0023  00E9               	movwf	(EditSchedule@Data+3)^(0+128)
  2641  0024  0833               	movf	(?_ReadFourBytesEE+2)^(0+128),w
  2642  0025  00E8               	movwf	(EditSchedule@Data+2)^(0+128)
  2643  0026  0832               	movf	(?_ReadFourBytesEE+1)^(0+128),w
  2644  0027  00E7               	movwf	(EditSchedule@Data+1)^(0+128)
  2645  0028  0831               	movf	?_ReadFourBytesEE^(0+128),w
  2646  0029  00E6               	movwf	EditSchedule@Data^(0+128)
  2647                           
  2648                           ;prog.c: 879: char BeginEditTimes = 0;
  2649  002A  01D6               	clrf	EditSchedule@BeginEditTimes^(0+128)
  2650                           
  2651                           ;prog.c: 880: if(Data == 0xFFFFFFFF){
  2652  002B  0A66               	incf	EditSchedule@Data^(0+128),w
  2653  002C  1903               	skipnz
  2654  002D  0A67               	incf	(EditSchedule@Data+1)^(0+128),w
  2655  002E  1903               	skipnz
  2656  002F  0A68               	incf	(EditSchedule@Data+2)^(0+128),w
  2657  0030  1903               	skipnz
  2658  0031  0A69               	incf	(EditSchedule@Data+3)^(0+128),w
  2659  0032  1D03               	skipz
  2660  0033  283A               	goto	l10719
  2661                           
  2662                           ;prog.c: 881: Data = 0;
  2663  0034  01E6               	clrf	EditSchedule@Data^(0+128)
  2664  0035  01E7               	clrf	(EditSchedule@Data+1)^(0+128)
  2665  0036  01E8               	clrf	(EditSchedule@Data+2)^(0+128)
  2666  0037  01E9               	clrf	(EditSchedule@Data+3)^(0+128)
  2667                           
  2668                           ;prog.c: 882: BeginEditTimes = 1;
  2669  0038  01D6               	clrf	EditSchedule@BeginEditTimes^(0+128)
  2670  0039  0AD6               	incf	EditSchedule@BeginEditTimes^(0+128),f
  2671  003A                     l10719:	
  2672                           
  2673                           ;prog.c: 883: }
  2674                           ;prog.c: 885: unsigned int TimeStart;
  2675                           ;prog.c: 886: unsigned int TimeStop;
  2676                           ;prog.c: 887: unsigned char Days;
  2677                           ;prog.c: 888: unsigned char Signals;
  2678                           ;prog.c: 889: ParseDataRecord(Data, &TimeStart, &TimeStop, &Days, &Signals);
  2679  003A  0869               	movf	(EditSchedule@Data+3)^(0+128),w
  2680  003B  00A6               	movwf	(?_ParseDataRecord+3)^(0+128)
  2681  003C  0868               	movf	(EditSchedule@Data+2)^(0+128),w
  2682  003D  00A5               	movwf	(?_ParseDataRecord+2)^(0+128)
  2683  003E  0867               	movf	(EditSchedule@Data+1)^(0+128),w
  2684  003F  00A4               	movwf	(?_ParseDataRecord+1)^(0+128)
  2685  0040  0866               	movf	EditSchedule@Data^(0+128),w
  2686  0041  00A3               	movwf	?_ParseDataRecord^(0+128)
  2687  0042  30D9               	movlw	EditSchedule@TimeStart& (0+255)
  2688  0043  00A7               	movwf	(?_ParseDataRecord+4)^(0+128)
  2689  0044  30DB               	movlw	EditSchedule@TimeStop& (0+255)
  2690  0045  01A8               	clrf	(?_ParseDataRecord+5)^(0+128)
  2691  0046  00A9               	movwf	(?_ParseDataRecord+6)^(0+128)
  2692  0047  30EA               	movlw	EditSchedule@Days& (0+255)
  2693  0048  01AA               	clrf	(?_ParseDataRecord+7)^(0+128)
  2694  0049  00AB               	movwf	(?_ParseDataRecord+8)^(0+128)
  2695  004A  30EB               	movlw	EditSchedule@Signals& (0+255)
  2696  004B  01AC               	clrf	(?_ParseDataRecord+9)^(0+128)
  2697  004C  00AD               	movwf	(?_ParseDataRecord+10)^(0+128)
  2698  004D  01AE               	clrf	(?_ParseDataRecord+11)^(0+128)
  2699  004E  272F  120A  118A   	fcall	_ParseDataRecord
  2700                           
  2701                           ;prog.c: 891: unsigned int Times[2];
  2702                           ;prog.c: 892: Times[1] = TimeStart;
  2703  0051  085A               	movf	(EditSchedule@TimeStart+1)^(0+128),w
  2704  0052  00E5               	movwf	((EditSchedule@Times+1)^(0+128)+2)
  2705  0053  0859               	movf	EditSchedule@TimeStart^(0+128),w
  2706  0054  00E4               	movwf	(EditSchedule@Times^(0+128)+2)
  2707                           
  2708                           ;prog.c: 893: Times[0] = TimeStop;
  2709  0055  085C               	movf	(EditSchedule@TimeStop+1)^(0+128),w
  2710  0056  00E3               	movwf	(EditSchedule@Times+1)^(0+128)
  2711  0057  085B               	movf	EditSchedule@TimeStop^(0+128),w
  2712  0058  00E2               	movwf	EditSchedule@Times^(0+128)
  2713  0059                     L9:	
  2714                           
  2715                           ;prog.c: 895: clrInd();
  2716  0059  2690  120A  118A   	fcall	_clrInd
  2717                           
  2718                           ;prog.c: 896: char mode = 1;
  2719  005C  1683               	bsf	3,5	;RP0=1, select bank1
  2720  005D  01E1               	clrf	EditSchedule@mode^(0+128)
  2721  005E  0AE1               	incf	EditSchedule@mode^(0+128),f
  2722  005F                     l10727:	
  2723                           
  2724                           ;prog.c: 899: if(KeyCode==43){
  2725  005F  1683               	bsf	3,5	;RP0=1, select bank1
  2726  0060  086F               	movf	_KeyCode^(0+128),w	;volatile
  2727  0061  3A2B               	xorlw	43
  2728  0062  1D03               	skipz
  2729  0063  2866               	goto	l10737
  2730                           
  2731                           ;prog.c: 900: KeyCode = 0;
  2732  0064  01EF               	clrf	_KeyCode^(0+128)	;volatile
  2733  0065                     l10731:	
  2734                           
  2735                           ;prog.c: 901: clrInd();
  2736  0065  2E90               	ljmp	l9655
  2737  0066                     l10737:	
  2738  0066  086F               	movf	_KeyCode^(0+128),w	;volatile
  2739  0067  3A2A               	xorlw	42
  2740  0068  1D03               	skipz
  2741  0069  2ACF               	goto	l10959
  2742                           
  2743                           ;prog.c: 904: KeyCode = 0;
  2744  006A  01EF               	clrf	_KeyCode^(0+128)	;volatile
  2745                           
  2746                           ;prog.c: 905: Data = (unsigned long int)Signals*0x20000000+(unsigned long int)Days*0x400
      +                          000+(unsigned long int)Times[0]*0x800+(unsigned long int)Times[1];
  2747  006B  0864               	movf	(EditSchedule@Times^(0+128)+2),w
  2748  006C  00C5               	movwf	??_EditSchedule^(0+128)
  2749  006D  0865               	movf	((EditSchedule@Times+1)^(0+128)+2),w
  2750  006E  00C6               	movwf	(??_EditSchedule^(0+128)+1)
  2751  006F  01C7               	clrf	(??_EditSchedule^(0+128)+2)
  2752  0070  01C8               	clrf	(??_EditSchedule^(0+128)+3)
  2753  0071  0862               	movf	EditSchedule@Times^(0+128),w
  2754  0072  00C9               	movwf	(??_EditSchedule+4)^(0+128)
  2755  0073  0863               	movf	(EditSchedule@Times+1)^(0+128),w
  2756  0074  00CA               	movwf	((??_EditSchedule+4)^(0+128)+1)
  2757  0075  300B               	movlw	11
  2758  0076  01CB               	clrf	((??_EditSchedule+4)^(0+128)+2)
  2759  0077  01CC               	clrf	((??_EditSchedule+4)^(0+128)+3)
  2760  0078                     u8425:	
  2761  0078  1003               	clrc
  2762  0079  0DC9               	rlf	(??_EditSchedule+4)^(0+128),f
  2763  007A  0DCA               	rlf	((??_EditSchedule+4)^(0+128)+1),f
  2764  007B  0DCB               	rlf	((??_EditSchedule+4)^(0+128)+2),f
  2765  007C  0DCC               	rlf	((??_EditSchedule+4)^(0+128)+3),f
  2766  007D  3EFF               	addlw	-1
  2767  007E  1D03               	skipz
  2768  007F  2878               	goto	u8425
  2769  0080  086A               	movf	EditSchedule@Days^(0+128),w
  2770  0081  00CD               	movwf	(??_EditSchedule+8)^(0+128)
  2771  0082  3016               	movlw	22
  2772  0083  01CE               	clrf	((??_EditSchedule+8)^(0+128)+1)
  2773  0084  01CF               	clrf	((??_EditSchedule+8)^(0+128)+2)
  2774  0085  01D0               	clrf	((??_EditSchedule+8)^(0+128)+3)
  2775  0086                     u8435:	
  2776  0086  1003               	clrc
  2777  0087  0DCD               	rlf	(??_EditSchedule+8)^(0+128),f
  2778  0088  0DCE               	rlf	((??_EditSchedule+8)^(0+128)+1),f
  2779  0089  0DCF               	rlf	((??_EditSchedule+8)^(0+128)+2),f
  2780  008A  0DD0               	rlf	((??_EditSchedule+8)^(0+128)+3),f
  2781  008B  3EFF               	addlw	-1
  2782  008C  1D03               	skipz
  2783  008D  2886               	goto	u8435
  2784  008E  086B               	movf	EditSchedule@Signals^(0+128),w
  2785  008F  00D1               	movwf	(??_EditSchedule+12)^(0+128)
  2786  0090  301D               	movlw	29
  2787  0091  01D2               	clrf	((??_EditSchedule+12)^(0+128)+1)
  2788  0092  01D3               	clrf	((??_EditSchedule+12)^(0+128)+2)
  2789  0093  01D4               	clrf	((??_EditSchedule+12)^(0+128)+3)
  2790  0094                     u8445:	
  2791  0094  1003               	clrc
  2792  0095  0DD1               	rlf	(??_EditSchedule+12)^(0+128),f
  2793  0096  0DD2               	rlf	((??_EditSchedule+12)^(0+128)+1),f
  2794  0097  0DD3               	rlf	((??_EditSchedule+12)^(0+128)+2),f
  2795  0098  0DD4               	rlf	((??_EditSchedule+12)^(0+128)+3),f
  2796  0099  3EFF               	addlw	-1
  2797  009A  1D03               	skipz
  2798  009B  2894               	goto	u8445
  2799  009C  0851               	movf	(??_EditSchedule+12)^(0+128),w
  2800  009D  07CD               	addwf	(??_EditSchedule+8)^(0+128),f
  2801  009E  0852               	movf	(??_EditSchedule+13)^(0+128),w
  2802  009F  1803               	skipnc
  2803  00A0  0F52               	incfsz	(??_EditSchedule+13)^(0+128),w
  2804  00A1  07CE               	addwf	((??_EditSchedule+8)^(0+128)+1),f
  2805  00A2  0853               	movf	(??_EditSchedule+14)^(0+128),w
  2806  00A3  1803               	skipnc
  2807  00A4  0F53               	incfsz	(??_EditSchedule+14)^(0+128),w
  2808  00A5  07CF               	addwf	((??_EditSchedule+8)^(0+128)+2),f
  2809  00A6  0854               	movf	(??_EditSchedule+15)^(0+128),w
  2810  00A7  1803               	skipnc
  2811  00A8  0A54               	incf	(??_EditSchedule+15)^(0+128),w
  2812  00A9  07D0               	addwf	((??_EditSchedule+8)^(0+128)+3),f
  2813  00AA  084D               	movf	(??_EditSchedule+8)^(0+128),w
  2814  00AB  07C9               	addwf	(??_EditSchedule+4)^(0+128),f
  2815  00AC  084E               	movf	(??_EditSchedule+9)^(0+128),w
  2816  00AD  1803               	skipnc
  2817  00AE  0F4E               	incfsz	(??_EditSchedule+9)^(0+128),w
  2818  00AF  07CA               	addwf	((??_EditSchedule+4)^(0+128)+1),f
  2819  00B0  084F               	movf	(??_EditSchedule+10)^(0+128),w
  2820  00B1  1803               	skipnc
  2821  00B2  0F4F               	incfsz	(??_EditSchedule+10)^(0+128),w
  2822  00B3  07CB               	addwf	((??_EditSchedule+4)^(0+128)+2),f
  2823  00B4  0850               	movf	(??_EditSchedule+11)^(0+128),w
  2824  00B5  1803               	skipnc
  2825  00B6  0A50               	incf	(??_EditSchedule+11)^(0+128),w
  2826  00B7  07CC               	addwf	((??_EditSchedule+4)^(0+128)+3),f
  2827  00B8  0849               	movf	(??_EditSchedule+4)^(0+128),w
  2828  00B9  07C5               	addwf	??_EditSchedule^(0+128),f
  2829  00BA  084A               	movf	(??_EditSchedule+5)^(0+128),w
  2830  00BB  1803               	skipnc
  2831  00BC  0F4A               	incfsz	(??_EditSchedule+5)^(0+128),w
  2832  00BD  07C6               	addwf	(??_EditSchedule^(0+128)+1),f
  2833  00BE  084B               	movf	(??_EditSchedule+6)^(0+128),w
  2834  00BF  1803               	skipnc
  2835  00C0  0F4B               	incfsz	(??_EditSchedule+6)^(0+128),w
  2836  00C1  07C7               	addwf	(??_EditSchedule^(0+128)+2),f
  2837  00C2  084C               	movf	(??_EditSchedule+7)^(0+128),w
  2838  00C3  1803               	skipnc
  2839  00C4  0A4C               	incf	(??_EditSchedule+7)^(0+128),w
  2840  00C5  07C8               	addwf	(??_EditSchedule^(0+128)+3),f
  2841  00C6  0848               	movf	(??_EditSchedule+3)^(0+128),w
  2842  00C7  00E9               	movwf	(EditSchedule@Data+3)^(0+128)
  2843  00C8  0847               	movf	(??_EditSchedule+2)^(0+128),w
  2844  00C9  00E8               	movwf	(EditSchedule@Data+2)^(0+128)
  2845  00CA  0846               	movf	(??_EditSchedule+1)^(0+128),w
  2846  00CB  00E7               	movwf	(EditSchedule@Data+1)^(0+128)
  2847  00CC  0845               	movf	??_EditSchedule^(0+128),w
  2848  00CD  00E6               	movwf	EditSchedule@Data^(0+128)
  2849                           
  2850                           ;prog.c: 906: WriteFourBytesEE(adress, Data);
  2851  00CE  0869               	movf	(EditSchedule@Data+3)^(0+128),w
  2852  00CF  00A6               	movwf	(?_WriteFourBytesEE+3)^(0+128)
  2853  00D0  0868               	movf	(EditSchedule@Data+2)^(0+128),w
  2854  00D1  00A5               	movwf	(?_WriteFourBytesEE+2)^(0+128)
  2855  00D2  0867               	movf	(EditSchedule@Data+1)^(0+128),w
  2856  00D3  00A4               	movwf	(?_WriteFourBytesEE+1)^(0+128)
  2857  00D4  0866               	movf	EditSchedule@Data^(0+128),w
  2858  00D5  00A3               	movwf	?_WriteFourBytesEE^(0+128)
  2859  00D6  0857               	movf	EditSchedule@adress^(0+128),w
  2860  00D7  160A  158A  27E9   	fcall	_WriteFourBytesEE
      +       120A  118A         
  2861  00DC  2865               	goto	l10731
  2862  00DD                     l10749:	
  2863                           
  2864                           ;prog.c: 912: TimesToIndicator(Times);
  2865  00DD  30E2               	movlw	EditSchedule@Times& (0+255)
  2866  00DE  160A  118A  2019   	fcall	_TimesToIndicator
      +       120A  118A         
  2867                           
  2868                           ;prog.c: 913: if(KeyCode==45 || BeginEditTimes==1){
  2869  00E3  086F               	movf	_KeyCode^(0+128),w	;volatile
  2870  00E4  3A2D               	xorlw	45
  2871  00E5  1903               	skipnz
  2872  00E6  28E9               	goto	l10755
  2873  00E7  0B56               	decfsz	EditSchedule@BeginEditTimes^(0+128),w
  2874  00E8  2A58               	goto	l10875
  2875  00E9                     l10755:	
  2876                           
  2877                           ;prog.c: 914: KeyCode = 0;
  2878  00E9  01EF               	clrf	_KeyCode^(0+128)	;volatile
  2879  00EA  300B               	movlw	11
  2880                           
  2881                           ;prog.c: 915: BeginEditTimes = 0;
  2882  00EB  01D6               	clrf	EditSchedule@BeginEditTimes^(0+128)
  2883                           
  2884                           ;prog.c: 916: setBlink(0,11,1);
  2885  00EC  00A0               	movwf	?_setBlink^(0+128)
  2886  00ED  3000               	movlw	0
  2887  00EE  01A1               	clrf	(?_setBlink^(0+128)+1)
  2888  00EF  0AA1               	incf	(?_setBlink^(0+128)+1),f
  2889  00F0  262E  120A  118A   	fcall	_setBlink
  2890                           
  2891                           ;prog.c: 917: char n=11;
  2892  00F3  300B               	movlw	11
  2893  00F4  1683               	bsf	3,5	;RP0=1, select bank1
  2894  00F5  00EE               	movwf	EditSchedule@n^(0+128)
  2895                           
  2896                           ;prog.c: 918: unsigned char BorderUp = 2;
  2897  00F6  3002               	movlw	2
  2898  00F7  00D8               	movwf	EditSchedule@BorderUp^(0+128)
  2899  00F8                     l10763:	
  2900                           
  2901                           ;prog.c: 920: if(KeyCode==43){
  2902  00F8  086F               	movf	_KeyCode^(0+128),w	;volatile
  2903  00F9  3A2B               	xorlw	43
  2904  00FA  1D03               	skipz
  2905  00FB  2901               	goto	l10771
  2906                           
  2907                           ;prog.c: 921: KeyCode = 0;
  2908  00FC  01EF               	clrf	_KeyCode^(0+128)	;volatile
  2909  00FD                     l10767:	
  2910                           
  2911                           ;prog.c: 922: clrInd();
  2912  00FD  2690  120A  118A   	fcall	_clrInd
  2913                           
  2914                           ;prog.c: 923: break;
  2915  0100  285F               	goto	l10727
  2916  0101                     l10771:	
  2917  0101  086F               	movf	_KeyCode^(0+128),w	;volatile
  2918  0102  3A2A               	xorlw	42
  2919  0103  1D03               	skipz
  2920  0104  29CB               	goto	l10809
  2921                           
  2922                           ;prog.c: 925: KeyCode = 0;
  2923  0105  01EF               	clrf	_KeyCode^(0+128)	;volatile
  2924                           
  2925                           ;prog.c: 926: unsigned int T[2];
  2926                           ;prog.c: 927: for(char j=0;j<7;j+=6){
  2927  0106  01EC               	clrf	EditSchedule@j^(0+128)
  2928  0107                     l10779:	
  2929                           
  2930                           ;prog.c: 928: T[j/6] = ((unsigned int)getDigit(0,j+5))*600+getDigit(0,j+4)*60+getDigit(0
      +                          ,j+2)*10+getDigit(0,j+1);
  2931  0107  0A6C               	incf	EditSchedule@j^(0+128),w
  2932  0108  00A0               	movwf	?_getDigit^(0+128)
  2933  0109  3000               	movlw	0
  2934  010A  261F  120A  118A   	fcall	_getDigit
  2935  010D  00C5               	movwf	??_EditSchedule^(0+128)
  2936  010E  086C               	movf	EditSchedule@j^(0+128),w
  2937  010F  3E05               	addlw	5
  2938  0110  00A0               	movwf	?_getDigit^(0+128)
  2939  0111  3000               	movlw	0
  2940  0112  261F  120A  118A   	fcall	_getDigit
  2941  0115  00A5               	movwf	?___wmul^(0+128)
  2942  0116  3058               	movlw	88
  2943  0117  01A6               	clrf	(?___wmul+1)^(0+128)
  2944  0118  00A7               	movwf	(?___wmul^(0+128)+2)
  2945  0119  3002               	movlw	2
  2946  011A  00A8               	movwf	(?___wmul^(0+128)+3)
  2947  011B  2677  120A  118A   	fcall	___wmul
  2948  011E  0825               	movf	?___wmul^(0+128),w
  2949  011F  00C6               	movwf	(??_EditSchedule+1)^(0+128)
  2950  0120  0826               	movf	(?___wmul+1)^(0+128),w
  2951  0121  00C7               	movwf	((??_EditSchedule+1)^(0+128)+1)
  2952  0122  086C               	movf	EditSchedule@j^(0+128),w
  2953  0123  3E04               	addlw	4
  2954  0124  00A0               	movwf	?_getDigit^(0+128)
  2955  0125  3000               	movlw	0
  2956  0126  261F  120A  118A   	fcall	_getDigit
  2957  0129  00A5               	movwf	?___wmul^(0+128)
  2958  012A  303C               	movlw	60
  2959  012B  01A6               	clrf	(?___wmul+1)^(0+128)
  2960  012C  00A7               	movwf	(?___wmul^(0+128)+2)
  2961  012D  01A8               	clrf	((?___wmul+1)^(0+128)+2)
  2962  012E  2677  120A  118A   	fcall	___wmul
  2963  0131  0825               	movf	?___wmul^(0+128),w
  2964  0132  0746               	addwf	(??_EditSchedule+1)^(0+128),w
  2965  0133  00C8               	movwf	(??_EditSchedule+3)^(0+128)
  2966  0134  0826               	movf	(?___wmul+1)^(0+128),w
  2967  0135  1803               	skipnc
  2968  0136  0A26               	incf	(?___wmul+1)^(0+128),w
  2969  0137  0747               	addwf	(??_EditSchedule+2)^(0+128),w
  2970  0138  00C9               	movwf	(??_EditSchedule+4)^(0+128)
  2971  0139  086C               	movf	EditSchedule@j^(0+128),w
  2972  013A  3E02               	addlw	2
  2973  013B  00A0               	movwf	?_getDigit^(0+128)
  2974  013C  3000               	movlw	0
  2975  013D  261F  120A  118A   	fcall	_getDigit
  2976  0140  00A5               	movwf	?___wmul^(0+128)
  2977  0141  300A               	movlw	10
  2978  0142  01A6               	clrf	(?___wmul+1)^(0+128)
  2979  0143  00A7               	movwf	(?___wmul^(0+128)+2)
  2980  0144  01A8               	clrf	((?___wmul+1)^(0+128)+2)
  2981  0145  2677  120A  118A   	fcall	___wmul
  2982  0148  0825               	movf	?___wmul^(0+128),w
  2983  0149  0748               	addwf	(??_EditSchedule+3)^(0+128),w
  2984  014A  00CA               	movwf	(??_EditSchedule+5)^(0+128)
  2985  014B  0826               	movf	(?___wmul+1)^(0+128),w
  2986  014C  1803               	skipnc
  2987  014D  0A26               	incf	(?___wmul+1)^(0+128),w
  2988  014E  0749               	addwf	(??_EditSchedule+4)^(0+128),w
  2989  014F  00CB               	movwf	(??_EditSchedule+6)^(0+128)
  2990  0150  0845               	movf	??_EditSchedule^(0+128),w
  2991  0151  074A               	addwf	(??_EditSchedule+5)^(0+128),w
  2992  0152  00CC               	movwf	(??_EditSchedule+7)^(0+128)
  2993  0153  3000               	movlw	0
  2994  0154  1803               	skipnc
  2995  0155  3001               	movlw	1
  2996  0156  074B               	addwf	(??_EditSchedule+6)^(0+128),w
  2997  0157  00CD               	movwf	(??_EditSchedule+8)^(0+128)
  2998  0158  3006               	movlw	6
  2999  0159  00A0               	movwf	?___lbdiv^(0+128)
  3000  015A  086C               	movf	EditSchedule@j^(0+128),w
  3001  015B  2788  120A  118A   	fcall	___lbdiv
  3002  015E  00CE               	movwf	(??_EditSchedule+9)^(0+128)
  3003  015F  074E               	addwf	(??_EditSchedule+9)^(0+128),w
  3004  0160  3EDD               	addlw	EditSchedule@T& (0+255)
  3005  0161  0084               	movwf	4
  3006  0162  084C               	movf	(??_EditSchedule+7)^(0+128),w
  3007  0163  1383               	bcf	3,7	;select IRP bank1
  3008  0164  0080               	movwf	0
  3009  0165  0A84               	incf	4,f
  3010  0166  084D               	movf	(??_EditSchedule+8)^(0+128),w
  3011  0167  0080               	movwf	0
  3012  0168  3006               	movlw	6
  3013  0169  07EC               	addwf	EditSchedule@j^(0+128),f
  3014  016A  3007               	movlw	7
  3015  016B  026C               	subwf	EditSchedule@j^(0+128),w
  3016  016C  1C03               	skipc
  3017  016D  2907               	goto	l10779
  3018                           
  3019                           ;prog.c: 929: }
  3020                           ;prog.c: 930: if(T[0]>T[1]){
  3021  016E  085E               	movf	(EditSchedule@T+1)^(0+128),w
  3022  016F  0260               	subwf	((EditSchedule@T+1)^(0+128)+2),w
  3023  0170  1D03               	skipz
  3024  0171  2974               	goto	u8535
  3025  0172  085D               	movf	EditSchedule@T^(0+128),w
  3026  0173  025F               	subwf	(EditSchedule@T^(0+128)+2),w
  3027  0174                     u8535:	
  3028  0174  1803               	skipnc
  3029  0175  297F               	goto	l10793
  3030                           
  3031                           ;prog.c: 931: Times[0] = T[0];
  3032  0176  085E               	movf	(EditSchedule@T+1)^(0+128),w
  3033  0177  00E3               	movwf	(EditSchedule@Times+1)^(0+128)
  3034  0178  085D               	movf	EditSchedule@T^(0+128),w
  3035  0179  00E2               	movwf	EditSchedule@Times^(0+128)
  3036                           
  3037                           ;prog.c: 932: Times[1] = T[1];
  3038  017A  0860               	movf	((EditSchedule@T+1)^(0+128)+2),w
  3039  017B  00E5               	movwf	((EditSchedule@Times+1)^(0+128)+2)
  3040  017C  085F               	movf	(EditSchedule@T^(0+128)+2),w
  3041  017D  00E4               	movwf	(EditSchedule@Times^(0+128)+2)
  3042  017E  28FD               	goto	l10767
  3043  017F                     l10793:	
  3044                           
  3045                           ;prog.c: 936: setBlink(0,n,0);
  3046  017F  086E               	movf	EditSchedule@n^(0+128),w
  3047  0180  00A0               	movwf	?_setBlink^(0+128)
  3048  0181  3000               	movlw	0
  3049  0182  01A1               	clrf	(?_setBlink^(0+128)+1)
  3050  0183  262E  120A  118A   	fcall	_setBlink
  3051                           
  3052                           ;prog.c: 937: n=5;
  3053  0186  3005               	movlw	5
  3054  0187  1683               	bsf	3,5	;RP0=1, select bank1
  3055  0188  00EE               	movwf	EditSchedule@n^(0+128)
  3056                           
  3057                           ;prog.c: 938: BorderUp = getBorderUp(n);
  3058  0189  2709  120A  118A   	fcall	_getBorderUp
  3059  018C  00D8               	movwf	EditSchedule@BorderUp^(0+128)
  3060                           
  3061                           ;prog.c: 939: setBlink(0,n,1);
  3062  018D  3005               	movlw	5
  3063  018E  00A0               	movwf	?_setBlink^(0+128)
  3064  018F  3000               	movlw	0
  3065  0190  01A1               	clrf	(?_setBlink^(0+128)+1)
  3066  0191  0AA1               	incf	(?_setBlink^(0+128)+1),f
  3067  0192  262E  120A  118A   	fcall	_setBlink
  3068                           
  3069                           ;prog.c: 940: setDigit(0,5,getDigit(0,11));
  3070  0195  3005               	movlw	5
  3071  0196  1683               	bsf	3,5	;RP0=1, select bank1
  3072  0197  00AE               	movwf	?_setDigit^(0+128)
  3073  0198  300B               	movlw	11
  3074  0199  00A0               	movwf	?_getDigit^(0+128)
  3075  019A  3000               	movlw	0
  3076  019B  261F               	fcall	_getDigit
  3077  019C  00AF               	movwf	(?_setDigit^(0+128)+1)
  3078  019D  3000               	movlw	0
  3079  019E  160A  118A  265C   	fcall	_setDigit
      +       120A  118A         
  3080                           
  3081                           ;prog.c: 941: setDigit(0,4,getDigit(0,10));
  3082  01A3  3004               	movlw	4
  3083  01A4  00AE               	movwf	?_setDigit^(0+128)
  3084  01A5  300A               	movlw	10
  3085  01A6  00A0               	movwf	?_getDigit^(0+128)
  3086  01A7  3000               	movlw	0
  3087  01A8  261F               	fcall	_getDigit
  3088  01A9  00AF               	movwf	(?_setDigit^(0+128)+1)
  3089  01AA  3000               	movlw	0
  3090  01AB  160A  118A  265C   	fcall	_setDigit
      +       120A  118A         
  3091                           
  3092                           ;prog.c: 942: setDigit(0,2,getDigit(0,8));
  3093  01B0  3002               	movlw	2
  3094  01B1  00AE               	movwf	?_setDigit^(0+128)
  3095  01B2  3008               	movlw	8
  3096  01B3  00A0               	movwf	?_getDigit^(0+128)
  3097  01B4  3000               	movlw	0
  3098  01B5  261F               	fcall	_getDigit
  3099  01B6  00AF               	movwf	(?_setDigit^(0+128)+1)
  3100  01B7  3000               	movlw	0
  3101  01B8  160A  118A  265C   	fcall	_setDigit
      +       120A  118A         
  3102  01BD  3007               	movlw	7
  3103                           
  3104                           ;prog.c: 943: setDigit(0,1,getDigit(0,7));
  3105  01BE  01AE               	clrf	?_setDigit^(0+128)
  3106  01BF  0AAE               	incf	?_setDigit^(0+128),f
  3107  01C0  00A0               	movwf	?_getDigit^(0+128)
  3108  01C1  3000               	movlw	0
  3109  01C2  261F               	fcall	_getDigit
  3110  01C3  00AF               	movwf	(?_setDigit^(0+128)+1)
  3111  01C4  3000               	movlw	0
  3112  01C5  160A  118A  265C   	fcall	_setDigit
      +       120A  118A         
  3113  01CA  2A17               	goto	l10853
  3114  01CB                     l10809:	
  3115  01CB  086F               	movf	_KeyCode^(0+128),w	;volatile
  3116  01CC  3A28               	xorlw	40
  3117  01CD  1D03               	skipz
  3118  01CE  29EB               	goto	l10831
  3119                           
  3120                           ;prog.c: 946: KeyCode = 0;
  3121  01CF  01EF               	clrf	_KeyCode^(0+128)	;volatile
  3122                           
  3123                           ;prog.c: 947: if(n>1){
  3124  01D0  3002               	movlw	2
  3125  01D1  026E               	subwf	EditSchedule@n^(0+128),w
  3126  01D2  1C03               	skipc
  3127  01D3  2A17               	goto	l10853
  3128                           
  3129                           ;prog.c: 948: setBlink(0,n,0);
  3130  01D4  086E               	movf	EditSchedule@n^(0+128),w
  3131  01D5  00A0               	movwf	?_setBlink^(0+128)
  3132  01D6  3000               	movlw	0
  3133  01D7  01A1               	clrf	(?_setBlink^(0+128)+1)
  3134  01D8  262E  120A  118A   	fcall	_setBlink
  3135                           
  3136                           ;prog.c: 949: n==10 || n==7 || n==4 ? n-=2 : n--;
  3137  01DB  1683               	bsf	3,5	;RP0=1, select bank1
  3138  01DC  086E               	movf	EditSchedule@n^(0+128),w
  3139  01DD  3A0A               	xorlw	10
  3140  01DE  1903               	skipnz
  3141  01DF  29E8               	goto	l10823
  3142  01E0  086E               	movf	EditSchedule@n^(0+128),w
  3143  01E1  3A07               	xorlw	7
  3144  01E2  1903               	skipnz
  3145  01E3  29E8               	goto	l10823
  3146  01E4  086E               	movf	EditSchedule@n^(0+128),w
  3147  01E5  3A04               	xorlw	4
  3148  01E6  1D03               	skipz
  3149  01E7  29E9               	goto	l10825
  3150  01E8                     l10823:	
  3151  01E8  03EE               	decf	EditSchedule@n^(0+128),f
  3152  01E9                     l10825:	
  3153  01E9  03EE               	decf	EditSchedule@n^(0+128),f
  3154  01EA  2A0A               	goto	L10
  3155  01EB                     l10831:	
  3156                           ;prog.c: 951: setBlink(0,n,1);
  3157                           
  3158                           ;prog.c: 950: BorderUp = getBorderUp(n);
  3159                           
  3160  01EB  086F               	movf	_KeyCode^(0+128),w	;volatile
  3161  01EC  3A29               	xorlw	41
  3162  01ED  1D03               	skipz
  3163  01EE  2A17               	goto	l10853
  3164                           
  3165                           ;prog.c: 954: KeyCode = 0;
  3166  01EF  01EF               	clrf	_KeyCode^(0+128)	;volatile
  3167                           
  3168                           ;prog.c: 955: if(n<11){
  3169  01F0  300B               	movlw	11
  3170  01F1  026E               	subwf	EditSchedule@n^(0+128),w
  3171  01F2  1803               	skipnc
  3172  01F3  2A17               	goto	l10853
  3173                           
  3174                           ;prog.c: 956: setBlink(0,n,0);
  3175  01F4  086E               	movf	EditSchedule@n^(0+128),w
  3176  01F5  00A0               	movwf	?_setBlink^(0+128)
  3177  01F6  3000               	movlw	0
  3178  01F7  01A1               	clrf	(?_setBlink^(0+128)+1)
  3179  01F8  262E  120A  118A   	fcall	_setBlink
  3180                           
  3181                           ;prog.c: 957: n==8 || n==5 || n==2 ? n+=2 : n++;
  3182  01FB  1683               	bsf	3,5	;RP0=1, select bank1
  3183  01FC  086E               	movf	EditSchedule@n^(0+128),w
  3184  01FD  3A08               	xorlw	8
  3185  01FE  1903               	skipnz
  3186  01FF  2A08               	goto	l10845
  3187  0200  086E               	movf	EditSchedule@n^(0+128),w
  3188  0201  3A05               	xorlw	5
  3189  0202  1903               	skipnz
  3190  0203  2A08               	goto	l10845
  3191  0204  086E               	movf	EditSchedule@n^(0+128),w
  3192  0205  3A02               	xorlw	2
  3193  0206  1D03               	skipz
  3194  0207  2A09               	goto	l10847
  3195  0208                     l10845:	
  3196  0208  0AEE               	incf	EditSchedule@n^(0+128),f
  3197  0209                     l10847:	
  3198  0209  0AEE               	incf	EditSchedule@n^(0+128),f
  3199  020A                     L10:	
  3200                           
  3201                           ;prog.c: 958: BorderUp = getBorderUp(n);
  3202  020A  086E               	movf	EditSchedule@n^(0+128),w
  3203  020B  2709  120A  118A   	fcall	_getBorderUp
  3204  020E  00D8               	movwf	EditSchedule@BorderUp^(0+128)
  3205                           
  3206                           ;prog.c: 959: setBlink(0,n,1);
  3207  020F  086E               	movf	EditSchedule@n^(0+128),w
  3208  0210  00A0               	movwf	?_setBlink^(0+128)
  3209  0211  3000               	movlw	0
  3210  0212  01A1               	clrf	(?_setBlink^(0+128)+1)
  3211  0213  0AA1               	incf	(?_setBlink^(0+128)+1),f
  3212  0214  262E  120A  118A   	fcall	_setBlink
  3213  0217                     l10853:	
  3214                           
  3215                           ;prog.c: 960: }
  3216                           ;prog.c: 961: }
  3217                           ;prog.c: 962: key = entNum(0,BorderUp);
  3218  0217  1683               	bsf	3,5	;RP0=1, select bank1
  3219  0218  0858               	movf	EditSchedule@BorderUp^(0+128),w
  3220  0219  00A0               	movwf	?_entNum^(0+128)
  3221  021A  3000               	movlw	0
  3222  021B  26BC  120A  118A   	fcall	_entNum
  3223  021E  00ED               	movwf	EditSchedule@key^(0+128)
  3224                           
  3225                           ;prog.c: 963: if(key!=255){
  3226  021F  3AFF               	xorlw	255
  3227  0220  1903               	skipnz
  3228  0221  28F8               	goto	l10763
  3229                           
  3230                           ;prog.c: 964: setDigit(0,n,key);
  3231  0222  086E               	movf	EditSchedule@n^(0+128),w
  3232  0223  00AE               	movwf	?_setDigit^(0+128)
  3233  0224  086D               	movf	EditSchedule@key^(0+128),w
  3234  0225  00AF               	movwf	(?_setDigit^(0+128)+1)
  3235  0226  3000               	movlw	0
  3236  0227  160A  118A  265C   	fcall	_setDigit
      +       120A  118A         
  3237                           
  3238                           ;prog.c: 965: if((n==11||n==5)&&key==2&&(getDigit(0,n-1)>3))setDigit(0,n-1,3);
  3239  022C  086E               	movf	EditSchedule@n^(0+128),w
  3240  022D  3A0B               	xorlw	11
  3241  022E  1903               	skipnz
  3242  022F  2A34               	goto	l10863
  3243  0230  086E               	movf	EditSchedule@n^(0+128),w
  3244  0231  3A05               	xorlw	5
  3245  0232  1D03               	skipz
  3246  0233  2A4F               	goto	l10869
  3247  0234                     l10863:	
  3248  0234  086D               	movf	EditSchedule@key^(0+128),w
  3249  0235  3A02               	xorlw	2
  3250  0236  1D03               	skipz
  3251  0237  2A4F               	goto	l10869
  3252  0238  086E               	movf	EditSchedule@n^(0+128),w
  3253  0239  3EFF               	addlw	255
  3254  023A  00A0               	movwf	?_getDigit^(0+128)
  3255  023B  3000               	movlw	0
  3256  023C  261F  120A  118A   	fcall	_getDigit
  3257  023F  00C5               	movwf	??_EditSchedule^(0+128)
  3258  0240  3004               	movlw	4
  3259  0241  0245               	subwf	??_EditSchedule^(0+128),w
  3260  0242  1C03               	skipc
  3261  0243  2A4F               	goto	l10869
  3262  0244  086E               	movf	EditSchedule@n^(0+128),w
  3263  0245  3EFF               	addlw	255
  3264  0246  00AE               	movwf	?_setDigit^(0+128)
  3265  0247  3003               	movlw	3
  3266  0248  00AF               	movwf	(?_setDigit^(0+128)+1)
  3267  0249  3000               	movlw	0
  3268  024A  160A  118A  265C   	fcall	_setDigit
      +       120A  118A         
  3269  024F                     l10869:	
  3270                           
  3271                           ;prog.c: 966: if(n>1){
  3272  024F  3002               	movlw	2
  3273  0250  026E               	subwf	EditSchedule@n^(0+128),w
  3274  0251  1C03               	skipc
  3275  0252  2A55               	goto	l10873
  3276                           
  3277                           ;prog.c: 967: KeyCode=40;
  3278  0253  3028               	movlw	40
  3279  0254  2A56               	goto	L7
  3280  0255                     l10873:	
  3281                           ;prog.c: 968: }else{
  3282                           
  3283                           
  3284                           ;prog.c: 969: KeyCode=42;
  3285  0255  302A               	movlw	42
  3286  0256                     L7:	
  3287  0256  00EF               	movwf	_KeyCode^(0+128)	;volatile
  3288  0257  28F8               	goto	l10763
  3289  0258                     l10875:	
  3290                           ;prog.c: 970: }
  3291                           ;prog.c: 971: }
  3292                           ;prog.c: 972: }
  3293                           ;prog.c: 973: }else if(KeyCode==40){
  3294                           
  3295  0258  086F               	movf	_KeyCode^(0+128),w	;volatile
  3296  0259  3A28               	xorlw	40
  3297  025A  1D03               	skipz
  3298  025B  2A62               	goto	l10883
  3299  025C                     l10877:	
  3300                           
  3301                           ;prog.c: 974: KeyCode = 0;
  3302  025C  01EF               	clrf	_KeyCode^(0+128)	;volatile
  3303                           
  3304                           ;prog.c: 975: clrInd();
  3305  025D  2690  120A  118A   	fcall	_clrInd
  3306                           
  3307                           ;prog.c: 976: mode = 2;
  3308  0260  3002               	movlw	2
  3309  0261  2A6B               	goto	L8
  3310  0262                     l10883:	
  3311                           ;prog.c: 977: }else if(KeyCode==41){
  3312                           
  3313  0262  086F               	movf	_KeyCode^(0+128),w	;volatile
  3314  0263  3A29               	xorlw	41
  3315  0264  1D03               	skipz
  3316  0265  285F               	goto	l10727
  3317  0266                     l10885:	
  3318                           
  3319                           ;prog.c: 978: KeyCode = 0;
  3320  0266  01EF               	clrf	_KeyCode^(0+128)	;volatile
  3321                           
  3322                           ;prog.c: 979: clrInd();
  3323  0267  2690  120A  118A   	fcall	_clrInd
  3324                           
  3325                           ;prog.c: 980: mode = 3;
  3326  026A  3003               	movlw	3
  3327  026B                     L8:	
  3328  026B  1683               	bsf	3,5	;RP0=1, select bank1
  3329  026C  00E1               	movwf	EditSchedule@mode^(0+128)
  3330  026D  285F               	goto	l10727
  3331  026E                     l10891:	
  3332                           
  3333                           ;prog.c: 984: ItemsToIndicator(Days, 8, 9);
  3334  026E  3008               	movlw	8
  3335  026F  00B8               	movwf	?_ItemsToIndicator^(0+128)
  3336  0270  3009               	movlw	9
  3337  0271  00B9               	movwf	(?_ItemsToIndicator^(0+128)+1)
  3338  0272  086A               	movf	EditSchedule@Days^(0+128),w
  3339  0273  26ED  120A  118A   	fcall	_ItemsToIndicator
  3340                           
  3341                           ;prog.c: 985: key = entNum(1,7);
  3342  0276  3007               	movlw	7
  3343  0277  00A0               	movwf	?_entNum^(0+128)
  3344  0278  3001               	movlw	1
  3345  0279  26BC  120A  118A   	fcall	_entNum
  3346  027C  00ED               	movwf	EditSchedule@key^(0+128)
  3347                           
  3348                           ;prog.c: 986: if(key!=255){
  3349  027D  3AFF               	xorlw	255
  3350  027E  1903               	skipnz
  3351  027F  2A86               	goto	l10899
  3352                           
  3353                           ;prog.c: 987: Days^=ConvertDayToBit(key);
  3354  0280  086D               	movf	EditSchedule@key^(0+128),w
  3355  0281  26D3  120A  118A   	fcall	_ConvertDayToBit
  3356  0284  06EA               	xorwf	EditSchedule@Days^(0+128),f
  3357                           
  3358                           ;prog.c: 988: }else if(KeyCode==30){
  3359  0285  285F               	goto	l10727
  3360  0286                     l10899:	
  3361  0286  086F               	movf	_KeyCode^(0+128),w	;volatile
  3362  0287  3A1E               	xorlw	30
  3363  0288  1D03               	skipz
  3364  0289  2A8D               	goto	l10903
  3365                           
  3366                           ;prog.c: 989: KeyCode = 0;
  3367  028A  01EF               	clrf	_KeyCode^(0+128)	;volatile
  3368                           
  3369                           ;prog.c: 990: Days=0;
  3370  028B  01EA               	clrf	EditSchedule@Days^(0+128)
  3371                           
  3372                           ;prog.c: 991: }else if(KeyCode==45){
  3373  028C  285F               	goto	l10727
  3374  028D                     l10903:	
  3375  028D  086F               	movf	_KeyCode^(0+128),w	;volatile
  3376  028E  3A2D               	xorlw	45
  3377  028F  1D03               	skipz
  3378  0290  2A95               	goto	l10909
  3379                           
  3380                           ;prog.c: 992: KeyCode = 0;
  3381  0291  01EF               	clrf	_KeyCode^(0+128)	;volatile
  3382                           
  3383                           ;prog.c: 993: Days=0b01111111;
  3384  0292  307F               	movlw	127
  3385  0293  00EA               	movwf	EditSchedule@Days^(0+128)
  3386                           
  3387                           ;prog.c: 994: }else if(KeyCode==40){
  3388  0294  285F               	goto	l10727
  3389  0295                     l10909:	
  3390  0295  086F               	movf	_KeyCode^(0+128),w	;volatile
  3391  0296  3A28               	xorlw	40
  3392  0297  1903               	btfsc	3,2
  3393  0298  2A66               	goto	l10885
  3394  0299  086F               	movf	_KeyCode^(0+128),w	;volatile
  3395  029A  3A29               	xorlw	41
  3396  029B  1D03               	skipz
  3397  029C  285F               	goto	l10727
  3398  029D                     l10919:	
  3399                           
  3400                           ;prog.c: 999: KeyCode = 0;
  3401  029D  01EF               	clrf	_KeyCode^(0+128)	;volatile
  3402  029E  2859               	goto	L9
  3403  029F                     l10925:	
  3404                           ;prog.c: 1000: clrInd();
  3405                           
  3406                           
  3407                           ;prog.c: 1005: ItemsToIndicator(Signals, 4, 8);
  3408  029F  3004               	movlw	4
  3409  02A0  00B8               	movwf	?_ItemsToIndicator^(0+128)
  3410  02A1  3008               	movlw	8
  3411  02A2  00B9               	movwf	(?_ItemsToIndicator^(0+128)+1)
  3412  02A3  086B               	movf	EditSchedule@Signals^(0+128),w
  3413  02A4  26ED  120A  118A   	fcall	_ItemsToIndicator
  3414                           
  3415                           ;prog.c: 1006: key = entNum(1,3);
  3416  02A7  3003               	movlw	3
  3417  02A8  00A0               	movwf	?_entNum^(0+128)
  3418  02A9  3001               	movlw	1
  3419  02AA  26BC  120A  118A   	fcall	_entNum
  3420  02AD  00ED               	movwf	EditSchedule@key^(0+128)
  3421                           
  3422                           ;prog.c: 1007: if(key!=255){
  3423  02AE  3AFF               	xorlw	255
  3424  02AF  1903               	skipnz
  3425  02B0  2AB7               	goto	l10933
  3426                           
  3427                           ;prog.c: 1008: Signals^=ConvertDayToBit(key);
  3428  02B1  086D               	movf	EditSchedule@key^(0+128),w
  3429  02B2  26D3  120A  118A   	fcall	_ConvertDayToBit
  3430  02B5  06EB               	xorwf	EditSchedule@Signals^(0+128),f
  3431                           
  3432                           ;prog.c: 1009: }else if(KeyCode==30){
  3433  02B6  285F               	goto	l10727
  3434  02B7                     l10933:	
  3435  02B7  086F               	movf	_KeyCode^(0+128),w	;volatile
  3436  02B8  3A1E               	xorlw	30
  3437  02B9  1D03               	skipz
  3438  02BA  2ABE               	goto	l10937
  3439                           
  3440                           ;prog.c: 1010: KeyCode = 0;
  3441  02BB  01EF               	clrf	_KeyCode^(0+128)	;volatile
  3442                           
  3443                           ;prog.c: 1011: Signals=0;
  3444  02BC  01EB               	clrf	EditSchedule@Signals^(0+128)
  3445                           
  3446                           ;prog.c: 1012: }else if(KeyCode==45){
  3447  02BD  285F               	goto	l10727
  3448  02BE                     l10937:	
  3449  02BE  086F               	movf	_KeyCode^(0+128),w	;volatile
  3450  02BF  3A2D               	xorlw	45
  3451  02C0  1D03               	skipz
  3452  02C1  2AC6               	goto	l10943
  3453                           
  3454                           ;prog.c: 1013: KeyCode = 0;
  3455  02C2  01EF               	clrf	_KeyCode^(0+128)	;volatile
  3456                           
  3457                           ;prog.c: 1014: Signals=0b00000111;
  3458  02C3  3007               	movlw	7
  3459  02C4  00EB               	movwf	EditSchedule@Signals^(0+128)
  3460                           
  3461                           ;prog.c: 1015: }else if(KeyCode==40){
  3462  02C5  285F               	goto	l10727
  3463  02C6                     l10943:	
  3464  02C6  086F               	movf	_KeyCode^(0+128),w	;volatile
  3465  02C7  3A28               	xorlw	40
  3466  02C8  1903               	btfsc	3,2
  3467  02C9  2A9D               	goto	l10919
  3468  02CA  086F               	movf	_KeyCode^(0+128),w	;volatile
  3469  02CB  3A29               	xorlw	41
  3470  02CC  1903               	btfsc	3,2
  3471  02CD  2A5C               	goto	l10877
  3472  02CE  285F               	goto	l10727
  3473  02CF                     l10959:	
  3474  02CF  0861               	movf	EditSchedule@mode^(0+128),w
  3475                           
  3476                           ; Switch size 1, requested type "speed"
  3477                           ; Number of cases is 3, Range of values is 1 to 3
  3478                           ; switch strategies available:
  3479                           ; Name         Instructions Cycles
  3480                           ; simple_byte           10     6 (average)
  3481                           ; direct_byte           20    11 (fixed)
  3482                           ; jumptable            263     9 (fixed)
  3483                           ;	Chosen strategy is simple_byte
  3484  02D0  3A01               	xorlw	1	; case 1
  3485  02D1  1903               	skipnz
  3486  02D2  28DD               	goto	l10749
  3487  02D3  3A03               	xorlw	3	; case 2
  3488  02D4  1903               	skipnz
  3489  02D5  2A6E               	goto	l10891
  3490  02D6  3A01               	xorlw	1	; case 3
  3491  02D7  1903               	skipnz
  3492  02D8  2A9F               	goto	l10925
  3493  02D9  285F               	goto	l10727
  3494  02DA  0008               	return
  3495  02DB                     __end_of_EditSchedule:	
  3496  02DB                     __ptext2253:	
  3497 ;; =============== function _lcd_init ends ============
  3498                           
  3499                           
  3500 ;; *************** function _TimeEdit *****************
  3501 ;; Defined at:
  3502 ;;		line 442 in file "prog.c"
  3503 ;; Parameters:    Size  Location     Type
  3504 ;;		None
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;  t               4   40[BANK1 ] long 
  3507 ;;  borders         2   44[BANK1 ] unsigned char [2]
  3508 ;;  j               1   47[BANK1 ] unsigned char 
  3509 ;;  c               1   46[BANK1 ] unsigned char 
  3510 ;; Return value:  Size  Location     Type
  3511 ;;		None               void
  3512 ;; Registers used:
  3513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3514 ;; Tracked objects:
  3515 ;;		On entry : 160/120
  3516 ;;		On exit  : 160/120
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3519 ;;      Params:         0       0       0       0       0
  3520 ;;      Locals:         0       0       8       0       0
  3521 ;;      Temps:          0       0       8       0       0
  3522 ;;      Totals:         0       0      16       0       0
  3523 ;;Total ram usage:       16 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    6
  3526 ;; This function calls:
  3527 ;;		_clrInd
  3528 ;;		___aldiv
  3529 ;;		_setBlink
  3530 ;;		_entNum
  3531 ;;		_getDigit
  3532 ;;		___wmul
  3533 ;;		_setDigit
  3534 ;;		_main2
  3535 ;;		_WriteTime
  3536 ;;		_ReIndTimeEdit
  3537 ;; This function is called by:
  3538 ;;		_main2
  3539 ;; This function uses a non-reentrant model
  3540 ;;
  3541  02DB                     _TimeEdit:	
  3542                           
  3543                           ;prog.c: 443: isTimeSetting = 1;
  3544                           
  3545                           ; Regs used in _TimeEdit: [allreg]
  3546  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  3547  02DC  145E               	bsf	_isTimeSetting/(0+8),_isTimeSetting& (0+7)
  3548                           
  3549                           ;prog.c: 444: clrInd();
  3550  02DD  2690               	fcall	_clrInd
  3551                           
  3552                           ;prog.c: 445: long int t = Clock/6000;
  3553  02DE  1683               	bsf	3,5	;RP0=1, select bank1
  3554  02DF  3017               	movlw	23
  3555  02E0  01A3               	clrf	(?___aldiv+3)^(0+128)
  3556  02E1  01A2               	clrf	(?___aldiv+2)^(0+128)
  3557  02E2  00A1               	movwf	(?___aldiv+1)^(0+128)
  3558  02E3  3070               	movlw	112
  3559  02E4  00A0               	movwf	?___aldiv^(0+128)
  3560  02E5  1703               	bsf	3,6	;RP1=1, select bank3
  3561  02E6  085D               	movf	(_Clock+3)^(0+384),w
  3562  02E7  1303               	bcf	3,6	;RP1=0, select bank1
  3563  02E8  00A7               	movwf	((?___aldiv+3)^(0+128)+4)
  3564  02E9  1703               	bsf	3,6	;RP1=1, select bank3
  3565  02EA  085C               	movf	(_Clock+2)^(0+384),w
  3566  02EB  1303               	bcf	3,6	;RP1=0, select bank1
  3567  02EC  00A6               	movwf	((?___aldiv+2)^(0+128)+4)
  3568  02ED  1703               	bsf	3,6	;RP1=1, select bank3
  3569  02EE  085B               	movf	(_Clock+1)^(0+384),w
  3570  02EF  1303               	bcf	3,6	;RP1=0, select bank1
  3571  02F0  00A5               	movwf	((?___aldiv+1)^(0+128)+4)
  3572  02F1  1703               	bsf	3,6	;RP1=1, select bank3
  3573  02F2  085A               	movf	_Clock^(0+384),w
  3574  02F3  1303               	bcf	3,6	;RP1=0, select bank1
  3575  02F4  00A4               	movwf	(?___aldiv^(0+128)+4)
  3576  02F5  160A  118A  26B2   	fcall	___aldiv
      +       120A  118A         
  3577  02FA  0823               	movf	(?___aldiv+3)^(0+128),w
  3578  02FB  00CB               	movwf	(TimeEdit@t+3)^(0+128)
  3579  02FC  0822               	movf	(?___aldiv+2)^(0+128),w
  3580  02FD  00CA               	movwf	(TimeEdit@t+2)^(0+128)
  3581  02FE  0821               	movf	(?___aldiv+1)^(0+128),w
  3582  02FF  00C9               	movwf	(TimeEdit@t+1)^(0+128)
  3583  0300  0820               	movf	?___aldiv^(0+128),w
  3584  0301  00C8               	movwf	TimeEdit@t^(0+128)
  3585                           
  3586                           ;prog.c: 446: setBlink(0,6,1);
  3587  0302  3006               	movlw	6
  3588  0303  00A0               	movwf	?_setBlink^(0+128)
  3589  0304  3000               	movlw	0
  3590  0305  01A1               	clrf	(?_setBlink^(0+128)+1)
  3591  0306  0AA1               	incf	(?_setBlink^(0+128)+1),f
  3592  0307  262E  120A  118A   	fcall	_setBlink
  3593                           
  3594                           ;prog.c: 447: char j;
  3595                           ;prog.c: 448: unsigned char c = 2;
  3596  030A  3002               	movlw	2
  3597  030B  1683               	bsf	3,5	;RP0=1, select bank1
  3598  030C  00CE               	movwf	TimeEdit@c^(0+128)
  3599                           
  3600                           ;prog.c: 449: unsigned char borders[] = {0,2};
  3601  030D  1703               	bsf	3,6	;RP1=1, select bank3
  3602  030E  0855               	movf	(TimeEdit@F1344+1)^(0+384),w
  3603  030F  1303               	bcf	3,6	;RP1=0, select bank1
  3604  0310  00CD               	movwf	(TimeEdit@borders+1)^(0+128)
  3605  0311  1703               	bsf	3,6	;RP1=1, select bank3
  3606  0312  0854               	movf	TimeEdit@F1344^(0+384),w
  3607  0313  1303               	bcf	3,6	;RP1=0, select bank1
  3608  0314  00CC               	movwf	TimeEdit@borders^(0+128)
  3609  0315                     l917:	
  3610                           ;prog.c: 451: while(1){
  3611                           
  3612                           
  3613                           ;prog.c: 452: j = entNum(borders[0],borders[1]);
  3614  0315  084D               	movf	(TimeEdit@borders^(0+128)+1),w
  3615  0316  00A0               	movwf	?_entNum^(0+128)
  3616  0317  084C               	movf	TimeEdit@borders^(0+128),w
  3617  0318  26BC  120A  118A   	fcall	_entNum
  3618  031B  00CF               	movwf	TimeEdit@j^(0+128)
  3619                           
  3620                           ;prog.c: 453: if(j!=255 && c==1){
  3621  031C  3AFF               	xorlw	255
  3622  031D  1903               	skipnz
  3623  031E  2B58               	goto	l10411
  3624  031F  0B4E               	decfsz	TimeEdit@c^(0+128),w
  3625  0320  2B58               	goto	l10411
  3626                           
  3627                           ;prog.c: 454: t = t + (j-getDigit(0,8))*1440;
  3628  0321  3008               	movlw	8
  3629  0322  00A0               	movwf	?_getDigit^(0+128)
  3630  0323  3000               	movlw	0
  3631  0324  261F  120A  118A   	fcall	_getDigit
  3632  0327  024F               	subwf	TimeEdit@j^(0+128),w
  3633  0328  00A5               	movwf	?___wmul^(0+128)
  3634  0329  01A6               	clrf	(?___wmul^(0+128)+1)
  3635  032A  1C03               	skipc
  3636  032B  03A6               	decf	(?___wmul+1)^(0+128),f
  3637  032C  30A0               	movlw	160
  3638  032D  00A7               	movwf	(?___wmul^(0+128)+2)
  3639  032E  3005               	movlw	5
  3640  032F  00A8               	movwf	(?___wmul^(0+128)+3)
  3641  0330  2677  120A  118A   	fcall	___wmul
  3642  0333  0825               	movf	?___wmul^(0+128),w
  3643  0334  00C0               	movwf	??_TimeEdit^(0+128)
  3644  0335  0826               	movf	(?___wmul+1)^(0+128),w
  3645  0336  00C1               	movwf	(??_TimeEdit^(0+128)+1)
  3646  0337  3000               	movlw	0
  3647  0338  1BC1               	btfsc	(??_TimeEdit^(0+128)+1),7
  3648  0339  30FF               	movlw	255
  3649  033A  00C2               	movwf	(??_TimeEdit^(0+128)+2)
  3650  033B  00C3               	movwf	(??_TimeEdit^(0+128)+3)
  3651  033C  0840               	movf	??_TimeEdit^(0+128),w
  3652  033D  07C8               	addwf	TimeEdit@t^(0+128),f
  3653  033E  0841               	movf	(??_TimeEdit+1)^(0+128),w
  3654  033F  1103               	clrz
  3655  0340  1803               	skipnc
  3656  0341  3E01               	addlw	1
  3657  0342  1D03               	btfss	3,2
  3658  0343  07C9               	addwf	(TimeEdit@t+1)^(0+128),f
  3659  0344  0842               	movf	(??_TimeEdit+2)^(0+128),w
  3660  0345  1103               	clrz
  3661  0346  1803               	skipnc
  3662  0347  3E01               	addlw	1
  3663  0348  1D03               	btfss	3,2
  3664  0349  07CA               	addwf	(TimeEdit@t+2)^(0+128),f
  3665  034A  0843               	movf	(??_TimeEdit+3)^(0+128),w
  3666  034B  1103               	clrz
  3667  034C  1803               	skipnc
  3668  034D  3E01               	addlw	1
  3669  034E  1D03               	btfss	3,2
  3670  034F  07CB               	addwf	(TimeEdit@t+3)^(0+128),f
  3671  0350  3002               	movlw	2
  3672                           
  3673                           ;prog.c: 455: borders[0]=0;
  3674  0351  01CC               	clrf	TimeEdit@borders^(0+128)
  3675                           
  3676                           ;prog.c: 456: borders[1]=2;
  3677  0352  00CD               	movwf	(TimeEdit@borders^(0+128)+1)
  3678  0353  3008               	movlw	8
  3679                           
  3680                           ;prog.c: 457: c++;
  3681  0354  0ACE               	incf	TimeEdit@c^(0+128),f
  3682                           
  3683                           ;prog.c: 458: setBlink(0,8,0);
  3684  0355  00A0               	movwf	?_setBlink^(0+128)
  3685  0356  3000               	movlw	0
  3686  0357  2D7B               	goto	L11
  3687  0358                     l10411:	
  3688                           ;prog.c: 460: }else if(j!=255 && c==2){
  3689                           
  3690                           ;prog.c: 459: setBlink(0,6,1);
  3691                           
  3692  0358  084F               	movf	TimeEdit@j^(0+128),w
  3693  0359  3AFF               	xorlw	255
  3694  035A  1903               	skipnz
  3695  035B  2BE0               	goto	l10437
  3696  035C  084E               	movf	TimeEdit@c^(0+128),w
  3697  035D  3A02               	xorlw	2
  3698  035E  1D03               	skipz
  3699  035F  2BE0               	goto	l10437
  3700                           
  3701                           ;prog.c: 461: t = t + (j-getDigit(0,6))*600;
  3702  0360  3006               	movlw	6
  3703  0361  00A0               	movwf	?_getDigit^(0+128)
  3704  0362  3000               	movlw	0
  3705  0363  261F  120A  118A   	fcall	_getDigit
  3706  0366  024F               	subwf	TimeEdit@j^(0+128),w
  3707  0367  00A5               	movwf	?___wmul^(0+128)
  3708  0368  01A6               	clrf	(?___wmul^(0+128)+1)
  3709  0369  1C03               	skipc
  3710  036A  03A6               	decf	(?___wmul+1)^(0+128),f
  3711  036B  3058               	movlw	88
  3712  036C  00A7               	movwf	(?___wmul^(0+128)+2)
  3713  036D  3002               	movlw	2
  3714  036E  00A8               	movwf	(?___wmul^(0+128)+3)
  3715  036F  2677  120A  118A   	fcall	___wmul
  3716  0372  0825               	movf	?___wmul^(0+128),w
  3717  0373  00C0               	movwf	??_TimeEdit^(0+128)
  3718  0374  0826               	movf	(?___wmul+1)^(0+128),w
  3719  0375  00C1               	movwf	(??_TimeEdit^(0+128)+1)
  3720  0376  3000               	movlw	0
  3721  0377  1BC1               	btfsc	(??_TimeEdit^(0+128)+1),7
  3722  0378  30FF               	movlw	255
  3723  0379  00C2               	movwf	(??_TimeEdit^(0+128)+2)
  3724  037A  00C3               	movwf	(??_TimeEdit^(0+128)+3)
  3725  037B  0840               	movf	??_TimeEdit^(0+128),w
  3726  037C  07C8               	addwf	TimeEdit@t^(0+128),f
  3727  037D  0841               	movf	(??_TimeEdit+1)^(0+128),w
  3728  037E  1103               	clrz
  3729  037F  1803               	skipnc
  3730  0380  3E01               	addlw	1
  3731  0381  1D03               	btfss	3,2
  3732  0382  07C9               	addwf	(TimeEdit@t+1)^(0+128),f
  3733  0383  0842               	movf	(??_TimeEdit+2)^(0+128),w
  3734  0384  1103               	clrz
  3735  0385  1803               	skipnc
  3736  0386  3E01               	addlw	1
  3737  0387  1D03               	btfss	3,2
  3738  0388  07CA               	addwf	(TimeEdit@t+2)^(0+128),f
  3739  0389  0843               	movf	(??_TimeEdit+3)^(0+128),w
  3740  038A  1103               	clrz
  3741  038B  1803               	skipnc
  3742  038C  3E01               	addlw	1
  3743  038D  1D03               	btfss	3,2
  3744  038E  07CB               	addwf	(TimeEdit@t+3)^(0+128),f
  3745                           
  3746                           ;prog.c: 462: if(j>1){
  3747  038F  3002               	movlw	2
  3748  0390  024F               	subwf	TimeEdit@j^(0+128),w
  3749                           
  3750                           ;prog.c: 463: borders[0]=0;
  3751  0391  01CC               	clrf	TimeEdit@borders^(0+128)
  3752  0392  1C03               	skipc
  3753  0393  2BD4               	goto	L17
  3754                           
  3755                           ;prog.c: 464: borders[1]=3;
  3756  0394  3003               	movlw	3
  3757  0395  00CD               	movwf	(TimeEdit@borders^(0+128)+1)
  3758                           
  3759                           ;prog.c: 465: if(getDigit(0,5)>3){
  3760  0396  3005               	movlw	5
  3761  0397  00A0               	movwf	?_getDigit^(0+128)
  3762  0398  3000               	movlw	0
  3763  0399  261F  120A  118A   	fcall	_getDigit
  3764  039C  00C0               	movwf	??_TimeEdit^(0+128)
  3765  039D  3004               	movlw	4
  3766  039E  0240               	subwf	??_TimeEdit^(0+128),w
  3767  039F  1C03               	skipc
  3768  03A0  2BD6               	goto	l10431
  3769                           
  3770                           ;prog.c: 466: t = t + (3-getDigit(0,5))*60;
  3771  03A1  3005               	movlw	5
  3772  03A2  00A0               	movwf	?_getDigit^(0+128)
  3773  03A3  3000               	movlw	0
  3774  03A4  261F  120A  118A   	fcall	_getDigit
  3775  03A7  00C0               	movwf	??_TimeEdit^(0+128)
  3776  03A8  3003               	movlw	3
  3777  03A9  00C1               	movwf	(??_TimeEdit+1)^(0+128)
  3778  03AA  0840               	movf	??_TimeEdit^(0+128),w
  3779  03AB  0241               	subwf	(??_TimeEdit+1)^(0+128),w
  3780  03AC  00A5               	movwf	?___wmul^(0+128)
  3781  03AD  01A6               	clrf	(?___wmul^(0+128)+1)
  3782  03AE  1C03               	skipc
  3783  03AF  03A6               	decf	(?___wmul+1)^(0+128),f
  3784  03B0  303C               	movlw	60
  3785  03B1  00A7               	movwf	(?___wmul^(0+128)+2)
  3786  03B2  01A8               	clrf	((?___wmul+1)^(0+128)+2)
  3787  03B3  2677  120A  118A   	fcall	___wmul
  3788  03B6  0825               	movf	?___wmul^(0+128),w
  3789  03B7  00C2               	movwf	(??_TimeEdit+2)^(0+128)
  3790  03B8  0826               	movf	(?___wmul+1)^(0+128),w
  3791  03B9  00C3               	movwf	((??_TimeEdit+2)^(0+128)+1)
  3792  03BA  3000               	movlw	0
  3793  03BB  1BC3               	btfsc	((??_TimeEdit+2)^(0+128)+1),7
  3794  03BC  30FF               	movlw	255
  3795  03BD  00C4               	movwf	((??_TimeEdit+2)^(0+128)+2)
  3796  03BE  00C5               	movwf	((??_TimeEdit+2)^(0+128)+3)
  3797  03BF  0842               	movf	(??_TimeEdit+2)^(0+128),w
  3798  03C0  07C8               	addwf	TimeEdit@t^(0+128),f
  3799  03C1  0843               	movf	(??_TimeEdit+3)^(0+128),w
  3800  03C2  1103               	clrz
  3801  03C3  1803               	skipnc
  3802  03C4  3E01               	addlw	1
  3803  03C5  1D03               	btfss	3,2
  3804  03C6  07C9               	addwf	(TimeEdit@t+1)^(0+128),f
  3805  03C7  0844               	movf	(??_TimeEdit+4)^(0+128),w
  3806  03C8  1103               	clrz
  3807  03C9  1803               	skipnc
  3808  03CA  3E01               	addlw	1
  3809  03CB  1D03               	btfss	3,2
  3810  03CC  07CA               	addwf	(TimeEdit@t+2)^(0+128),f
  3811  03CD  0845               	movf	(??_TimeEdit+5)^(0+128),w
  3812  03CE  1103               	clrz
  3813  03CF  1803               	skipnc
  3814  03D0  3E01               	addlw	1
  3815  03D1  1D03               	btfss	3,2
  3816  03D2  07CB               	addwf	(TimeEdit@t+3)^(0+128),f
  3817  03D3  2BD6               	goto	l10431
  3818  03D4                     L17:	
  3819                           ;prog.c: 469: borders[0]=0;
  3820                           
  3821                           
  3822                           ;prog.c: 470: borders[1]=9;
  3823  03D4  3009               	movlw	9
  3824  03D5  00CD               	movwf	(TimeEdit@borders^(0+128)+1)
  3825  03D6                     l10431:	
  3826  03D6  3006               	movlw	6
  3827                           
  3828                           ;prog.c: 471: }
  3829                           ;prog.c: 472: c++;
  3830  03D7  0ACE               	incf	TimeEdit@c^(0+128),f
  3831                           
  3832                           ;prog.c: 473: setBlink(0,6,0);
  3833  03D8  00A0               	movwf	?_setBlink^(0+128)
  3834  03D9  3000               	movlw	0
  3835  03DA  01A1               	clrf	(?_setBlink^(0+128)+1)
  3836  03DB  262E  120A  118A   	fcall	_setBlink
  3837                           
  3838                           ;prog.c: 474: setBlink(0,5,1);
  3839  03DE  3005               	movlw	5
  3840  03DF  2D80               	goto	L12
  3841  03E0                     l10437:	
  3842                           ;prog.c: 475: }else if(j!=255 && c==3){
  3843                           
  3844  03E0  084F               	movf	TimeEdit@j^(0+128),w
  3845  03E1  3AFF               	xorlw	255
  3846  03E2  1903               	skipnz
  3847  03E3  2C22               	goto	l10453
  3848  03E4  084E               	movf	TimeEdit@c^(0+128),w
  3849  03E5  3A03               	xorlw	3
  3850  03E6  1D03               	skipz
  3851  03E7  2C22               	goto	l10453
  3852                           
  3853                           ;prog.c: 476: t = t + (j-getDigit(0,5))*60;
  3854  03E8  3005               	movlw	5
  3855  03E9  00A0               	movwf	?_getDigit^(0+128)
  3856  03EA  3000               	movlw	0
  3857  03EB  261F  120A  118A   	fcall	_getDigit
  3858  03EE  024F               	subwf	TimeEdit@j^(0+128),w
  3859  03EF  00A5               	movwf	?___wmul^(0+128)
  3860  03F0  01A6               	clrf	(?___wmul^(0+128)+1)
  3861  03F1  1C03               	skipc
  3862  03F2  03A6               	decf	(?___wmul+1)^(0+128),f
  3863  03F3  303C               	movlw	60
  3864  03F4  00A7               	movwf	(?___wmul^(0+128)+2)
  3865  03F5  01A8               	clrf	((?___wmul+1)^(0+128)+2)
  3866  03F6  2677  120A  118A   	fcall	___wmul
  3867  03F9  0825               	movf	?___wmul^(0+128),w
  3868  03FA  00C0               	movwf	??_TimeEdit^(0+128)
  3869  03FB  0826               	movf	(?___wmul+1)^(0+128),w
  3870  03FC  00C1               	movwf	(??_TimeEdit^(0+128)+1)
  3871  03FD  3000               	movlw	0
  3872  03FE  1BC1               	btfsc	(??_TimeEdit^(0+128)+1),7
  3873  03FF  30FF               	movlw	255
  3874  0400  00C2               	movwf	(??_TimeEdit^(0+128)+2)
  3875  0401  00C3               	movwf	(??_TimeEdit^(0+128)+3)
  3876  0402  0840               	movf	??_TimeEdit^(0+128),w
  3877  0403  07C8               	addwf	TimeEdit@t^(0+128),f
  3878  0404  0841               	movf	(??_TimeEdit+1)^(0+128),w
  3879  0405  1103               	clrz
  3880  0406  1803               	skipnc
  3881  0407  3E01               	addlw	1
  3882  0408  1D03               	btfss	3,2
  3883  0409  07C9               	addwf	(TimeEdit@t+1)^(0+128),f
  3884  040A  0842               	movf	(??_TimeEdit+2)^(0+128),w
  3885  040B  1103               	clrz
  3886  040C  1803               	skipnc
  3887  040D  3E01               	addlw	1
  3888  040E  1D03               	btfss	3,2
  3889  040F  07CA               	addwf	(TimeEdit@t+2)^(0+128),f
  3890  0410  0843               	movf	(??_TimeEdit+3)^(0+128),w
  3891  0411  1103               	clrz
  3892  0412  1803               	skipnc
  3893  0413  3E01               	addlw	1
  3894  0414  1D03               	btfss	3,2
  3895  0415  07CB               	addwf	(TimeEdit@t+3)^(0+128),f
  3896  0416  3005               	movlw	5
  3897                           
  3898                           ;prog.c: 477: borders[0]=0;
  3899  0417  01CC               	clrf	TimeEdit@borders^(0+128)
  3900                           
  3901                           ;prog.c: 478: borders[1]=5;
  3902  0418  00CD               	movwf	(TimeEdit@borders^(0+128)+1)
  3903                           
  3904                           ;prog.c: 479: c++;
  3905  0419  0ACE               	incf	TimeEdit@c^(0+128),f
  3906                           
  3907                           ;prog.c: 480: setBlink(0,5,0);
  3908  041A  00A0               	movwf	?_setBlink^(0+128)
  3909  041B  3000               	movlw	0
  3910  041C  01A1               	clrf	(?_setBlink^(0+128)+1)
  3911  041D  262E  120A  118A   	fcall	_setBlink
  3912                           
  3913                           ;prog.c: 481: setBlink(0,3,1);
  3914  0420  3003               	movlw	3
  3915  0421  2D80               	goto	L12
  3916  0422                     l10453:	
  3917                           ;prog.c: 482: }else if(j!=255 && c==4){
  3918                           
  3919  0422  084F               	movf	TimeEdit@j^(0+128),w
  3920  0423  3AFF               	xorlw	255
  3921  0424  1903               	skipnz
  3922  0425  2C65               	goto	l10469
  3923  0426  084E               	movf	TimeEdit@c^(0+128),w
  3924  0427  3A04               	xorlw	4
  3925  0428  1D03               	skipz
  3926  0429  2C65               	goto	l10469
  3927                           
  3928                           ;prog.c: 483: t = t + (j-getDigit(0,3))*10;
  3929  042A  3003               	movlw	3
  3930  042B  00A0               	movwf	?_getDigit^(0+128)
  3931  042C  3000               	movlw	0
  3932  042D  261F  120A  118A   	fcall	_getDigit
  3933  0430  024F               	subwf	TimeEdit@j^(0+128),w
  3934  0431  00A5               	movwf	?___wmul^(0+128)
  3935  0432  01A6               	clrf	(?___wmul^(0+128)+1)
  3936  0433  1C03               	skipc
  3937  0434  03A6               	decf	(?___wmul+1)^(0+128),f
  3938  0435  300A               	movlw	10
  3939  0436  00A7               	movwf	(?___wmul^(0+128)+2)
  3940  0437  01A8               	clrf	((?___wmul+1)^(0+128)+2)
  3941  0438  2677  120A  118A   	fcall	___wmul
  3942  043B  0825               	movf	?___wmul^(0+128),w
  3943  043C  00C0               	movwf	??_TimeEdit^(0+128)
  3944  043D  0826               	movf	(?___wmul+1)^(0+128),w
  3945  043E  00C1               	movwf	(??_TimeEdit^(0+128)+1)
  3946  043F  3000               	movlw	0
  3947  0440  1BC1               	btfsc	(??_TimeEdit^(0+128)+1),7
  3948  0441  30FF               	movlw	255
  3949  0442  00C2               	movwf	(??_TimeEdit^(0+128)+2)
  3950  0443  00C3               	movwf	(??_TimeEdit^(0+128)+3)
  3951  0444  0840               	movf	??_TimeEdit^(0+128),w
  3952  0445  07C8               	addwf	TimeEdit@t^(0+128),f
  3953  0446  0841               	movf	(??_TimeEdit+1)^(0+128),w
  3954  0447  1103               	clrz
  3955  0448  1803               	skipnc
  3956  0449  3E01               	addlw	1
  3957  044A  1D03               	btfss	3,2
  3958  044B  07C9               	addwf	(TimeEdit@t+1)^(0+128),f
  3959  044C  0842               	movf	(??_TimeEdit+2)^(0+128),w
  3960  044D  1103               	clrz
  3961  044E  1803               	skipnc
  3962  044F  3E01               	addlw	1
  3963  0450  1D03               	btfss	3,2
  3964  0451  07CA               	addwf	(TimeEdit@t+2)^(0+128),f
  3965  0452  0843               	movf	(??_TimeEdit+3)^(0+128),w
  3966  0453  1103               	clrz
  3967  0454  1803               	skipnc
  3968  0455  3E01               	addlw	1
  3969  0456  1D03               	btfss	3,2
  3970  0457  07CB               	addwf	(TimeEdit@t+3)^(0+128),f
  3971  0458  3009               	movlw	9
  3972                           
  3973                           ;prog.c: 484: borders[0]=0;
  3974  0459  01CC               	clrf	TimeEdit@borders^(0+128)
  3975                           
  3976                           ;prog.c: 485: borders[1]=9;
  3977  045A  00CD               	movwf	(TimeEdit@borders^(0+128)+1)
  3978  045B  3003               	movlw	3
  3979                           
  3980                           ;prog.c: 486: c++;
  3981  045C  0ACE               	incf	TimeEdit@c^(0+128),f
  3982                           
  3983                           ;prog.c: 487: setBlink(0,3,0);
  3984  045D  00A0               	movwf	?_setBlink^(0+128)
  3985  045E  3000               	movlw	0
  3986  045F  01A1               	clrf	(?_setBlink^(0+128)+1)
  3987  0460  262E  120A  118A   	fcall	_setBlink
  3988                           
  3989                           ;prog.c: 488: setBlink(0,2,1);
  3990  0463  3002               	movlw	2
  3991  0464  2D80               	goto	L12
  3992  0465                     l10469:	
  3993                           ;prog.c: 489: }else if(j!=255 & c==5){
  3994                           
  3995  0465  084F               	movf	TimeEdit@j^(0+128),w
  3996  0466  3AFF               	xorlw	255
  3997  0467  1903               	skipnz
  3998  0468  2CAA               	goto	l10485
  3999  0469  084E               	movf	TimeEdit@c^(0+128),w
  4000  046A  3A05               	xorlw	5
  4001  046B  1D03               	skipz
  4002  046C  2CAA               	goto	l10485
  4003                           
  4004                           ;prog.c: 490: t = t + j-getDigit(0,2);
  4005  046D  3002               	movlw	2
  4006  046E  00A0               	movwf	?_getDigit^(0+128)
  4007  046F  3000               	movlw	0
  4008  0470  261F  120A  118A   	fcall	_getDigit
  4009  0473  00C0               	movwf	??_TimeEdit^(0+128)
  4010  0474  01C1               	clrf	(??_TimeEdit^(0+128)+1)
  4011  0475  01C2               	clrf	(??_TimeEdit^(0+128)+2)
  4012  0476  01C3               	clrf	(??_TimeEdit^(0+128)+3)
  4013  0477  084F               	movf	TimeEdit@j^(0+128),w
  4014  0478  00C4               	movwf	(??_TimeEdit+4)^(0+128)
  4015  0479  01C5               	clrf	((??_TimeEdit+4)^(0+128)+1)
  4016  047A  01C6               	clrf	((??_TimeEdit+4)^(0+128)+2)
  4017  047B  01C7               	clrf	((??_TimeEdit+4)^(0+128)+3)
  4018  047C  0840               	movf	??_TimeEdit^(0+128),w
  4019  047D  02C4               	subwf	(??_TimeEdit+4)^(0+128),f
  4020  047E  0841               	movf	(??_TimeEdit+1)^(0+128),w
  4021  047F  1C03               	skipc
  4022  0480  0F41               	incfsz	(??_TimeEdit+1)^(0+128),w
  4023  0481  02C5               	subwf	((??_TimeEdit+4)^(0+128)+1),f
  4024  0482  0842               	movf	(??_TimeEdit+2)^(0+128),w
  4025  0483  1C03               	skipc
  4026  0484  0F42               	incfsz	(??_TimeEdit+2)^(0+128),w
  4027  0485  02C6               	subwf	((??_TimeEdit+4)^(0+128)+2),f
  4028  0486  0843               	movf	(??_TimeEdit+3)^(0+128),w
  4029  0487  1C03               	skipc
  4030  0488  0F43               	incfsz	(??_TimeEdit+3)^(0+128),w
  4031  0489  02C7               	subwf	((??_TimeEdit+4)^(0+128)+3),f
  4032  048A  0844               	movf	(??_TimeEdit+4)^(0+128),w
  4033  048B  07C8               	addwf	TimeEdit@t^(0+128),f
  4034  048C  0845               	movf	(??_TimeEdit+5)^(0+128),w
  4035  048D  1103               	clrz
  4036  048E  1803               	skipnc
  4037  048F  3E01               	addlw	1
  4038  0490  1D03               	btfss	3,2
  4039  0491  07C9               	addwf	(TimeEdit@t+1)^(0+128),f
  4040  0492  0846               	movf	(??_TimeEdit+6)^(0+128),w
  4041  0493  1103               	clrz
  4042  0494  1803               	skipnc
  4043  0495  3E01               	addlw	1
  4044  0496  1D03               	btfss	3,2
  4045  0497  07CA               	addwf	(TimeEdit@t+2)^(0+128),f
  4046  0498  0847               	movf	(??_TimeEdit+7)^(0+128),w
  4047  0499  1103               	clrz
  4048  049A  1803               	skipnc
  4049  049B  3E01               	addlw	1
  4050  049C  1D03               	btfss	3,2
  4051  049D  07CB               	addwf	(TimeEdit@t+3)^(0+128),f
  4052  049E  3002               	movlw	2
  4053                           
  4054                           ;prog.c: 491: borders[0]=0;
  4055  049F  01CC               	clrf	TimeEdit@borders^(0+128)
  4056                           
  4057                           ;prog.c: 492: borders[1]=2;
  4058  04A0  00CD               	movwf	(TimeEdit@borders^(0+128)+1)
  4059                           
  4060                           ;prog.c: 493: c++;
  4061  04A1  0ACE               	incf	TimeEdit@c^(0+128),f
  4062                           
  4063                           ;prog.c: 494: setBlink(0,2,0);
  4064  04A2  00A0               	movwf	?_setBlink^(0+128)
  4065  04A3  3000               	movlw	0
  4066  04A4  01A1               	clrf	(?_setBlink^(0+128)+1)
  4067  04A5  262E  120A  118A   	fcall	_setBlink
  4068                           
  4069                           ;prog.c: 495: setBlink(1,10,1);
  4070  04A8  300A               	movlw	10
  4071  04A9  2D58               	goto	L16
  4072  04AA                     l10485:	
  4073                           ;prog.c: 496: }
  4074                           
  4075                           
  4076                           ;prog.c: 498: else if(j!=255 && c==6){
  4077  04AA  084F               	movf	TimeEdit@j^(0+128),w
  4078  04AB  3AFF               	xorlw	255
  4079  04AC  1903               	skipnz
  4080  04AD  2CF4               	goto	l10519
  4081  04AE  084E               	movf	TimeEdit@c^(0+128),w
  4082  04AF  3A06               	xorlw	6
  4083  04B0  1D03               	skipz
  4084  04B1  2CF4               	goto	l10519
  4085                           
  4086                           ;prog.c: 499: cDays = (j*16) + getDigit(1,9);
  4087  04B2  084F               	movf	TimeEdit@j^(0+128),w
  4088  04B3  00C0               	movwf	??_TimeEdit^(0+128)
  4089  04B4  0E40               	swapf	??_TimeEdit^(0+128),w
  4090  04B5  39F0               	andlw	240
  4091  04B6  00C0               	movwf	??_TimeEdit^(0+128)
  4092  04B7  3009               	movlw	9
  4093  04B8  00A0               	movwf	?_getDigit^(0+128)
  4094  04B9  3001               	movlw	1
  4095  04BA  261F  120A  118A   	fcall	_getDigit
  4096  04BD  0740               	addwf	??_TimeEdit^(0+128),w
  4097  04BE  1283               	bcf	3,5	;RP0=0, select bank0
  4098  04BF  00E3               	movwf	_cDays
  4099                           
  4100                           ;prog.c: 500: if(j==0){
  4101  04C0  1683               	bsf	3,5	;RP0=1, select bank1
  4102  04C1  08CF               	movf	TimeEdit@j^(0+128),f
  4103  04C2  1D03               	skipz
  4104  04C3  2CDB               	goto	l10501
  4105  04C4  3009               	movlw	9
  4106                           
  4107                           ;prog.c: 501: borders[0]=1;
  4108  04C5  01CC               	clrf	TimeEdit@borders^(0+128)
  4109  04C6  0ACC               	incf	TimeEdit@borders^(0+128),f
  4110                           
  4111                           ;prog.c: 502: borders[1]=9;
  4112  04C7  00CD               	movwf	(TimeEdit@borders^(0+128)+1)
  4113                           
  4114                           ;prog.c: 503: if(getDigit(1,9)==0) setDigit(1,9,1);
  4115  04C8  00A0               	movwf	?_getDigit^(0+128)
  4116  04C9  3001               	movlw	1
  4117  04CA  261F  120A  118A   	fcall	_getDigit
  4118  04CD  3800               	iorlw	0
  4119  04CE  1D03               	skipz
  4120  04CF  2CEA               	goto	l10513
  4121  04D0  3009               	movlw	9
  4122  04D1  00AE               	movwf	?_setDigit^(0+128)
  4123  04D2  3001               	movlw	1
  4124  04D3  01AF               	clrf	(?_setDigit^(0+128)+1)
  4125  04D4  0AAF               	incf	(?_setDigit^(0+128)+1),f
  4126  04D5  160A  118A  265C   	fcall	_setDigit
      +       120A  118A         
  4127  04DA  2CEA               	goto	l10513
  4128  04DB                     l10501:	
  4129  04DB  3003               	movlw	3
  4130  04DC  024F               	subwf	TimeEdit@j^(0+128),w
  4131  04DD  1803               	skipnc
  4132  04DE  2CE3               	goto	l10507
  4133  04DF  3009               	movlw	9
  4134                           
  4135                           ;prog.c: 505: borders[0]=0;
  4136  04E0  01CC               	clrf	TimeEdit@borders^(0+128)
  4137                           
  4138                           ;prog.c: 506: borders[1]=9;
  4139  04E1  00CD               	movwf	(TimeEdit@borders^(0+128)+1)
  4140                           
  4141                           ;prog.c: 507: }else if(j==3){
  4142  04E2  2CEA               	goto	l10513
  4143  04E3                     l10507:	
  4144  04E3  084F               	movf	TimeEdit@j^(0+128),w
  4145  04E4  3A03               	xorlw	3
  4146  04E5  1D03               	skipz
  4147  04E6  2CEA               	goto	l10513
  4148                           
  4149                           ;prog.c: 508: borders[0]=0;
  4150  04E7  01CC               	clrf	TimeEdit@borders^(0+128)
  4151                           
  4152                           ;prog.c: 509: borders[1]=1;
  4153  04E8  01CD               	clrf	(TimeEdit@borders^(0+128)+1)
  4154  04E9  0ACD               	incf	(TimeEdit@borders^(0+128)+1),f
  4155  04EA                     l10513:	
  4156  04EA  300A               	movlw	10
  4157                           
  4158                           ;prog.c: 510: }
  4159                           ;prog.c: 511: c++;
  4160  04EB  0ACE               	incf	TimeEdit@c^(0+128),f
  4161                           
  4162                           ;prog.c: 512: setBlink(1,10,0);
  4163  04EC  00A0               	movwf	?_setBlink^(0+128)
  4164  04ED  3001               	movlw	1
  4165  04EE  01A1               	clrf	(?_setBlink^(0+128)+1)
  4166  04EF  262E  120A  118A   	fcall	_setBlink
  4167                           
  4168                           ;prog.c: 513: setBlink(1,9,1);
  4169  04F2  3009               	movlw	9
  4170  04F3  2D58               	goto	L16
  4171  04F4                     l10519:	
  4172                           ;prog.c: 514: }else if(j!=255 && c==7){
  4173                           
  4174  04F4  084F               	movf	TimeEdit@j^(0+128),w
  4175  04F5  3AFF               	xorlw	255
  4176  04F6  1903               	skipnz
  4177  04F7  2D18               	goto	l10535
  4178  04F8  084E               	movf	TimeEdit@c^(0+128),w
  4179  04F9  3A07               	xorlw	7
  4180  04FA  1D03               	skipz
  4181  04FB  2D18               	goto	l10535
  4182                           
  4183                           ;prog.c: 515: cDays = (getDigit(1,10)*16) + j;
  4184  04FC  300A               	movlw	10
  4185  04FD  00A0               	movwf	?_getDigit^(0+128)
  4186  04FE  3001               	movlw	1
  4187  04FF  261F  120A  118A   	fcall	_getDigit
  4188  0502  00C0               	movwf	??_TimeEdit^(0+128)
  4189  0503  0E40               	swapf	??_TimeEdit^(0+128),w
  4190  0504  39F0               	andlw	240
  4191  0505  00C0               	movwf	??_TimeEdit^(0+128)
  4192  0506  084F               	movf	TimeEdit@j^(0+128),w
  4193  0507  0740               	addwf	??_TimeEdit^(0+128),w
  4194  0508  1283               	bcf	3,5	;RP0=0, select bank0
  4195  0509  00E3               	movwf	_cDays
  4196                           
  4197                           ;prog.c: 516: borders[0]=0;
  4198  050A  1683               	bsf	3,5	;RP0=1, select bank1
  4199  050B  3009               	movlw	9
  4200  050C  01CC               	clrf	TimeEdit@borders^(0+128)
  4201                           
  4202                           ;prog.c: 517: borders[1]=1;
  4203  050D  01CD               	clrf	(TimeEdit@borders^(0+128)+1)
  4204  050E  0ACD               	incf	(TimeEdit@borders^(0+128)+1),f
  4205                           
  4206                           ;prog.c: 518: c++;
  4207  050F  0ACE               	incf	TimeEdit@c^(0+128),f
  4208                           
  4209                           ;prog.c: 519: setBlink(1,9,0);
  4210  0510  00A0               	movwf	?_setBlink^(0+128)
  4211  0511  3001               	movlw	1
  4212  0512  01A1               	clrf	(?_setBlink^(0+128)+1)
  4213  0513  262E  120A  118A   	fcall	_setBlink
  4214                           
  4215                           ;prog.c: 520: setBlink(1,7,1);
  4216  0516  3007               	movlw	7
  4217  0517  2D58               	goto	L16
  4218  0518                     l10535:	
  4219                           ;prog.c: 521: }else if(j!=255 && c==8){
  4220                           
  4221  0518  084F               	movf	TimeEdit@j^(0+128),w
  4222  0519  3AFF               	xorlw	255
  4223  051A  1903               	skipnz
  4224  051B  2D5C               	goto	l10563
  4225  051C  084E               	movf	TimeEdit@c^(0+128),w
  4226  051D  3A08               	xorlw	8
  4227  051E  1D03               	skipz
  4228  051F  2D5C               	goto	l10563
  4229                           
  4230                           ;prog.c: 522: cMonths = (j*16) + getDigit(1,6);
  4231  0520  084F               	movf	TimeEdit@j^(0+128),w
  4232  0521  00C0               	movwf	??_TimeEdit^(0+128)
  4233  0522  0E40               	swapf	??_TimeEdit^(0+128),w
  4234  0523  39F0               	andlw	240
  4235  0524  00C0               	movwf	??_TimeEdit^(0+128)
  4236  0525  3006               	movlw	6
  4237  0526  00A0               	movwf	?_getDigit^(0+128)
  4238  0527  3001               	movlw	1
  4239  0528  261F  120A  118A   	fcall	_getDigit
  4240  052B  0740               	addwf	??_TimeEdit^(0+128),w
  4241  052C  1283               	bcf	3,5	;RP0=0, select bank0
  4242  052D  00E4               	movwf	_cMonths
  4243                           
  4244                           ;prog.c: 523: if(j==0){
  4245  052E  1683               	bsf	3,5	;RP0=1, select bank1
  4246  052F  08CF               	movf	TimeEdit@j^(0+128),f
  4247  0530  1D03               	skipz
  4248  0531  2D4A               	goto	l10551
  4249  0532  3009               	movlw	9
  4250                           
  4251                           ;prog.c: 524: borders[0]=1;
  4252  0533  01CC               	clrf	TimeEdit@borders^(0+128)
  4253  0534  0ACC               	incf	TimeEdit@borders^(0+128),f
  4254                           
  4255                           ;prog.c: 525: borders[1]=9;
  4256  0535  00CD               	movwf	(TimeEdit@borders^(0+128)+1)
  4257                           
  4258                           ;prog.c: 526: if(getDigit(1,7)==0) setDigit(1,6,1);
  4259  0536  3007               	movlw	7
  4260  0537  00A0               	movwf	?_getDigit^(0+128)
  4261  0538  3001               	movlw	1
  4262  0539  261F  120A  118A   	fcall	_getDigit
  4263  053C  3800               	iorlw	0
  4264  053D  1D03               	skipz
  4265  053E  2D4F               	goto	l10557
  4266  053F  3006               	movlw	6
  4267  0540  00AE               	movwf	?_setDigit^(0+128)
  4268  0541  3001               	movlw	1
  4269  0542  01AF               	clrf	(?_setDigit^(0+128)+1)
  4270  0543  0AAF               	incf	(?_setDigit^(0+128)+1),f
  4271  0544  160A  118A  265C   	fcall	_setDigit
      +       120A  118A         
  4272  0549  2D4F               	goto	l10557
  4273  054A                     l10551:	
  4274  054A  0B4F               	decfsz	TimeEdit@j^(0+128),w
  4275  054B  2D4F               	goto	l10557
  4276  054C  3002               	movlw	2
  4277                           
  4278                           ;prog.c: 528: borders[0]=0;
  4279  054D  01CC               	clrf	TimeEdit@borders^(0+128)
  4280                           
  4281                           ;prog.c: 529: borders[1]=2;
  4282  054E  00CD               	movwf	(TimeEdit@borders^(0+128)+1)
  4283  054F                     l10557:	
  4284  054F  3007               	movlw	7
  4285                           
  4286                           ;prog.c: 530: }
  4287                           ;prog.c: 531: c++;
  4288  0550  0ACE               	incf	TimeEdit@c^(0+128),f
  4289                           
  4290                           ;prog.c: 532: setBlink(1,7,0);
  4291  0551  00A0               	movwf	?_setBlink^(0+128)
  4292  0552  3001               	movlw	1
  4293  0553  01A1               	clrf	(?_setBlink^(0+128)+1)
  4294  0554  262E  120A  118A   	fcall	_setBlink
  4295                           
  4296                           ;prog.c: 533: setBlink(1,6,1);
  4297  0557  3006               	movlw	6
  4298  0558                     L16:	
  4299  0558  1683               	bsf	3,5	;RP0=1, select bank1
  4300  0559  00A0               	movwf	?_setBlink^(0+128)
  4301  055A  3001               	movlw	1
  4302  055B  2D83               	goto	L13
  4303  055C                     l10563:	
  4304                           ;prog.c: 534: }else if(j!=255 && c==9){
  4305                           
  4306  055C  084F               	movf	TimeEdit@j^(0+128),w
  4307  055D  3AFF               	xorlw	255
  4308  055E  1903               	skipnz
  4309  055F  2D88               	goto	l10579
  4310  0560  084E               	movf	TimeEdit@c^(0+128),w
  4311  0561  3A09               	xorlw	9
  4312  0562  1D03               	skipz
  4313  0563  2D88               	goto	l10579
  4314                           
  4315                           ;prog.c: 535: cMonths = (getDigit(1,7)*16) + j;
  4316  0564  3007               	movlw	7
  4317  0565  00A0               	movwf	?_getDigit^(0+128)
  4318  0566  3001               	movlw	1
  4319  0567  261F  120A  118A   	fcall	_getDigit
  4320  056A  00C0               	movwf	??_TimeEdit^(0+128)
  4321  056B  0E40               	swapf	??_TimeEdit^(0+128),w
  4322  056C  39F0               	andlw	240
  4323  056D  00C0               	movwf	??_TimeEdit^(0+128)
  4324  056E  084F               	movf	TimeEdit@j^(0+128),w
  4325  056F  0740               	addwf	??_TimeEdit^(0+128),w
  4326  0570  1283               	bcf	3,5	;RP0=0, select bank0
  4327  0571  00E4               	movwf	_cMonths
  4328                           
  4329                           ;prog.c: 536: borders[0]=0;
  4330  0572  1683               	bsf	3,5	;RP0=1, select bank1
  4331  0573  3009               	movlw	9
  4332  0574  01CC               	clrf	TimeEdit@borders^(0+128)
  4333                           
  4334                           ;prog.c: 537: borders[1]=9;
  4335  0575  00CD               	movwf	(TimeEdit@borders^(0+128)+1)
  4336                           
  4337                           ;prog.c: 538: c = 2;
  4338  0576  3002               	movlw	2
  4339  0577  00CE               	movwf	TimeEdit@c^(0+128)
  4340                           
  4341                           ;prog.c: 541: setBlink(1,6,0);
  4342  0578  3006               	movlw	6
  4343  0579  00A0               	movwf	?_setBlink^(0+128)
  4344  057A  3001               	movlw	1
  4345  057B                     L11:	
  4346  057B  01A1               	clrf	(?_setBlink^(0+128)+1)
  4347  057C  262E  120A  118A   	fcall	_setBlink
  4348                           
  4349                           ;prog.c: 542: setBlink(0,6,1);
  4350  057F  3006               	movlw	6
  4351  0580                     L12:	
  4352  0580  1683               	bsf	3,5	;RP0=1, select bank1
  4353  0581  00A0               	movwf	?_setBlink^(0+128)
  4354  0582  3000               	movlw	0
  4355  0583                     L13:	
  4356  0583  01A1               	clrf	(?_setBlink^(0+128)+1)
  4357  0584  0AA1               	incf	(?_setBlink^(0+128)+1),f
  4358  0585  262E  120A  118A   	fcall	_setBlink
  4359  0588                     l10579:	
  4360                           
  4361                           ;prog.c: 557: }
  4362                           ;prog.c: 559: if(KeyCode==44){
  4363  0588  1683               	bsf	3,5	;RP0=1, select bank1
  4364  0589  086F               	movf	_KeyCode^(0+128),w	;volatile
  4365  058A  3A2C               	xorlw	44
  4366  058B  1D03               	skipz
  4367  058C  2DD2               	goto	l10617
  4368                           
  4369                           ;prog.c: 560: KeyCode = 0;
  4370  058D  01EF               	clrf	_KeyCode^(0+128)	;volatile
  4371                           
  4372                           ;prog.c: 561: clrInd();
  4373  058E  2690  120A  118A   	fcall	_clrInd
  4374                           
  4375                           ;prog.c: 562: if(c==1){
  4376  0591  1683               	bsf	3,5	;RP0=1, select bank1
  4377  0592  0B4E               	decfsz	TimeEdit@c^(0+128),w
  4378  0593  2DAA               	goto	l10597
  4379                           
  4380                           ;prog.c: 563: c = 2;
  4381  0594  3002               	movlw	2
  4382  0595  00CE               	movwf	TimeEdit@c^(0+128)
  4383  0596  3002               	movlw	2
  4384                           
  4385                           ;prog.c: 564: borders[0]=0;
  4386  0597  01CC               	clrf	TimeEdit@borders^(0+128)
  4387                           
  4388                           ;prog.c: 565: borders[1]=2;
  4389  0598  00CD               	movwf	(TimeEdit@borders^(0+128)+1)
  4390                           
  4391                           ;prog.c: 566: setBlink(0,8,0);
  4392  0599  3008               	movlw	8
  4393  059A  00A0               	movwf	?_setBlink^(0+128)
  4394  059B  3000               	movlw	0
  4395  059C  01A1               	clrf	(?_setBlink^(0+128)+1)
  4396  059D  262E  120A  118A   	fcall	_setBlink
  4397                           
  4398                           ;prog.c: 567: setBlink(0,6,1);
  4399  05A0  3006               	movlw	6
  4400  05A1  1683               	bsf	3,5	;RP0=1, select bank1
  4401  05A2  00A0               	movwf	?_setBlink^(0+128)
  4402  05A3  3000               	movlw	0
  4403  05A4  01A1               	clrf	(?_setBlink^(0+128)+1)
  4404  05A5  0AA1               	incf	(?_setBlink^(0+128)+1),f
  4405  05A6  262E  120A  118A   	fcall	_setBlink
  4406                           
  4407                           ;prog.c: 568: }else if(c>1 && c<6){
  4408  05A9  2E10               	goto	l10635
  4409  05AA                     l10597:	
  4410  05AA  3002               	movlw	2
  4411  05AB  024E               	subwf	TimeEdit@c^(0+128),w
  4412  05AC  3006               	movlw	6
  4413  05AD  1C03               	skipc
  4414  05AE  2DC0               	goto	L18
  4415  05AF  024E               	subwf	TimeEdit@c^(0+128),w
  4416                           
  4417                           ;prog.c: 569: c = 6;
  4418  05B0  3006               	movlw	6
  4419  05B1  1803               	skipnc
  4420  05B2  2DC0               	goto	L18
  4421  05B3  00CE               	movwf	TimeEdit@c^(0+128)
  4422  05B4  3003               	movlw	3
  4423                           
  4424                           ;prog.c: 570: borders[0]=0;
  4425  05B5  01CC               	clrf	TimeEdit@borders^(0+128)
  4426                           
  4427                           ;prog.c: 571: borders[1]=3;
  4428  05B6  00CD               	movwf	(TimeEdit@borders^(0+128)+1)
  4429                           
  4430                           ;prog.c: 572: setBlink(1,10,1);
  4431  05B7  300A               	movlw	10
  4432  05B8  00A0               	movwf	?_setBlink^(0+128)
  4433  05B9  3001               	movlw	1
  4434  05BA  01A1               	clrf	(?_setBlink^(0+128)+1)
  4435  05BB  0AA1               	incf	(?_setBlink^(0+128)+1),f
  4436  05BC  262E  120A  118A   	fcall	_setBlink
  4437                           
  4438                           ;prog.c: 573: }else if(c>5){
  4439  05BF  2E10               	goto	l10635
  4440  05C0                     L18:	
  4441  05C0  024E               	subwf	TimeEdit@c^(0+128),w
  4442  05C1  1C03               	skipc
  4443  05C2  2E10               	goto	l10635
  4444  05C3  3007               	movlw	7
  4445                           
  4446                           ;prog.c: 574: c = 1;
  4447  05C4  01CE               	clrf	TimeEdit@c^(0+128)
  4448  05C5  0ACE               	incf	TimeEdit@c^(0+128),f
  4449                           
  4450                           ;prog.c: 575: borders[0]=1;
  4451  05C6  01CC               	clrf	TimeEdit@borders^(0+128)
  4452  05C7  0ACC               	incf	TimeEdit@borders^(0+128),f
  4453                           
  4454                           ;prog.c: 576: borders[1]=7;
  4455  05C8  00CD               	movwf	(TimeEdit@borders^(0+128)+1)
  4456                           
  4457                           ;prog.c: 577: setBlink(0,8,1);
  4458  05C9  3008               	movlw	8
  4459  05CA  00A0               	movwf	?_setBlink^(0+128)
  4460  05CB  3000               	movlw	0
  4461  05CC  01A1               	clrf	(?_setBlink^(0+128)+1)
  4462  05CD  0AA1               	incf	(?_setBlink^(0+128)+1),f
  4463  05CE  262E  120A  118A   	fcall	_setBlink
  4464  05D1  2E10               	goto	l10635
  4465  05D2                     l10617:	
  4466                           ;prog.c: 578: }
  4467                           ;prog.c: 579: }else if(KeyCode==43){
  4468                           
  4469  05D2  086F               	movf	_KeyCode^(0+128),w	;volatile
  4470  05D3  3A2B               	xorlw	43
  4471  05D4  1D03               	skipz
  4472  05D5  2DD8               	goto	l10625
  4473                           
  4474                           ;prog.c: 580: KeyCode = 0;
  4475  05D6  01EF               	clrf	_KeyCode^(0+128)	;volatile
  4476                           
  4477                           ;prog.c: 583: }else if(KeyCode==42){
  4478  05D7  2E0A               	goto	l10621
  4479  05D8                     l10625:	
  4480  05D8  086F               	movf	_KeyCode^(0+128),w	;volatile
  4481  05D9  3A2A               	xorlw	42
  4482  05DA  1D03               	skipz
  4483  05DB  2E10               	goto	l10635
  4484                           
  4485                           ;prog.c: 584: KeyCode = 0;
  4486  05DC  01EF               	clrf	_KeyCode^(0+128)	;volatile
  4487                           
  4488                           ;prog.c: 585: WriteTime(getDigit(0,3)*16 + getDigit(0,2), getDigit(0,6)*16 + getDigit(0,
      +                          5), getDigit(0,8));
  4489  05DD  3006               	movlw	6
  4490  05DE  00A0               	movwf	?_getDigit^(0+128)
  4491  05DF  3000               	movlw	0
  4492  05E0  261F  120A  118A   	fcall	_getDigit
  4493  05E3  00C0               	movwf	??_TimeEdit^(0+128)
  4494  05E4  0E40               	swapf	??_TimeEdit^(0+128),w
  4495  05E5  39F0               	andlw	240
  4496  05E6  00C0               	movwf	??_TimeEdit^(0+128)
  4497  05E7  3005               	movlw	5
  4498  05E8  00A0               	movwf	?_getDigit^(0+128)
  4499  05E9  3000               	movlw	0
  4500  05EA  261F  120A  118A   	fcall	_getDigit
  4501  05ED  0740               	addwf	??_TimeEdit^(0+128),w
  4502  05EE  00AC               	movwf	?_WriteTime^(0+128)
  4503  05EF  3008               	movlw	8
  4504  05F0  00A0               	movwf	?_getDigit^(0+128)
  4505  05F1  3000               	movlw	0
  4506  05F2  261F  120A  118A   	fcall	_getDigit
  4507  05F5  00AD               	movwf	(?_WriteTime^(0+128)+1)
  4508  05F6  3003               	movlw	3
  4509  05F7  00A0               	movwf	?_getDigit^(0+128)
  4510  05F8  3000               	movlw	0
  4511  05F9  261F  120A  118A   	fcall	_getDigit
  4512  05FC  00C1               	movwf	(??_TimeEdit+1)^(0+128)
  4513  05FD  0E41               	swapf	(??_TimeEdit+1)^(0+128),w
  4514  05FE  39F0               	andlw	240
  4515  05FF  00C1               	movwf	(??_TimeEdit+1)^(0+128)
  4516  0600  3002               	movlw	2
  4517  0601  00A0               	movwf	?_getDigit^(0+128)
  4518  0602  3000               	movlw	0
  4519  0603  261F               	fcall	_getDigit
  4520  0604  0741               	addwf	(??_TimeEdit+1)^(0+128),w
  4521  0605  160A  158A  231D   	fcall	_WriteTime
      +       120A  118A         
  4522  060A                     l10621:	
  4523                           
  4524                           ;prog.c: 581: clrInd();
  4525  060A  2690               	fcall	_clrInd
  4526                           
  4527                           ;prog.c: 582: main2();
  4528  060B  160A  158A  2490   	fcall	_main2
      +       120A  118A         
  4529  0610                     l10635:	
  4530                           
  4531                           ;prog.c: 588: }
  4532                           ;prog.c: 589: ReIndTimeEdit(t);
  4533  0610  1683               	bsf	3,5	;RP0=1, select bank1
  4534  0611  084B               	movf	(TimeEdit@t+3)^(0+128),w
  4535  0612  00BB               	movwf	(?_ReIndTimeEdit+3)^(0+128)
  4536  0613  084A               	movf	(TimeEdit@t+2)^(0+128),w
  4537  0614  00BA               	movwf	(?_ReIndTimeEdit+2)^(0+128)
  4538  0615  0849               	movf	(TimeEdit@t+1)^(0+128),w
  4539  0616  00B9               	movwf	(?_ReIndTimeEdit+1)^(0+128)
  4540  0617  0848               	movf	TimeEdit@t^(0+128),w
  4541  0618  00B8               	movwf	?_ReIndTimeEdit^(0+128)
  4542  0619  160A  118A  2530   	fcall	_ReIndTimeEdit
      +       120A  118A         
  4543  061E  2B15               	goto	l917
  4544  061F                     __ptext2292:	
  4545 ;; =============== function _setDigit ends ============
  4546                           
  4547                           
  4548 ;; *************** function _getDigit *****************
  4549 ;; Defined at:
  4550 ;;		line 90 in file "prog.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;  line            1    wreg     unsigned char 
  4553 ;;  symbol          1    0[BANK1 ] unsigned char 
  4554 ;; Auto vars:     Size  Location     Type
  4555 ;;  line            1    4[BANK1 ] unsigned char 
  4556 ;; Return value:  Size  Location     Type
  4557 ;;                  1    wreg      unsigned char 
  4558 ;; Registers used:
  4559 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4560 ;; Tracked objects:
  4561 ;;		On entry : 60/120
  4562 ;;		On exit  : 160/120
  4563 ;;		Unchanged: FFE9F/0
  4564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4565 ;;      Params:         0       0       1       0       0
  4566 ;;      Locals:         0       0       1       0       0
  4567 ;;      Temps:          0       0       3       0       0
  4568 ;;      Totals:         0       0       5       0       0
  4569 ;;Total ram usage:        5 bytes
  4570 ;; Hardware stack levels used:    1
  4571 ;; Hardware stack levels required when called:    4
  4572 ;; This function calls:
  4573 ;;		Nothing
  4574 ;; This function is called by:
  4575 ;;		_TimeEdit
  4576 ;;		_getBorderUp
  4577 ;;		_EditSchedule
  4578 ;; This function uses a non-reentrant model
  4579 ;;
  4580  061F                     _getDigit:	
  4581                           
  4582 ;; hardware stack exceeded
  4583                           ; Regs used in _getDigit: [wreg-fsr0h+status,2+status,0]
  4584                           ;getDigit@line stored from wreg
  4585  061F  00A4               	movwf	getDigit@line^(0+128)
  4586                           
  4587                           ;prog.c: 91: return (digits[line][symbol-1] & 0b01111111);
  4588  0620  00A1               	movwf	??_getDigit^(0+128)
  4589  0621  0E21               	swapf	??_getDigit^(0+128),w
  4590  0622  39F0               	andlw	240
  4591  0623  00A1               	movwf	??_getDigit^(0+128)
  4592  0624  3E0F               	addlw	(_digits+255)& (0+255)
  4593  0625  00A2               	movwf	(??_getDigit+1)^(0+128)
  4594  0626  0820               	movf	getDigit@symbol^(0+128),w
  4595  0627  0722               	addwf	(??_getDigit+1)^(0+128),w
  4596  0628  00A3               	movwf	(??_getDigit+2)^(0+128)
  4597  0629  0084               	movwf	4
  4598  062A  1783               	bsf	3,7	;select IRP bank2
  4599  062B  0800               	movf	0,w
  4600  062C  397F               	andlw	127
  4601  062D  0008               	return
  4602  062E                     __end_of_getDigit:	
  4603  062E                     __ptext2290:	
  4604 ;; =============== function _clrInd ends ============
  4605                           
  4606                           
  4607 ;; *************** function _setBlink *****************
  4608 ;; Defined at:
  4609 ;;		line 102 in file "prog.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;  line            1    wreg     unsigned char 
  4612 ;;  symbol          1    0[BANK1 ] unsigned char 
  4613 ;;  value           1    1[BANK1 ] unsigned char 
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;  line            1    6[BANK1 ] unsigned char 
  4616 ;;  value0          1    5[BANK1 ] unsigned char 
  4617 ;; Return value:  Size  Location     Type
  4618 ;;		None               void
  4619 ;; Registers used:
  4620 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4621 ;; Tracked objects:
  4622 ;;		On entry : 60/120
  4623 ;;		On exit  : 140/100
  4624 ;;		Unchanged: FFE9F/0
  4625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4626 ;;      Params:         0       0       2       0       0
  4627 ;;      Locals:         0       0       2       0       0
  4628 ;;      Temps:          0       0       3       0       0
  4629 ;;      Totals:         0       0       7       0       0
  4630 ;;Total ram usage:        7 bytes
  4631 ;; Hardware stack levels used:    1
  4632 ;; Hardware stack levels required when called:    4
  4633 ;; This function calls:
  4634 ;;		Nothing
  4635 ;; This function is called by:
  4636 ;;		_TimeEdit
  4637 ;;		_EditSchedule
  4638 ;; This function uses a non-reentrant model
  4639 ;;
  4640  062E                     _setBlink:	
  4641                           
  4642                           ; Regs used in _setBlink: [wreg-fsr0h+status,2+status,0]
  4643                           ;setBlink@line stored from wreg
  4644  062E  00A6               	movwf	setBlink@line^(0+128)
  4645                           
  4646                           ;prog.c: 103: unsigned char value0 = digits[line][symbol-1];
  4647  062F  00A2               	movwf	??_setBlink^(0+128)
  4648  0630  0E22               	swapf	??_setBlink^(0+128),w
  4649  0631  39F0               	andlw	240
  4650  0632  00A2               	movwf	??_setBlink^(0+128)
  4651  0633  3E0F               	addlw	(_digits+255)& (0+255)
  4652  0634  00A3               	movwf	(??_setBlink+1)^(0+128)
  4653  0635  0820               	movf	setBlink@symbol^(0+128),w
  4654  0636  0723               	addwf	(??_setBlink+1)^(0+128),w
  4655  0637  00A4               	movwf	(??_setBlink+2)^(0+128)
  4656  0638  0084               	movwf	4
  4657  0639  1783               	bsf	3,7	;select IRP bank2
  4658  063A  0800               	movf	0,w
  4659  063B  00A5               	movwf	setBlink@value0^(0+128)
  4660                           
  4661                           ;prog.c: 104: if(value > 0){
  4662  063C  0821               	movf	setBlink@value^(0+128),w
  4663  063D  1903               	btfsc	3,2
  4664  063E  2E4C               	goto	l9649
  4665                           
  4666                           ;prog.c: 105: digits[line][symbol-1] |= 0b10000000;
  4667  063F  0826               	movf	setBlink@line^(0+128),w
  4668  0640  00A2               	movwf	??_setBlink^(0+128)
  4669  0641  0E22               	swapf	??_setBlink^(0+128),w
  4670  0642  39F0               	andlw	240
  4671  0643  00A2               	movwf	??_setBlink^(0+128)
  4672  0644  3E0F               	addlw	(_digits+255)& (0+255)
  4673  0645  00A3               	movwf	(??_setBlink+1)^(0+128)
  4674  0646  0820               	movf	setBlink@symbol^(0+128),w
  4675  0647  0723               	addwf	(??_setBlink+1)^(0+128),w
  4676  0648  00A4               	movwf	(??_setBlink+2)^(0+128)
  4677  0649  0084               	movwf	4
  4678  064A  1780               	bsf	0,7
  4679                           
  4680                           ;prog.c: 106: }else{
  4681  064B  2E58               	goto	l738
  4682  064C                     l9649:	
  4683                           
  4684                           ;prog.c: 107: digits[line][symbol-1] &= 0b01111111;
  4685  064C  0826               	movf	setBlink@line^(0+128),w
  4686  064D  00A2               	movwf	??_setBlink^(0+128)
  4687  064E  0E22               	swapf	??_setBlink^(0+128),w
  4688  064F  39F0               	andlw	240
  4689  0650  00A2               	movwf	??_setBlink^(0+128)
  4690  0651  3E0F               	addlw	(_digits+255)& (0+255)
  4691  0652  00A3               	movwf	(??_setBlink+1)^(0+128)
  4692  0653  0820               	movf	setBlink@symbol^(0+128),w
  4693  0654  0723               	addwf	(??_setBlink+1)^(0+128),w
  4694  0655  00A4               	movwf	(??_setBlink+2)^(0+128)
  4695  0656  0084               	movwf	4
  4696  0657  1380               	bcf	0,7
  4697  0658                     l738:	
  4698                           
  4699                           ;prog.c: 108: }
  4700                           ;prog.c: 109: if(digits[line][symbol-1] != value0){
  4701  0658  0826               	movf	setBlink@line^(0+128),w
  4702  0659  00A2               	movwf	??_setBlink^(0+128)
  4703  065A  0E22               	swapf	??_setBlink^(0+128),w
  4704  065B  39F0               	andlw	240
  4705  065C  00A2               	movwf	??_setBlink^(0+128)
  4706  065D  3E0F               	addlw	(_digits+255)& (0+255)
  4707  065E  00A3               	movwf	(??_setBlink+1)^(0+128)
  4708  065F  0820               	movf	setBlink@symbol^(0+128),w
  4709  0660  0723               	addwf	(??_setBlink+1)^(0+128),w
  4710  0661  00A4               	movwf	(??_setBlink+2)^(0+128)
  4711  0662  0084               	movwf	4
  4712  0663  0800               	movf	0,w
  4713  0664  0625               	xorwf	setBlink@value0^(0+128),w
  4714  0665  1903               	skipnz
  4715  0666  0008               	return
  4716                           
  4717                           ;prog.c: 110: modifide_digits[line][symbol-1] = 1;
  4718  0667  0826               	movf	setBlink@line^(0+128),w
  4719  0668  00A2               	movwf	??_setBlink^(0+128)
  4720  0669  0E22               	swapf	??_setBlink^(0+128),w
  4721  066A  39F0               	andlw	240
  4722  066B  00A2               	movwf	??_setBlink^(0+128)
  4723  066C  3E2F               	addlw	(_modifide_digits+255)& (0+255)
  4724  066D  00A3               	movwf	(??_setBlink+1)^(0+128)
  4725  066E  0820               	movf	setBlink@symbol^(0+128),w
  4726  066F  0723               	addwf	(??_setBlink+1)^(0+128),w
  4727  0670  00A4               	movwf	(??_setBlink+2)^(0+128)
  4728  0671  0084               	movwf	4
  4729  0672  3001               	movlw	1
  4730  0673  0080               	movwf	0
  4731                           
  4732                           ;prog.c: 111: IsLCDModified = 1;
  4733  0674  1283               	bcf	3,5	;RP0=0, select bank0
  4734  0675  14DD               	bsf	_IsLCDModified/(0+8),_IsLCDModified& (0+7)
  4735  0676  0008               	return
  4736  0677                     __end_of_setBlink:	
  4737  0677                     __ptext2276:	
  4738 ;; =============== function ___lwdiv ends ============
  4739                           
  4740                           
  4741 ;; *************** function ___wmul *****************
  4742 ;; Defined at:
  4743 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\wmul.c"
  4744 ;; Parameters:    Size  Location     Type
  4745 ;;  multiplier      2    5[BANK1 ] unsigned int 
  4746 ;;  multiplicand    2    7[BANK1 ] unsigned int 
  4747 ;; Auto vars:     Size  Location     Type
  4748 ;;  product         2    9[BANK1 ] unsigned int 
  4749 ;; Return value:  Size  Location     Type
  4750 ;;                  2    5[BANK1 ] unsigned int 
  4751 ;; Registers used:
  4752 ;;		wreg, status,2, status,0
  4753 ;; Tracked objects:
  4754 ;;		On entry : 160/120
  4755 ;;		On exit  : 160/120
  4756 ;;		Unchanged: FFE9F/0
  4757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4758 ;;      Params:         0       0       4       0       0
  4759 ;;      Locals:         0       0       2       0       0
  4760 ;;      Temps:          0       0       0       0       0
  4761 ;;      Totals:         0       0       6       0       0
  4762 ;;Total ram usage:        6 bytes
  4763 ;; Hardware stack levels used:    1
  4764 ;; Hardware stack levels required when called:    4
  4765 ;; This function calls:
  4766 ;;		Nothing
  4767 ;; This function is called by:
  4768 ;;		_TimeEdit
  4769 ;;		_EditSchedule
  4770 ;; This function uses a non-reentrant model
  4771 ;;
  4772  0677                     ___wmul:	
  4773                           
  4774                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4775  0677  01A9               	clrf	___wmul@product^(0+128)
  4776  0678  01AA               	clrf	(___wmul@product+1)^(0+128)
  4777  0679                     l9867:	
  4778  0679  1C25               	btfss	___wmul@multiplier^(0+128),0
  4779  067A  2E81               	goto	l9871
  4780  067B  0827               	movf	___wmul@multiplicand^(0+128),w
  4781  067C  07A9               	addwf	___wmul@product^(0+128),f
  4782  067D  1803               	skipnc
  4783  067E  0AAA               	incf	(___wmul@product+1)^(0+128),f
  4784  067F  0828               	movf	(___wmul@multiplicand+1)^(0+128),w
  4785  0680  07AA               	addwf	(___wmul@product+1)^(0+128),f
  4786  0681                     l9871:	
  4787  0681  1003               	clrc
  4788  0682  0DA7               	rlf	___wmul@multiplicand^(0+128),f
  4789  0683  0DA8               	rlf	(___wmul@multiplicand+1)^(0+128),f
  4790  0684  1003               	clrc
  4791  0685  0CA6               	rrf	(___wmul@multiplier+1)^(0+128),f
  4792  0686  0CA5               	rrf	___wmul@multiplier^(0+128),f
  4793  0687  0826               	movf	(___wmul@multiplier+1)^(0+128),w
  4794  0688  0425               	iorwf	___wmul@multiplier^(0+128),w
  4795  0689  1D03               	skipz
  4796  068A  2E79               	goto	l9867
  4797  068B  082A               	movf	(___wmul@product+1)^(0+128),w
  4798  068C  00A6               	movwf	(?___wmul+1)^(0+128)
  4799  068D  0829               	movf	___wmul@product^(0+128),w
  4800  068E  00A5               	movwf	?___wmul^(0+128)
  4801  068F  0008               	return
  4802  0690                     __end_of___wmul:	
  4803  0690                     __ptext2289:	
  4804 ;; =============== function _entNum ends ============
  4805                           
  4806                           
  4807 ;; *************** function _clrInd *****************
  4808 ;; Defined at:
  4809 ;;		line 114 in file "prog.c"
  4810 ;; Parameters:    Size  Location     Type
  4811 ;;		None
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;  a               1    4[BANK1 ] unsigned char 
  4814 ;;  b               1    3[BANK1 ] unsigned char 
  4815 ;; Return value:  Size  Location     Type
  4816 ;;		None               void
  4817 ;; Registers used:
  4818 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 160/100
  4822 ;;		Unchanged: FFE9F/0
  4823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4824 ;;      Params:         0       0       0       0       0
  4825 ;;      Locals:         0       0       2       0       0
  4826 ;;      Temps:          0       0       3       0       0
  4827 ;;      Totals:         0       0       5       0       0
  4828 ;;Total ram usage:        5 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; Hardware stack levels required when called:    4
  4831 ;; This function calls:
  4832 ;;		Nothing
  4833 ;; This function is called by:
  4834 ;;		_NumericToIndicator
  4835 ;;		_TimeToInd
  4836 ;;		_TimeEdit
  4837 ;;		_EditSchedule
  4838 ;;		_Scheduler
  4839 ;;		_main
  4840 ;;		_main2
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843  0690                     _clrInd:	
  4844  0690                     l9655:	
  4845                           ; Regs used in _clrInd: [wreg-fsr0h+status,2+status,0]
  4846                           
  4847                           
  4848                           ;prog.c: 115: for(char b = 0; b < 2; b++){
  4849  0690  1683               	bsf	3,5	;RP0=1, select bank1
  4850  0691  1303               	bcf	3,6	;RP1=0, select bank1
  4851  0692  01A3               	clrf	clrInd@b^(0+128)
  4852  0693                     l9661:	
  4853                           
  4854                           ;prog.c: 116: for(char a = 0; a < 16; a++){
  4855  0693  01A4               	clrf	clrInd@a^(0+128)
  4856  0694                     l9667:	
  4857                           
  4858                           ;prog.c: 117: modifide_digits[b][a] = 1;
  4859  0694  0823               	movf	clrInd@b^(0+128),w
  4860  0695  00A0               	movwf	??_clrInd^(0+128)
  4861  0696  0E20               	swapf	??_clrInd^(0+128),w
  4862  0697  39F0               	andlw	240
  4863  0698  00A0               	movwf	??_clrInd^(0+128)
  4864  0699  3E30               	addlw	_modifide_digits& (0+255)
  4865  069A  00A1               	movwf	(??_clrInd+1)^(0+128)
  4866  069B  0824               	movf	clrInd@a^(0+128),w
  4867  069C  0721               	addwf	(??_clrInd+1)^(0+128),w
  4868  069D  00A2               	movwf	(??_clrInd+2)^(0+128)
  4869  069E  0084               	movwf	4
  4870  069F  3001               	movlw	1
  4871  06A0  1783               	bsf	3,7	;select IRP bank2
  4872  06A1  0080               	movwf	0
  4873                           
  4874                           ;prog.c: 118: digits[b][a] = 34;
  4875  06A2  0823               	movf	clrInd@b^(0+128),w
  4876  06A3  00A0               	movwf	??_clrInd^(0+128)
  4877  06A4  0E20               	swapf	??_clrInd^(0+128),w
  4878  06A5  39F0               	andlw	240
  4879  06A6  00A0               	movwf	??_clrInd^(0+128)
  4880  06A7  3E10               	addlw	_digits& (0+255)
  4881  06A8  00A1               	movwf	(??_clrInd+1)^(0+128)
  4882  06A9  0824               	movf	clrInd@a^(0+128),w
  4883  06AA  0721               	addwf	(??_clrInd+1)^(0+128),w
  4884  06AB  00A2               	movwf	(??_clrInd+2)^(0+128)
  4885  06AC  0084               	movwf	4
  4886  06AD  3022               	movlw	34
  4887  06AE  0080               	movwf	0
  4888  06AF  3010               	movlw	16
  4889  06B0  0AA4               	incf	clrInd@a^(0+128),f
  4890  06B1  0224               	subwf	clrInd@a^(0+128),w
  4891  06B2  1C03               	skipc
  4892  06B3  2E94               	goto	l9667
  4893  06B4  3002               	movlw	2
  4894  06B5  0AA3               	incf	clrInd@b^(0+128),f
  4895  06B6  0223               	subwf	clrInd@b^(0+128),w
  4896  06B7  1C03               	skipc
  4897  06B8  2E93               	goto	l9661
  4898                           
  4899                           ;prog.c: 119: }
  4900                           ;prog.c: 120: }
  4901                           ;prog.c: 121: IsLCDModified = 1;
  4902  06B9  1283               	bcf	3,5	;RP0=0, select bank0
  4903  06BA  14DD               	bsf	_IsLCDModified/(0+8),_IsLCDModified& (0+7)
  4904  06BB  0008               	return
  4905  06BC                     __end_of_clrInd:	
  4906  06BC                     __ptext2288:	
  4907 ;; =============== function _GetDayOfWeek ends ============
  4908                           
  4909                           
  4910 ;; *************** function _entNum *****************
  4911 ;; Defined at:
  4912 ;;		line 222 in file "prog.c"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;  borderDown      1    wreg     unsigned char 
  4915 ;;  borderUp        1    0[BANK1 ] unsigned char 
  4916 ;; Auto vars:     Size  Location     Type
  4917 ;;  borderDown      1    1[BANK1 ] unsigned char 
  4918 ;;  KeyValue        1    2[BANK1 ] unsigned char 
  4919 ;; Return value:  Size  Location     Type
  4920 ;;                  1    wreg      unsigned char 
  4921 ;; Registers used:
  4922 ;;		wreg, status,2, status,0
  4923 ;; Tracked objects:
  4924 ;;		On entry : 60/120
  4925 ;;		On exit  : 60/120
  4926 ;;		Unchanged: FFF9F/0
  4927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4928 ;;      Params:         0       0       1       0       0
  4929 ;;      Locals:         0       0       2       0       0
  4930 ;;      Temps:          0       0       0       0       0
  4931 ;;      Totals:         0       0       3       0       0
  4932 ;;Total ram usage:        3 bytes
  4933 ;; Hardware stack levels used:    1
  4934 ;; Hardware stack levels required when called:    4
  4935 ;; This function calls:
  4936 ;;		Nothing
  4937 ;; This function is called by:
  4938 ;;		_TimeEdit
  4939 ;;		_EditSchedule
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942  06BC                     _entNum:	
  4943                           
  4944                           ; Regs used in _entNum: [wreg+status,2+status,0]
  4945                           ;entNum@borderDown stored from wreg
  4946  06BC  00A1               	movwf	entNum@borderDown^(0+128)
  4947                           
  4948                           ;prog.c: 223: if(KeyCode>=30 && KeyCode<=39){
  4949  06BD  301E               	movlw	30
  4950  06BE  026F               	subwf	_KeyCode^(0+128),w	;volatile
  4951  06BF  1C03               	skipc
  4952  06C0  34FF               	retlw	255
  4953  06C1  3028               	movlw	40
  4954  06C2  026F               	subwf	_KeyCode^(0+128),w	;volatile
  4955  06C3  1803               	skipnc
  4956  06C4  34FF               	retlw	255
  4957                           
  4958                           ;prog.c: 224: char KeyValue = KeyCode - 30;
  4959  06C5  086F               	movf	_KeyCode^(0+128),w	;volatile
  4960  06C6  3EE2               	addlw	226
  4961  06C7  00A2               	movwf	entNum@KeyValue^(0+128)
  4962                           
  4963                           ;prog.c: 225: if(borderDown <= KeyValue && borderUp >= KeyValue){
  4964  06C8  0821               	movf	entNum@borderDown^(0+128),w
  4965  06C9  0222               	subwf	entNum@KeyValue^(0+128),w
  4966  06CA  1C03               	skipc
  4967  06CB  34FF               	retlw	255
  4968  06CC  0822               	movf	entNum@KeyValue^(0+128),w
  4969  06CD  0220               	subwf	entNum@borderUp^(0+128),w
  4970  06CE  1C03               	skipc
  4971  06CF  34FF               	retlw	255
  4972                           
  4973                           ;prog.c: 226: KeyCode = 0;
  4974  06D0  01EF               	clrf	_KeyCode^(0+128)	;volatile
  4975                           
  4976                           ;prog.c: 227: return (unsigned char)KeyValue;
  4977  06D1  0822               	movf	entNum@KeyValue^(0+128),w
  4978  06D2  0008               	return
  4979  06D3                     __end_of_entNum:	
  4980  06D3                     __ptext2282:	
  4981 ;; =============== function _FillMinutes ends ============
  4982                           
  4983                           
  4984 ;; *************** function _ConvertDayToBit *****************
  4985 ;; Defined at:
  4986 ;;		line 858 in file "prog.c"
  4987 ;; Parameters:    Size  Location     Type
  4988 ;;  DayNumber       1    wreg     unsigned char 
  4989 ;; Auto vars:     Size  Location     Type
  4990 ;;  DayNumber       1    0[BANK1 ] unsigned char 
  4991 ;; Return value:  Size  Location     Type
  4992 ;;                  1    wreg      unsigned char 
  4993 ;; Registers used:
  4994 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4995 ;; Tracked objects:
  4996 ;;		On entry : 60/120
  4997 ;;		On exit  : 60/120
  4998 ;;		Unchanged: FFF9F/0
  4999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5000 ;;      Params:         0       0       0       0       0
  5001 ;;      Locals:         0       0       1       0       0
  5002 ;;      Temps:          0       0       0       0       0
  5003 ;;      Totals:         0       0       1       0       0
  5004 ;;Total ram usage:        1 bytes
  5005 ;; Hardware stack levels used:    1
  5006 ;; Hardware stack levels required when called:    4
  5007 ;; This function calls:
  5008 ;;		Nothing
  5009 ;; This function is called by:
  5010 ;;		_EditSchedule
  5011 ;; This function uses a non-reentrant model
  5012 ;;
  5013  06D3                     _ConvertDayToBit:	
  5014                           
  5015                           ; Regs used in _ConvertDayToBit: [wreg-fsr0h+status,2+status,0]
  5016                           ;ConvertDayToBit@DayNumber stored from wreg
  5017  06D3  00A0               	movwf	ConvertDayToBit@DayNumber^(0+128)
  5018                           
  5019                           ;prog.c: 859: switch (DayNumber){
  5020  06D4  2EDC               	goto	l9845
  5021  06D5                     l9811:	
  5022  06D5  3401               	retlw	1
  5023  06D6                     l9815:	
  5024  06D6  3402               	retlw	2
  5025  06D7                     l9819:	
  5026  06D7  3404               	retlw	4
  5027  06D8                     l9823:	
  5028  06D8  3408               	retlw	8
  5029  06D9                     l9827:	
  5030  06D9  3410               	retlw	16
  5031  06DA                     l9831:	
  5032  06DA  3420               	retlw	32
  5033  06DB                     l9835:	
  5034  06DB  3440               	retlw	64
  5035  06DC                     l9845:	
  5036  06DC  0820               	movf	ConvertDayToBit@DayNumber^(0+128),w
  5037                           
  5038                           ; Switch size 1, requested type "speed"
  5039                           ; Number of cases is 7, Range of values is 1 to 7
  5040                           ; switch strategies available:
  5041                           ; Name         Instructions Cycles
  5042                           ; direct_byte           32    11 (fixed)
  5043                           ; simple_byte           22    12 (average)
  5044                           ; jumptable            263     9 (fixed)
  5045                           ;	Chosen strategy is direct_byte
  5046  06DD  3EFF               	addlw	-1
  5047  06DE  1C03               	skipc
  5048  06DF  3400               	retlw	0
  5049  06E0  0084               	movwf	4
  5050  06E1  3007               	movlw	7
  5051  06E2  0204               	subwf	4,w
  5052  06E3  1803               	skipnc
  5053  06E4  3400               	retlw	0
  5054  06E5  3010               	movlw	high S11379
  5055  06E6  008A               	movwf	10
  5056  06E7  1003               	clrc
  5057  06E8  0D04               	rlf	4,w
  5058  06E9  0704               	addwf	4,w
  5059  06EA  3E00               	addlw	low S11379
  5060  06EB  0082               	movwf	2
  5061  06EC  0008               	return
  5062  06ED                     __end_of_ConvertDayToBit:	
  5063  06ED                     __ptext2257:	
  5064 ;; =============== function _getBorderUp ends ============
  5065                           
  5066                           
  5067 ;; *************** function _ItemsToIndicator *****************
  5068 ;; Defined at:
  5069 ;;		line 840 in file "prog.c"
  5070 ;; Parameters:    Size  Location     Type
  5071 ;;  items           1    wreg     unsigned char 
  5072 ;;  max_i           1   24[BANK1 ] unsigned char 
  5073 ;;  firstDigit      1   25[BANK1 ] unsigned char 
  5074 ;; Auto vars:     Size  Location     Type
  5075 ;;  items           1   26[BANK1 ] unsigned char 
  5076 ;;  i               1   27[BANK1 ] unsigned char 
  5077 ;; Return value:  Size  Location     Type
  5078 ;;		None               void
  5079 ;; Registers used:
  5080 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5081 ;; Tracked objects:
  5082 ;;		On entry : 60/120
  5083 ;;		On exit  : 60/20
  5084 ;;		Unchanged: FFE9F/0
  5085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5086 ;;      Params:         0       0       2       0       0
  5087 ;;      Locals:         0       0       2       0       0
  5088 ;;      Temps:          0       0       0       0       0
  5089 ;;      Totals:         0       0       4       0       0
  5090 ;;Total ram usage:        4 bytes
  5091 ;; Hardware stack levels used:    1
  5092 ;; Hardware stack levels required when called:    5
  5093 ;; This function calls:
  5094 ;;		_setDigit
  5095 ;; This function is called by:
  5096 ;;		_EditSchedule
  5097 ;; This function uses a non-reentrant model
  5098 ;;
  5099  06ED                     _ItemsToIndicator:	
  5100                           
  5101 ;; hardware stack exceeded
  5102                           ; Regs used in _ItemsToIndicator: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5103                           ;ItemsToIndicator@items stored from wreg
  5104  06ED  00BA               	movwf	ItemsToIndicator@items^(0+128)
  5105                           
  5106                           ;prog.c: 841: for(char i=1;i<max_i;i++){
  5107  06EE  01BB               	clrf	ItemsToIndicator@i^(0+128)
  5108  06EF                     l10283:	
  5109  06EF  0ABB               	incf	ItemsToIndicator@i^(0+128),f
  5110  06F0  0838               	movf	ItemsToIndicator@max_i^(0+128),w
  5111  06F1  023B               	subwf	ItemsToIndicator@i^(0+128),w
  5112  06F2  1803               	btfsc	3,0
  5113  06F3  0008               	return
  5114                           
  5115                           ;prog.c: 842: items%2==1 ? setDigit(0,firstDigit-i,i) : setDigit(0,firstDigit-i,32);
  5116  06F4  1C3A               	btfss	ItemsToIndicator@items^(0+128),0
  5117  06F5  2EFB               	goto	l10279
  5118  06F6  083B               	movf	ItemsToIndicator@i^(0+128),w
  5119  06F7  0239               	subwf	ItemsToIndicator@firstDigit^(0+128),w
  5120  06F8  00AE               	movwf	?_setDigit^(0+128)
  5121  06F9  083B               	movf	ItemsToIndicator@i^(0+128),w
  5122  06FA  2EFF               	goto	L22
  5123  06FB                     l10279:	
  5124  06FB  083B               	movf	ItemsToIndicator@i^(0+128),w
  5125  06FC  0239               	subwf	ItemsToIndicator@firstDigit^(0+128),w
  5126  06FD  00AE               	movwf	?_setDigit^(0+128)
  5127  06FE  3020               	movlw	32
  5128  06FF                     L22:	
  5129  06FF  00AF               	movwf	(?_setDigit^(0+128)+1)
  5130  0700  3000               	movlw	0
  5131  0701  160A  118A  265C   	fcall	_setDigit
      +       120A  118A         
  5132                           
  5133                           ;prog.c: 843: items/=2;
  5134  0706  1003               	clrc
  5135  0707  0CBA               	rrf	ItemsToIndicator@items^(0+128),f
  5136  0708  2EEF               	goto	l10283
  5137  0709                     __end_of_ItemsToIndicator:	
  5138  0709                     __ptext2256:	
  5139 ;; =============== function _lcd_off ends ============
  5140                           
  5141                           
  5142 ;; *************** function _getBorderUp *****************
  5143 ;; Defined at:
  5144 ;;		line 848 in file "prog.c"
  5145 ;; Parameters:    Size  Location     Type
  5146 ;;  n               1    wreg     unsigned char 
  5147 ;; Auto vars:     Size  Location     Type
  5148 ;;  n               1    5[BANK1 ] unsigned char 
  5149 ;;  BorderUp        1    6[BANK1 ] unsigned char 
  5150 ;; Return value:  Size  Location     Type
  5151 ;;                  1    wreg      unsigned char 
  5152 ;; Registers used:
  5153 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5154 ;; Tracked objects:
  5155 ;;		On entry : 160/120
  5156 ;;		On exit  : 160/120
  5157 ;;		Unchanged: FFE9F/0
  5158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5159 ;;      Params:         0       0       0       0       0
  5160 ;;      Locals:         0       0       2       0       0
  5161 ;;      Temps:          0       0       0       0       0
  5162 ;;      Totals:         0       0       2       0       0
  5163 ;;Total ram usage:        2 bytes
  5164 ;; Hardware stack levels used:    1
  5165 ;; Hardware stack levels required when called:    5
  5166 ;; This function calls:
  5167 ;;		_getDigit
  5168 ;; This function is called by:
  5169 ;;		_EditSchedule
  5170 ;; This function uses a non-reentrant model
  5171 ;;
  5172  0709                     _getBorderUp:	
  5173                           
  5174 ;; hardware stack exceeded
  5175                           ; Regs used in _getBorderUp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5176                           ;getBorderUp@n stored from wreg
  5177  0709  00A5               	movwf	getBorderUp@n^(0+128)
  5178                           
  5179                           ;prog.c: 849: unsigned char BorderUp;
  5180                           ;prog.c: 850: switch(n){
  5181  070A  2F1D               	goto	l10303
  5182  070B                     l10289:	
  5183  070B  3002               	movlw	2
  5184  070C  2F1B               	goto	L21
  5185  070D                     l10291:	
  5186  070D  0A25               	incf	getBorderUp@n^(0+128),w
  5187  070E  00A0               	movwf	?_getDigit^(0+128)
  5188  070F  3000               	movlw	0
  5189  0710  261F  120A  118A   	fcall	_getDigit
  5190  0713  3A02               	xorlw	2
  5191  0714  1D03               	skipz
  5192  0715  2F18               	goto	l10295
  5193  0716  3003               	movlw	3
  5194  0717  2F1B               	goto	L21
  5195  0718                     l10295:	
  5196  0718  3009               	movlw	9
  5197  0719  2F1B               	goto	L21
  5198  071A                     l10297:	
  5199  071A  3005               	movlw	5
  5200  071B                     L21:	
  5201  071B  00A6               	movwf	getBorderUp@BorderUp^(0+128)
  5202  071C  2F2D               	goto	l10305
  5203  071D                     l10303:	
  5204  071D  0825               	movf	getBorderUp@n^(0+128),w
  5205                           
  5206                           ; Switch size 1, requested type "speed"
  5207                           ; Number of cases is 8, Range of values is 1 to 11
  5208                           ; switch strategies available:
  5209                           ; Name         Instructions Cycles
  5210                           ; direct_byte           44    11 (fixed)
  5211                           ; simple_byte           25    13 (average)
  5212                           ; jumptable            263     9 (fixed)
  5213                           ;	Chosen strategy is direct_byte
  5214  071E  3EFF               	addlw	-1
  5215  071F  1C03               	skipc
  5216  0720  2F2D               	goto	l10305
  5217  0721  0084               	movwf	4
  5218  0722  300B               	movlw	11
  5219  0723  0204               	subwf	4,w
  5220  0724  1803               	skipnc
  5221  0725  2F2D               	goto	l10305
  5222  0726  3018               	movlw	high S11377
  5223  0727  008A               	movwf	10
  5224  0728  1003               	clrc
  5225  0729  0D04               	rlf	4,w
  5226  072A  0704               	addwf	4,w
  5227  072B  3E30               	addlw	low S11377
  5228  072C  0082               	movwf	2
  5229  072D                     l10305:	
  5230                           
  5231                           ;prog.c: 856: return BorderUp;
  5232  072D  0826               	movf	getBorderUp@BorderUp^(0+128),w
  5233  072E  0008               	return
  5234  072F                     __end_of_getBorderUp:	
  5235  072F                     __ptext2286:	
  5236 ;; =============== function _EEWR ends ============
  5237                           
  5238                           
  5239 ;; *************** function _ParseDataRecord *****************
  5240 ;; Defined at:
  5241 ;;		line 1087 in file "prog.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;  Data            4    3[BANK1 ] unsigned long 
  5244 ;;  TimeStart       2    7[BANK1 ] PTR unsigned int 
  5245 ;;		 -> FindNextTimeStart@TimeStart(2), EditSchedule@TimeStart(2), TimeToInd@TimeStart(2), 
  5246 ;;  TimeStop        2    9[BANK1 ] PTR unsigned int 
  5247 ;;		 -> FindNextTimeStart@TimeStop(2), EditSchedule@TimeStop(2), TimeToInd@TimeStop(2), 
  5248 ;;  Days            2   11[BANK1 ] PTR unsigned char 
  5249 ;;		 -> FindNextTimeStart@Days(1), EditSchedule@Days(1), TimeToInd@Days(1), 
  5250 ;;  Signals         2   13[BANK1 ] PTR unsigned char 
  5251 ;;		 -> FindNextTimeStart@Signals(1), EditSchedule@Signals(1), TimeToInd@Signals(1), 
  5252 ;; Auto vars:     Size  Location     Type
  5253 ;;		None
  5254 ;; Return value:  Size  Location     Type
  5255 ;;		None               void
  5256 ;; Registers used:
  5257 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5258 ;; Tracked objects:
  5259 ;;		On entry : 60/120
  5260 ;;		On exit  : 60/20
  5261 ;;		Unchanged: FFE9F/0
  5262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5263 ;;      Params:         0       0      12       0       0
  5264 ;;      Locals:         0       0       0       0       0
  5265 ;;      Temps:          0       0       2       0       0
  5266 ;;      Totals:         0       0      14       0       0
  5267 ;;Total ram usage:       14 bytes
  5268 ;; Hardware stack levels used:    1
  5269 ;; Hardware stack levels required when called:    4
  5270 ;; This function calls:
  5271 ;;		Nothing
  5272 ;; This function is called by:
  5273 ;;		_TimeToInd
  5274 ;;		_EditSchedule
  5275 ;;		_FindNextTimeStart
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278  072F                     _ParseDataRecord:	
  5279                           
  5280                           ;prog.c: 1089: *TimeStart = (unsigned int)(Data%(unsigned long int)2048);
  5281                           
  5282                           ; Regs used in _ParseDataRecord: [wreg-fsr0h+status,2+status,0]
  5283  072F  0823               	movf	ParseDataRecord@Data^(0+128),w
  5284  0730  00AF               	movwf	??_ParseDataRecord^(0+128)
  5285  0731  3007               	movlw	7
  5286  0732  0524               	andwf	(ParseDataRecord@Data+1)^(0+128),w
  5287  0733  00B0               	movwf	(??_ParseDataRecord+1)^(0+128)
  5288  0734  0827               	movf	ParseDataRecord@TimeStart^(0+128),w
  5289  0735  0084               	movwf	4
  5290  0736  1783               	bsf	3,7
  5291  0737  1C28               	btfss	(ParseDataRecord@TimeStart+1)^(0+128),0
  5292  0738  1383               	bcf	3,7
  5293  0739  082F               	movf	??_ParseDataRecord^(0+128),w
  5294  073A  0080               	movwf	0
  5295  073B  0A84               	incf	4,f
  5296  073C  0830               	movf	(??_ParseDataRecord+1)^(0+128),w
  5297  073D  0080               	movwf	0
  5298                           
  5299                           ;prog.c: 1090: Data/=2048;
  5300  073E  300B               	movlw	11
  5301  073F                     u7105:	
  5302  073F  1003               	clrc
  5303  0740  0CA6               	rrf	(ParseDataRecord@Data+3)^(0+128),f
  5304  0741  0CA5               	rrf	(ParseDataRecord@Data+2)^(0+128),f
  5305  0742  0CA4               	rrf	(ParseDataRecord@Data+1)^(0+128),f
  5306  0743  0CA3               	rrf	ParseDataRecord@Data^(0+128),f
  5307  0744  3EFF               	addlw	-1
  5308  0745  1D03               	skipz
  5309  0746  2F3F               	goto	u7105
  5310                           
  5311                           ;prog.c: 1091: *TimeStop = (unsigned int)(Data%(unsigned long int)2048);
  5312  0747  0823               	movf	ParseDataRecord@Data^(0+128),w
  5313  0748  00AF               	movwf	??_ParseDataRecord^(0+128)
  5314  0749  3007               	movlw	7
  5315  074A  0524               	andwf	(ParseDataRecord@Data+1)^(0+128),w
  5316  074B  00B0               	movwf	(??_ParseDataRecord+1)^(0+128)
  5317  074C  0829               	movf	ParseDataRecord@TimeStop^(0+128),w
  5318  074D  0084               	movwf	4
  5319  074E  1783               	bsf	3,7
  5320  074F  1C2A               	btfss	(ParseDataRecord@TimeStop+1)^(0+128),0
  5321  0750  1383               	bcf	3,7
  5322  0751  082F               	movf	??_ParseDataRecord^(0+128),w
  5323  0752  0080               	movwf	0
  5324  0753  0A84               	incf	4,f
  5325  0754  0830               	movf	(??_ParseDataRecord+1)^(0+128),w
  5326  0755  0080               	movwf	0
  5327                           
  5328                           ;prog.c: 1092: Data/=2048;
  5329  0756  300B               	movlw	11
  5330  0757                     u7115:	
  5331  0757  1003               	clrc
  5332  0758  0CA6               	rrf	(ParseDataRecord@Data+3)^(0+128),f
  5333  0759  0CA5               	rrf	(ParseDataRecord@Data+2)^(0+128),f
  5334  075A  0CA4               	rrf	(ParseDataRecord@Data+1)^(0+128),f
  5335  075B  0CA3               	rrf	ParseDataRecord@Data^(0+128),f
  5336  075C  3EFF               	addlw	-1
  5337  075D  1D03               	skipz
  5338  075E  2F57               	goto	u7115
  5339                           
  5340                           ;prog.c: 1093: *Days = (unsigned char)(Data%(unsigned long int)128);
  5341  075F  0823               	movf	ParseDataRecord@Data^(0+128),w
  5342  0760  00AF               	movwf	??_ParseDataRecord^(0+128)
  5343  0761  082B               	movf	ParseDataRecord@Days^(0+128),w
  5344  0762  0084               	movwf	4
  5345  0763  1383               	bcf	3,7
  5346  0764  182C               	btfsc	(ParseDataRecord@Days+1)^(0+128),0
  5347  0765  1783               	bsf	3,7
  5348  0766  082F               	movf	??_ParseDataRecord^(0+128),w
  5349  0767  0080               	movwf	0
  5350  0768  082B               	movf	ParseDataRecord@Days^(0+128),w
  5351  0769  0084               	movwf	4
  5352  076A  1783               	bsf	3,7
  5353  076B  1C2C               	btfss	(ParseDataRecord@Days+1)^(0+128),0
  5354  076C  1383               	bcf	3,7
  5355  076D  3007               	movlw	7
  5356  076E  1380               	bcf	0,7
  5357  076F                     u7125:	
  5358                           ;prog.c: 1094: Data/=128;
  5359                           
  5360  076F  1003               	clrc
  5361  0770  0CA6               	rrf	(ParseDataRecord@Data+3)^(0+128),f
  5362  0771  0CA5               	rrf	(ParseDataRecord@Data+2)^(0+128),f
  5363  0772  0CA4               	rrf	(ParseDataRecord@Data+1)^(0+128),f
  5364  0773  0CA3               	rrf	ParseDataRecord@Data^(0+128),f
  5365  0774  3EFF               	addlw	-1
  5366  0775  1D03               	skipz
  5367  0776  2F6F               	goto	u7125
  5368                           
  5369                           ;prog.c: 1095: *Signals = (unsigned char)(Data%(unsigned long int)8);
  5370  0777  0823               	movf	ParseDataRecord@Data^(0+128),w
  5371  0778  00AF               	movwf	??_ParseDataRecord^(0+128)
  5372  0779  082D               	movf	ParseDataRecord@Signals^(0+128),w
  5373  077A  0084               	movwf	4
  5374  077B  1383               	bcf	3,7
  5375  077C  182E               	btfsc	(ParseDataRecord@Signals+1)^(0+128),0
  5376  077D  1783               	bsf	3,7
  5377  077E  082F               	movf	??_ParseDataRecord^(0+128),w
  5378  077F  0080               	movwf	0
  5379  0780  082D               	movf	ParseDataRecord@Signals^(0+128),w
  5380  0781  0084               	movwf	4
  5381  0782  1783               	bsf	3,7
  5382  0783  1C2E               	btfss	(ParseDataRecord@Signals+1)^(0+128),0
  5383  0784  1383               	bcf	3,7
  5384  0785  3007               	movlw	7
  5385  0786  0580               	andwf	0,f
  5386  0787  0008               	return
  5387  0788                     __end_of_ParseDataRecord:	
  5388  0788                     __ptext2273:	
  5389 ;; =============== function ___lmul ends ============
  5390                           
  5391                           
  5392 ;; *************** function ___lbdiv *****************
  5393 ;; Defined at:
  5394 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lbdiv.c"
  5395 ;; Parameters:    Size  Location     Type
  5396 ;;  dividend        1    wreg     unsigned char 
  5397 ;;  divisor         1    0[BANK1 ] unsigned char 
  5398 ;; Auto vars:     Size  Location     Type
  5399 ;;  dividend        1    1[BANK1 ] unsigned char 
  5400 ;;  quotient        1    3[BANK1 ] unsigned char 
  5401 ;;  counter         1    2[BANK1 ] unsigned char 
  5402 ;; Return value:  Size  Location     Type
  5403 ;;                  1    wreg      unsigned char 
  5404 ;; Registers used:
  5405 ;;		wreg, status,2, status,0
  5406 ;; Tracked objects:
  5407 ;;		On entry : 60/120
  5408 ;;		On exit  : 60/120
  5409 ;;		Unchanged: FFF9F/0
  5410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5411 ;;      Params:         0       0       1       0       0
  5412 ;;      Locals:         0       0       3       0       0
  5413 ;;      Temps:          0       0       0       0       0
  5414 ;;      Totals:         0       0       4       0       0
  5415 ;;Total ram usage:        4 bytes
  5416 ;; Hardware stack levels used:    1
  5417 ;; Hardware stack levels required when called:    4
  5418 ;; This function calls:
  5419 ;;		Nothing
  5420 ;; This function is called by:
  5421 ;;		_TimesToIndicator
  5422 ;;		_EditSchedule
  5423 ;; This function uses a non-reentrant model
  5424 ;;
  5425  0788                     ___lbdiv:	
  5426                           
  5427                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  5428                           ;___lbdiv@dividend stored from wreg
  5429  0788  00A1               	movwf	___lbdiv@dividend^(0+128)
  5430  0789  01A3               	clrf	___lbdiv@quotient^(0+128)
  5431  078A  0820               	movf	___lbdiv@divisor^(0+128),w
  5432  078B  1903               	btfsc	3,2
  5433  078C  2FA1               	goto	l9947
  5434  078D  01A2               	clrf	___lbdiv@counter^(0+128)
  5435  078E                     l9933:	
  5436  078E  0AA2               	incf	___lbdiv@counter^(0+128),f
  5437  078F  1BA0               	btfsc	___lbdiv@divisor^(0+128),7
  5438  0790  2F94               	goto	l2065
  5439  0791  1003               	clrc
  5440  0792  0DA0               	rlf	___lbdiv@divisor^(0+128),f
  5441  0793  2F8E               	goto	l9933
  5442  0794                     l2065:	
  5443  0794  1003               	clrc
  5444  0795  0DA3               	rlf	___lbdiv@quotient^(0+128),f
  5445  0796  0820               	movf	___lbdiv@divisor^(0+128),w
  5446  0797  0221               	subwf	___lbdiv@dividend^(0+128),w
  5447  0798  1C03               	skipc
  5448  0799  2F9E               	goto	L31
  5449  079A  0820               	movf	___lbdiv@divisor^(0+128),w
  5450  079B  02A1               	subwf	___lbdiv@dividend^(0+128),f
  5451  079C  1423               	bsf	___lbdiv@quotient^(0+128),0
  5452  079D  1003               	clrc
  5453  079E                     L31:	
  5454  079E  0CA0               	rrf	___lbdiv@divisor^(0+128),f
  5455  079F  0BA2               	decfsz	___lbdiv@counter^(0+128),f
  5456  07A0  2F94               	goto	l2065
  5457  07A1                     l9947:	
  5458  07A1  0823               	movf	___lbdiv@quotient^(0+128),w
  5459  07A2  0008               	return
  5460  07A3                     __end_of___lbdiv:	
  5461  07A3                     __ptext2265:	
  5462 ;; =============== function _ParseTime ends ============
  5463                           
  5464                           
  5465 ;; *************** function _ReadFourBytesEE *****************
  5466 ;; Defined at:
  5467 ;;		line 592 in file "prog.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;  adress          1    wreg     unsigned char 
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;  adress          1   29[BANK1 ] unsigned char 
  5472 ;;  i               2   34[BANK1 ] int 
  5473 ;;  x               4   30[BANK1 ] unsigned long 
  5474 ;; Return value:  Size  Location     Type
  5475 ;;                  4   17[BANK1 ] unsigned long 
  5476 ;; Registers used:
  5477 ;;		wreg, status,2, status,0, pclath, cstack
  5478 ;; Tracked objects:
  5479 ;;		On entry : 20/160
  5480 ;;		On exit  : 60/20
  5481 ;;		Unchanged: FFE00/0
  5482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5483 ;;      Params:         0       0       4       0       0
  5484 ;;      Locals:         0       0       7       0       0
  5485 ;;      Temps:          0       0       8       0       0
  5486 ;;      Totals:         0       0      19       0       0
  5487 ;;Total ram usage:       19 bytes
  5488 ;; Hardware stack levels used:    1
  5489 ;; Hardware stack levels required when called:    5
  5490 ;; This function calls:
  5491 ;;		_EERD
  5492 ;; This function is called by:
  5493 ;;		_TimeToInd
  5494 ;;		_EditSchedule
  5495 ;;		_FindNextTimeStart
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498  07A3                     _ReadFourBytesEE:	
  5499                           
  5500 ;; hardware stack exceeded
  5501                           ; Regs used in _ReadFourBytesEE: [wreg+status,2+status,0+pclath+cstack]
  5502                           ;ReadFourBytesEE@adress stored from wreg
  5503  07A3  1303               	bcf	3,6	;RP1=0, select bank1
  5504  07A4  00BD               	movwf	ReadFourBytesEE@adress^(0+128)
  5505                           
  5506                           ;prog.c: 593: unsigned long int x;
  5507                           ;prog.c: 594: for(int i=3;i>=0;i--){
  5508  07A5  3003               	movlw	3
  5509  07A6  00C2               	movwf	ReadFourBytesEE@i^(0+128)
  5510  07A7  01C3               	clrf	(ReadFourBytesEE@i+1)^(0+128)
  5511  07A8                     l10113:	
  5512                           
  5513                           ;prog.c: 595: x = x*256 + EERD(adress+i);
  5514  07A8  0842               	movf	ReadFourBytesEE@i^(0+128),w
  5515  07A9  073D               	addwf	ReadFourBytesEE@adress^(0+128),w
  5516  07AA  27E5  120A  118A   	fcall	_EERD
  5517  07AD  00B5               	movwf	??_ReadFourBytesEE^(0+128)
  5518  07AE  01B6               	clrf	(??_ReadFourBytesEE^(0+128)+1)
  5519  07AF  01B7               	clrf	(??_ReadFourBytesEE^(0+128)+2)
  5520  07B0  01B8               	clrf	(??_ReadFourBytesEE^(0+128)+3)
  5521  07B1  083E               	movf	ReadFourBytesEE@x^(0+128),w
  5522  07B2  00B9               	movwf	(??_ReadFourBytesEE+4)^(0+128)
  5523  07B3  083F               	movf	(ReadFourBytesEE@x+1)^(0+128),w
  5524  07B4  00BA               	movwf	((??_ReadFourBytesEE+4)^(0+128)+1)
  5525  07B5  0840               	movf	(ReadFourBytesEE@x+2)^(0+128),w
  5526  07B6  00BB               	movwf	((??_ReadFourBytesEE+4)^(0+128)+2)
  5527  07B7  0841               	movf	(ReadFourBytesEE@x+3)^(0+128),w
  5528  07B8  00BC               	movwf	((??_ReadFourBytesEE+4)^(0+128)+3)
  5529  07B9  083B               	movf	((??_ReadFourBytesEE+4)^(0+128)+2),w
  5530  07BA  00BC               	movwf	((??_ReadFourBytesEE+4)^(0+128)+3)
  5531  07BB  083A               	movf	((??_ReadFourBytesEE+4)^(0+128)+1),w
  5532  07BC  00BB               	movwf	((??_ReadFourBytesEE+4)^(0+128)+2)
  5533  07BD  0839               	movf	(??_ReadFourBytesEE+4)^(0+128),w
  5534  07BE  00BA               	movwf	((??_ReadFourBytesEE+4)^(0+128)+1)
  5535  07BF  01B9               	clrf	(??_ReadFourBytesEE+4)^(0+128)
  5536  07C0  0839               	movf	(??_ReadFourBytesEE+4)^(0+128),w
  5537  07C1  07B5               	addwf	??_ReadFourBytesEE^(0+128),f
  5538  07C2  083A               	movf	(??_ReadFourBytesEE+5)^(0+128),w
  5539  07C3  1803               	skipnc
  5540  07C4  0F3A               	incfsz	(??_ReadFourBytesEE+5)^(0+128),w
  5541  07C5  07B6               	addwf	(??_ReadFourBytesEE^(0+128)+1),f
  5542  07C6  083B               	movf	(??_ReadFourBytesEE+6)^(0+128),w
  5543  07C7  1803               	skipnc
  5544  07C8  0F3B               	incfsz	(??_ReadFourBytesEE+6)^(0+128),w
  5545  07C9  07B7               	addwf	(??_ReadFourBytesEE^(0+128)+2),f
  5546  07CA  083C               	movf	(??_ReadFourBytesEE+7)^(0+128),w
  5547  07CB  1803               	skipnc
  5548  07CC  0A3C               	incf	(??_ReadFourBytesEE+7)^(0+128),w
  5549  07CD  07B8               	addwf	(??_ReadFourBytesEE^(0+128)+3),f
  5550  07CE  0838               	movf	(??_ReadFourBytesEE+3)^(0+128),w
  5551  07CF  00C1               	movwf	(ReadFourBytesEE@x+3)^(0+128)
  5552  07D0  0837               	movf	(??_ReadFourBytesEE+2)^(0+128),w
  5553  07D1  00C0               	movwf	(ReadFourBytesEE@x+2)^(0+128)
  5554  07D2  0836               	movf	(??_ReadFourBytesEE+1)^(0+128),w
  5555  07D3  00BF               	movwf	(ReadFourBytesEE@x+1)^(0+128)
  5556  07D4  0835               	movf	??_ReadFourBytesEE^(0+128),w
  5557  07D5  00BE               	movwf	ReadFourBytesEE@x^(0+128)
  5558  07D6  30FF               	movlw	-1
  5559  07D7  07C2               	addwf	ReadFourBytesEE@i^(0+128),f
  5560  07D8  1C03               	skipc
  5561  07D9  03C3               	decf	(ReadFourBytesEE@i+1)^(0+128),f
  5562  07DA  1FC3               	btfss	(ReadFourBytesEE@i+1)^(0+128),7
  5563  07DB  2FA8               	goto	l10113
  5564                           
  5565                           ;prog.c: 596: }
  5566                           ;prog.c: 597: return x;
  5567  07DC  0841               	movf	(ReadFourBytesEE@x+3)^(0+128),w
  5568  07DD  00B4               	movwf	(?_ReadFourBytesEE+3)^(0+128)
  5569  07DE  0840               	movf	(ReadFourBytesEE@x+2)^(0+128),w
  5570  07DF  00B3               	movwf	(?_ReadFourBytesEE+2)^(0+128)
  5571  07E0  083F               	movf	(ReadFourBytesEE@x+1)^(0+128),w
  5572  07E1  00B2               	movwf	(?_ReadFourBytesEE+1)^(0+128)
  5573  07E2  083E               	movf	ReadFourBytesEE@x^(0+128),w
  5574  07E3  00B1               	movwf	?_ReadFourBytesEE^(0+128)
  5575  07E4  0008               	return
  5576  07E5                     __end_of_ReadFourBytesEE:	
  5577  07E5                     __ptext2284:	
  5578 ;; =============== function _lcd_send_initial_half_byte ends ============
  5579                           
  5580                           
  5581 ;; *************** function _EERD *****************
  5582 ;; Defined at:
  5583 ;;		line 407 in file "prog.c"
  5584 ;; Parameters:    Size  Location     Type
  5585 ;;  adress          1    wreg     unsigned char 
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;  adress          1    0[BANK1 ] unsigned char 
  5588 ;;  EEDATA_BUP      1    2[BANK1 ] volatile unsigned char 
  5589 ;;  INTCON_BUP      1    1[BANK1 ] volatile unsigned char 
  5590 ;; Return value:  Size  Location     Type
  5591 ;;                  1    wreg      unsigned char 
  5592 ;; Registers used:
  5593 ;;		wreg
  5594 ;; Tracked objects:
  5595 ;;		On entry : 20/160
  5596 ;;		On exit  : 60/20
  5597 ;;		Unchanged: FFE00/0
  5598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5599 ;;      Params:         0       0       0       0       0
  5600 ;;      Locals:         0       0       3       0       0
  5601 ;;      Temps:          0       0       0       0       0
  5602 ;;      Totals:         0       0       3       0       0
  5603 ;;Total ram usage:        3 bytes
  5604 ;; Hardware stack levels used:    1
  5605 ;; Hardware stack levels required when called:    4
  5606 ;; This function calls:
  5607 ;;		Nothing
  5608 ;; This function is called by:
  5609 ;;		_ReadFourBytesEE
  5610 ;;		_FindCell
  5611 ;;		_RefreshSchedulerIndicator
  5612 ;;		_main
  5613 ;; This function uses a non-reentrant model
  5614 ;;
  5615  07E5                     _EERD:	
  5616                           
  5617 ;; hardware stack exceeded
  5618                           ; Regs used in _EERD: [wreg]
  5619                           ;EERD@adress stored from wreg
  5620  07E5  1303               	bcf	3,6	;RP1=0, select bank1
  5621  07E6  00A0               	movwf	EERD@adress^(0+128)
  5622                           
  5623                           ;prog.c: 408: volatile unsigned char INTCON_BUP = INTCON;
  5624  07E7  080B               	movf	11,w	;volatile
  5625  07E8  00A1               	movwf	EERD@INTCON_BUP^(0+128)	;volatile
  5626                           
  5627                           ;prog.c: 409: GIE = 0;
  5628  07E9  138B               	bcf	11,7
  5629  07EA  0064               	clrwdt	;#
  5630                           
  5631                           ;prog.c: 411: EEADR = adress;
  5632  07EB  1683               	bsf	3,5	;RP0=1, select bank1
  5633  07EC  1303               	bcf	3,6	;RP1=0, select bank1
  5634  07ED  0820               	movf	EERD@adress^(0+128),w
  5635  07EE  1283               	bcf	3,5	;RP0=0, select bank2
  5636  07EF  1703               	bsf	3,6	;RP1=1, select bank2
  5637  07F0  008D               	movwf	13	;volatile
  5638                           
  5639                           ;prog.c: 412: EEPGD = 0;
  5640  07F1  1683               	bsf	3,5	;RP0=1, select bank3
  5641  07F2  138C               	bcf	12,7
  5642                           
  5643                           ;prog.c: 413: RD = 1;
  5644  07F3  140C               	bsf	12,0
  5645                           
  5646                           ;prog.c: 414: volatile unsigned char EEDATA_BUP = EEDATA;
  5647  07F4  1283               	bcf	3,5	;RP0=0, select bank2
  5648  07F5  080C               	movf	12,w	;volatile
  5649  07F6  1683               	bsf	3,5	;RP0=1, select bank1
  5650  07F7  1303               	bcf	3,6	;RP1=0, select bank1
  5651  07F8  00A2               	movwf	EERD@EEDATA_BUP^(0+128)	;volatile
  5652                           
  5653                           ;prog.c: 415: INTCON = INTCON_BUP;
  5654  07F9  0821               	movf	EERD@INTCON_BUP^(0+128),w	;volatile
  5655  07FA  008B               	movwf	11	;volatile
  5656                           
  5657                           ;prog.c: 416: return EEDATA_BUP;
  5658  07FB  0822               	movf	EERD@EEDATA_BUP^(0+128),w	;volatile
  5659  07FC  0008               	return
  5660  07FD                     __end_of_EERD:	
  5661                           
  5662                           	psect	text2252
  5663  1C0B                     __ptext2252:	
  5664 ;; =============== function _RefreshSchedulerIndicator ends ============
  5665                           
  5666                           
  5667 ;; *************** function _lcd_init *****************
  5668 ;; Defined at:
  5669 ;;		line 696 in file "prog.c"
  5670 ;; Parameters:    Size  Location     Type
  5671 ;;		None
  5672 ;; Auto vars:     Size  Location     Type
  5673 ;;  INTCON_BUF      1   11[BANK1 ] unsigned char 
  5674 ;; Return value:  Size  Location     Type
  5675 ;;		None               void
  5676 ;; Registers used:
  5677 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5678 ;; Tracked objects:
  5679 ;;		On entry : 40/100
  5680 ;;		On exit  : 60/20
  5681 ;;		Unchanged: 0/0
  5682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5683 ;;      Params:         0       0       0       0       0
  5684 ;;      Locals:         0       0       1       0       0
  5685 ;;      Temps:          0       0       2       0       0
  5686 ;;      Totals:         0       0       3       0       0
  5687 ;;Total ram usage:        3 bytes
  5688 ;; Hardware stack levels used:    1
  5689 ;; Hardware stack levels required when called:    6
  5690 ;; This function calls:
  5691 ;;		_lcd_send_initial_half_byte
  5692 ;;		_lcd_send_byte
  5693 ;; This function is called by:
  5694 ;;		_lcd_on
  5695 ;; This function uses a non-reentrant model
  5696 ;;
  5697  1C0B                     _lcd_init:	
  5698                           
  5699                           ;prog.c: 697: unsigned char INTCON_BUF = INTCON;
  5700                           
  5701 ;; hardware stack exceeded
  5702                           ; Regs used in _lcd_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5703  1C0B  080B               	movf	11,w	;volatile
  5704  1C0C  1683               	bsf	3,5	;RP0=1, select bank1
  5705  1C0D  00AB               	movwf	lcd_init@INTCON_BUF^(0+128)
  5706                           
  5707                           ;prog.c: 698: GIE = 0;
  5708  1C0E  138B               	bcf	11,7
  5709  1C0F  0064               	clrwdt	;#
  5710                           
  5711                           ;prog.c: 700: RC0 = 0;
  5712  1C10  1283               	bcf	3,5	;RP0=0, select bank0
  5713  1C11  1303               	bcf	3,6	;RP1=0, select bank0
  5714  1C12  3082               	movlw	130
  5715  1C13  1007               	bcf	7,0
  5716  1C14  1087               	bcf	7,1
  5717                           
  5718                           ;prog.c: 703: _delay((unsigned long)((20)*(20000000/4000.0)));
  5719  1C15  1683               	bsf	3,5	;RP0=1, select bank1
  5720  1C16  00AA               	movwf	(??_lcd_init^(0+128)+1)
  5721  1C17  30DD               	movlw	221
  5722  1C18  00A9               	movwf	??_lcd_init^(0+128)
  5723  1C19                     u9327:	
  5724  1C19  0BA9               	decfsz	??_lcd_init^(0+128),f
  5725  1C1A  2C19               	goto	u9327
  5726  1C1B  0BAA               	decfsz	(??_lcd_init^(0+128)+1),f
  5727  1C1C  2C19               	goto	u9327
  5728  1C1D  2C1E               	nop2
  5729                           
  5730                           ;prog.c: 704: lcd_send_initial_half_byte(0b00000011);
  5731  1C1E  3003               	movlw	3
  5732  1C1F  2705  160A  158A   	fcall	_lcd_send_initial_half_byte
  5733                           
  5734                           ;prog.c: 705: _delay((unsigned long)((5)*(20000000/4000.0)));
  5735  1C22  3021               	movlw	33
  5736  1C23  1683               	bsf	3,5	;RP0=1, select bank1
  5737  1C24  00AA               	movwf	(??_lcd_init^(0+128)+1)
  5738  1C25  3076               	movlw	118
  5739  1C26  00A9               	movwf	??_lcd_init^(0+128)
  5740  1C27                     u9337:	
  5741  1C27  0BA9               	decfsz	??_lcd_init^(0+128),f
  5742  1C28  2C27               	goto	u9337
  5743  1C29  0BAA               	decfsz	(??_lcd_init^(0+128)+1),f
  5744  1C2A  2C27               	goto	u9337
  5745  1C2B  0064               	clrwdt
  5746                           
  5747                           ;prog.c: 706: lcd_send_initial_half_byte(0b00000011);
  5748  1C2C  3003               	movlw	3
  5749  1C2D  2705  160A  158A   	fcall	_lcd_send_initial_half_byte
  5750                           
  5751                           ;prog.c: 707: _delay((unsigned long)((110)*(20000000/4000000.0)));
  5752  1C30  30B7               	movlw	183
  5753  1C31  1683               	bsf	3,5	;RP0=1, select bank1
  5754  1C32  00A9               	movwf	??_lcd_init^(0+128)
  5755  1C33                     u9347:	
  5756  1C33  0BA9               	decfsz	??_lcd_init^(0+128),f
  5757  1C34  2C33               	goto	u9347
  5758                           
  5759                           ;prog.c: 708: lcd_send_initial_half_byte(0b00000011);
  5760  1C35  3003               	movlw	3
  5761  1C36  2705  160A  158A   	fcall	_lcd_send_initial_half_byte
  5762                           
  5763                           ;prog.c: 709: _delay((unsigned long)((40)*(20000000/4000000.0)));
  5764  1C39  3042               	movlw	66
  5765  1C3A  1683               	bsf	3,5	;RP0=1, select bank1
  5766  1C3B  00A9               	movwf	??_lcd_init^(0+128)
  5767  1C3C                     u9357:	
  5768  1C3C  0BA9               	decfsz	??_lcd_init^(0+128),f
  5769  1C3D  2C3C               	goto	u9357
  5770  1C3E  0064               	clrwdt
  5771                           
  5772                           ;prog.c: 710: lcd_send_initial_half_byte(0b00000010);
  5773  1C3F  3002               	movlw	2
  5774  1C40  2705  160A  158A   	fcall	_lcd_send_initial_half_byte
  5775                           
  5776                           ;prog.c: 711: _delay((unsigned long)((40)*(20000000/4000000.0)));
  5777  1C43  3042               	movlw	66
  5778  1C44  1683               	bsf	3,5	;RP0=1, select bank1
  5779  1C45  00A9               	movwf	??_lcd_init^(0+128)
  5780  1C46                     u9367:	
  5781  1C46  0BA9               	decfsz	??_lcd_init^(0+128),f
  5782  1C47  2C46               	goto	u9367
  5783  1C48  0064               	clrwdt
  5784                           
  5785                           ;prog.c: 712: lcd_send_byte(0b00101100);
  5786  1C49  302C               	movlw	44
  5787  1C4A  26E9  160A  158A   	fcall	_lcd_send_byte
  5788                           
  5789                           ;prog.c: 713: _delay((unsigned long)((40)*(20000000/4000000.0)));
  5790  1C4D  3042               	movlw	66
  5791  1C4E  1683               	bsf	3,5	;RP0=1, select bank1
  5792  1C4F  1303               	bcf	3,6	;RP1=0, select bank1
  5793  1C50  00A9               	movwf	??_lcd_init^(0+128)
  5794  1C51                     u9377:	
  5795  1C51  0BA9               	decfsz	??_lcd_init^(0+128),f
  5796  1C52  2C51               	goto	u9377
  5797  1C53  0064               	clrwdt
  5798                           
  5799                           ;prog.c: 714: lcd_send_byte(0b00001000);
  5800  1C54  3008               	movlw	8
  5801  1C55  26E9  160A  158A   	fcall	_lcd_send_byte
  5802                           
  5803                           ;prog.c: 715: _delay((unsigned long)((40)*(20000000/4000000.0)));
  5804  1C58  3042               	movlw	66
  5805  1C59  1683               	bsf	3,5	;RP0=1, select bank1
  5806  1C5A  1303               	bcf	3,6	;RP1=0, select bank1
  5807  1C5B  00A9               	movwf	??_lcd_init^(0+128)
  5808  1C5C                     u9387:	
  5809  1C5C  0BA9               	decfsz	??_lcd_init^(0+128),f
  5810  1C5D  2C5C               	goto	u9387
  5811  1C5E  0064               	clrwdt
  5812                           
  5813                           ;prog.c: 716: lcd_send_byte(0b00000001);
  5814  1C5F  3001               	movlw	1
  5815  1C60  26E9  160A  158A   	fcall	_lcd_send_byte
  5816                           
  5817                           ;prog.c: 717: _delay((unsigned long)((40)*(20000000/4000000.0)));
  5818  1C63  3042               	movlw	66
  5819  1C64  1683               	bsf	3,5	;RP0=1, select bank1
  5820  1C65  1303               	bcf	3,6	;RP1=0, select bank1
  5821  1C66  00A9               	movwf	??_lcd_init^(0+128)
  5822  1C67                     u9397:	
  5823  1C67  0BA9               	decfsz	??_lcd_init^(0+128),f
  5824  1C68  2C67               	goto	u9397
  5825  1C69  0064               	clrwdt
  5826                           
  5827                           ;prog.c: 718: lcd_send_byte(0b00010010);
  5828  1C6A  3012               	movlw	18
  5829  1C6B  26E9  160A  158A   	fcall	_lcd_send_byte
  5830                           
  5831                           ;prog.c: 719: _delay((unsigned long)((40)*(20000000/4000000.0)));
  5832  1C6E  3042               	movlw	66
  5833  1C6F  1683               	bsf	3,5	;RP0=1, select bank1
  5834  1C70  1303               	bcf	3,6	;RP1=0, select bank1
  5835  1C71  00A9               	movwf	??_lcd_init^(0+128)
  5836  1C72                     u9407:	
  5837  1C72  0BA9               	decfsz	??_lcd_init^(0+128),f
  5838  1C73  2C72               	goto	u9407
  5839  1C74  0064               	clrwdt
  5840                           
  5841                           ;prog.c: 722: RC0 = 0;
  5842  1C75  1283               	bcf	3,5	;RP0=0, select bank0
  5843  1C76  1303               	bcf	3,6	;RP1=0, select bank0
  5844  1C77  3001               	movlw	1
  5845  1C78  1007               	bcf	7,0
  5846                           
  5847                           ;prog.c: 723: RC1 = 0;
  5848  1C79  1087               	bcf	7,1
  5849                           
  5850                           ;prog.c: 725: lcd_send_byte(0b00000001);
  5851  1C7A  26E9  160A  158A   	fcall	_lcd_send_byte
  5852                           
  5853                           ;prog.c: 726: _delay((unsigned long)((2)*(20000000/4000.0)));
  5854  1C7D  300D               	movlw	13
  5855  1C7E  1683               	bsf	3,5	;RP0=1, select bank1
  5856  1C7F  1303               	bcf	3,6	;RP1=0, select bank1
  5857  1C80  00AA               	movwf	(??_lcd_init^(0+128)+1)
  5858  1C81  30FB               	movlw	251
  5859  1C82  00A9               	movwf	??_lcd_init^(0+128)
  5860  1C83                     u9417:	
  5861  1C83  0BA9               	decfsz	??_lcd_init^(0+128),f
  5862  1C84  2C83               	goto	u9417
  5863  1C85  0BAA               	decfsz	(??_lcd_init^(0+128)+1),f
  5864  1C86  2C83               	goto	u9417
  5865  1C87  2C88               	nop2
  5866                           
  5867                           ;prog.c: 728: INTCON = (INTCON_BUF | 0b10000000) | (INTCON & 0b01111111);
  5868  1C88  080B               	movf	11,w
  5869  1C89  397F               	andlw	127
  5870  1C8A  1683               	bsf	3,5	;RP0=1, select bank1
  5871  1C8B  1303               	bcf	3,6	;RP1=0, select bank1
  5872  1C8C  042B               	iorwf	lcd_init@INTCON_BUF^(0+128),w
  5873  1C8D  3880               	iorlw	128
  5874  1C8E  008B               	movwf	11	;volatile
  5875  1C8F  0008               	return
  5876  1C90                     __end_of_lcd_init:	
  5877  1C90                     __ptext2246:	
  5878 ;; =============== function _main ends ============
  5879                           
  5880                           
  5881 ;; *************** function _main2 *****************
  5882 ;; Defined at:
  5883 ;;		line 1289 in file "prog.c"
  5884 ;; Parameters:    Size  Location     Type
  5885 ;;		None
  5886 ;; Auto vars:     Size  Location     Type
  5887 ;;		None
  5888 ;; Return value:  Size  Location     Type
  5889 ;;		None               void
  5890 ;; Registers used:
  5891 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5892 ;; Tracked objects:
  5893 ;;		On entry : 0/100
  5894 ;;		On exit  : 160/120
  5895 ;;		Unchanged: 0/0
  5896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5897 ;;      Params:         0       0       0       0       0
  5898 ;;      Locals:         0       0       0       0       0
  5899 ;;      Temps:          0       0       0       0       0
  5900 ;;      Totals:         0       0       0       0       0
  5901 ;;Total ram usage:        0 bytes
  5902 ;; Hardware stack levels used:    1
  5903 ;; Hardware stack levels required when called:    8
  5904 ;; This function calls:
  5905 ;;		_FindNextTimeStart
  5906 ;;		_lcd_off
  5907 ;;		_lcd_on
  5908 ;;		_TimeToInd
  5909 ;;		_TimeEdit
  5910 ;;		_Scheduler
  5911 ;;		_EEWR
  5912 ;;		_clrInd
  5913 ;;		_FillMinutes
  5914 ;; This function is called by:
  5915 ;;		_TimeEdit
  5916 ;;		_Scheduler
  5917 ;;		_main
  5918 ;; This function uses a non-reentrant model
  5919 ;;
  5920  1C90                     _main2:	
  5921                           
  5922                           ;prog.c: 1291: isTimeSetting = 0;
  5923                           
  5924 ;; hardware stack exceeded
  5925                           ; Regs used in _main2: [allreg]
  5926  1C90  1283               	bcf	3,5	;RP0=0, select bank0
  5927  1C91  1303               	bcf	3,6	;RP1=0, select bank0
  5928  1C92  105E               	bcf	_isTimeSetting/(0+8),_isTimeSetting& (0+7)
  5929                           
  5930                           ;prog.c: 1293: NearTimeStart = Clock;
  5931  1C93  1683               	bsf	3,5	;RP0=1, select bank3
  5932  1C94  1703               	bsf	3,6	;RP1=1, select bank3
  5933  1C95  085D               	movf	(_Clock+3)^(0+384),w
  5934  1C96  00E4               	movwf	(_NearTimeStart+3)^(0+384)
  5935  1C97  085C               	movf	(_Clock+2)^(0+384),w
  5936  1C98  00E3               	movwf	(_NearTimeStart+2)^(0+384)
  5937  1C99  085B               	movf	(_Clock+1)^(0+384),w
  5938  1C9A  00E2               	movwf	(_NearTimeStart+1)^(0+384)
  5939  1C9B  085A               	movf	_Clock^(0+384),w
  5940  1C9C  00E1               	movwf	_NearTimeStart^(0+384)
  5941  1C9D                     L3:	
  5942                           
  5943                           ;prog.c: 1294: AdressOfNextStartCell = FindNextTimeStart(&NearTimeStart);
  5944  1C9D  30E1               	movlw	_NearTimeStart& (0+255)
  5945  1C9E  25B8  160A  158A   	fcall	_FindNextTimeStart
  5946  1CA1  1703               	bsf	3,6	;RP1=1, select bank3
  5947  1CA2  00D6               	movwf	_AdressOfNextStartCell^(0+384)
  5948  1CA3                     l11191:	
  5949                           
  5950                           ;prog.c: 1297: if(LCD_Power_On==1 && LCD_ON_TIMEOUT==0 && CurrentSignals==0){
  5951  1CA3  1283               	bcf	3,5	;RP0=0, select bank0
  5952  1CA4  1303               	bcf	3,6	;RP1=0, select bank0
  5953  1CA5  1DDD               	btfss	_LCD_Power_On/(0+8),_LCD_Power_On& (0+7)
  5954  1CA6  2CB4               	goto	l1318
  5955  1CA7  0860               	movf	_LCD_ON_TIMEOUT+1,w
  5956  1CA8  045F               	iorwf	_LCD_ON_TIMEOUT,w
  5957  1CA9  1D03               	skipz
  5958  1CAA  2CB4               	goto	l1318
  5959  1CAB  1683               	bsf	3,5	;RP0=1, select bank3
  5960  1CAC  1703               	bsf	3,6	;RP1=1, select bank3
  5961  1CAD  08DF               	movf	_CurrentSignals^(0+384),f
  5962  1CAE  1D03               	skipz
  5963  1CAF  2CB4               	goto	l1318
  5964                           
  5965                           ;prog.c: 1298: lcd_off();
  5966  1CB0  25AE  160A  158A   	fcall	_lcd_off
  5967                           
  5968                           ;prog.c: 1299: }else if(LCD_Power_On==0 && KeyCode!=0){
  5969  1CB3  2CC0               	goto	l11205
  5970  1CB4                     l1318:	
  5971  1CB4  1283               	bcf	3,5	;RP0=0, select bank0
  5972  1CB5  1303               	bcf	3,6	;RP1=0, select bank0
  5973  1CB6  19DD               	btfsc	_LCD_Power_On/(0+8),_LCD_Power_On& (0+7)
  5974  1CB7  2CC0               	goto	l11205
  5975  1CB8  1683               	bsf	3,5	;RP0=1, select bank1
  5976  1CB9  086F               	movf	_KeyCode^(0+128),w	;volatile
  5977  1CBA  1903               	btfsc	3,2
  5978  1CBB  2CC0               	goto	l11205
  5979                           
  5980                           ;prog.c: 1300: KeyCode=0;
  5981  1CBC  01EF               	clrf	_KeyCode^(0+128)	;volatile
  5982                           
  5983                           ;prog.c: 1301: lcd_on();
  5984  1CBD  26DF  160A  158A   	fcall	_lcd_on
  5985  1CC0                     l11205:	
  5986                           
  5987                           ;prog.c: 1302: }
  5988                           ;prog.c: 1304: if(LCD_Power_On==0) continue;
  5989  1CC0  1283               	bcf	3,5	;RP0=0, select bank0
  5990  1CC1  1DDD               	btfss	_LCD_Power_On/(0+8),_LCD_Power_On& (0+7)
  5991  1CC2  2CA3               	goto	l11191
  5992                           
  5993                           ;prog.c: 1306: TimeToInd();
  5994  1CC3  160A  118A  20AA   	fcall	_TimeToInd
      +       160A  158A         
  5995                           
  5996                           ;prog.c: 1307: if(KeyCode==45){
  5997  1CC8  086F               	movf	_KeyCode^(0+128),w	;volatile
  5998  1CC9  3A2D               	xorlw	45
  5999  1CCA  1D03               	skipz
  6000  1CCB  2CD3               	goto	l11217
  6001                           
  6002                           ;prog.c: 1308: KeyCode = 0;
  6003  1CCC  01EF               	clrf	_KeyCode^(0+128)	;volatile
  6004                           
  6005                           ;prog.c: 1309: TimeEdit();
  6006  1CCD  120A  118A  22DB   	fcall	_TimeEdit
      +       160A  158A         
  6007                           
  6008                           ;prog.c: 1310: }else if(KeyCode==40 || KeyCode==41){
  6009  1CD2  2CA3               	goto	l11191
  6010  1CD3                     l11217:	
  6011  1CD3  086F               	movf	_KeyCode^(0+128),w	;volatile
  6012  1CD4  3A28               	xorlw	40
  6013  1CD5  1903               	skipnz
  6014  1CD6  2CDB               	goto	l11221
  6015  1CD7  086F               	movf	_KeyCode^(0+128),w	;volatile
  6016  1CD8  3A29               	xorlw	41
  6017  1CD9  1D03               	skipz
  6018  1CDA  2CE3               	goto	l11225
  6019  1CDB                     l11221:	
  6020                           
  6021                           ;prog.c: 1311: KeyCode = 0;
  6022  1CDB  01EF               	clrf	_KeyCode^(0+128)	;volatile
  6023                           
  6024                           ;prog.c: 1312: Scheduler(240, 0);
  6025  1CDC  1703               	bsf	3,6	;RP1=1, select bank3
  6026  1CDD  30F0               	movlw	240
  6027  1CDE  0190               	clrf	?_Scheduler^(0+384)
  6028  1CDF  2744  160A  158A   	fcall	_Scheduler
  6029                           
  6030                           ;prog.c: 1313: }else if(KeyCode==44){
  6031  1CE2  2CA3               	goto	l11191
  6032  1CE3                     l11225:	
  6033  1CE3  086F               	movf	_KeyCode^(0+128),w	;volatile
  6034  1CE4  3A2C               	xorlw	44
  6035  1CE5  1D03               	skipz
  6036  1CE6  2CEE               	goto	l11233
  6037                           
  6038                           ;prog.c: 1314: KeyCode = 0;
  6039  1CE7  01EF               	clrf	_KeyCode^(0+128)	;volatile
  6040                           
  6041                           ;prog.c: 1315: if(LCD_Power_On){
  6042  1CE8  1283               	bcf	3,5	;RP0=0, select bank0
  6043  1CE9  1DDD               	btfss	_LCD_Power_On/(0+8),_LCD_Power_On& (0+7)
  6044  1CEA  2CA3               	goto	l11191
  6045                           
  6046                           ;prog.c: 1316: LCD_Light_On = !LCD_Light_On;
  6047  1CEB  3004               	movlw	(0+1) shl (_LCD_Light_On& (0+7))
  6048  1CEC  06DD               	xorwf	_LCD_Light_On/(0+8),f
  6049  1CED  2CA3               	goto	l11191
  6050  1CEE                     l11233:	
  6051  1CEE  086F               	movf	_KeyCode^(0+128),w	;volatile
  6052  1CEF  3A1E               	xorlw	30
  6053  1CF0  1D03               	skipz
  6054  1CF1  2D04               	goto	l11241
  6055                           
  6056                           ;prog.c: 1320: KeyCode = 0;
  6057  1CF2  01EF               	clrf	_KeyCode^(0+128)	;volatile
  6058                           
  6059                           ;prog.c: 1321: LockSignals = 1;
  6060  1CF3  1283               	bcf	3,5	;RP0=0, select bank0
  6061  1CF4  165D               	bsf	_LockSignals/(0+8),_LockSignals& (0+7)
  6062                           
  6063                           ;prog.c: 1322: CurrentSignals = 0;
  6064  1CF5  1683               	bsf	3,5	;RP0=1, select bank3
  6065  1CF6  1703               	bsf	3,6	;RP1=1, select bank3
  6066  1CF7  3000               	movlw	0
  6067  1CF8  01DF               	clrf	_CurrentSignals^(0+384)
  6068                           
  6069                           ;prog.c: 1323: EEWR(251, LockSignals);
  6070  1CF9  1283               	bcf	3,5	;RP0=0, select bank0
  6071  1CFA  1303               	bcf	3,6	;RP1=0, select bank0
  6072  1CFB  1A5D               	btfsc	_LockSignals/(0+8),_LockSignals& (0+7)
  6073  1CFC  3001               	movlw	1
  6074  1CFD  1683               	bsf	3,5	;RP0=1, select bank1
  6075  1CFE  00A0               	movwf	?_EEWR^(0+128)
  6076  1CFF  30FB               	movlw	251
  6077  1D00  2568  160A  158A   	fcall	_EEWR
  6078                           
  6079                           ;prog.c: 1324: }else if(KeyCode==31){
  6080  1D03  2CA3               	goto	l11191
  6081  1D04                     l11241:	
  6082  1D04  086F               	movf	_KeyCode^(0+128),w	;volatile
  6083  1D05  3A1F               	xorlw	31
  6084  1D06  1D03               	skipz
  6085  1D07  2D10               	goto	l11249
  6086                           
  6087                           ;prog.c: 1325: KeyCode = 0;
  6088  1D08  01EF               	clrf	_KeyCode^(0+128)	;volatile
  6089                           
  6090                           ;prog.c: 1326: clrInd();
  6091  1D09  120A  118A  2690   	fcall	_clrInd
      +       160A  158A         
  6092                           
  6093                           ;prog.c: 1327: CurrentSignals = CurrentSignals^0b00000001;
  6094  1D0E  3001               	movlw	1
  6095  1D0F  2D27               	goto	L2
  6096  1D10                     l11249:	
  6097                           ;prog.c: 1328: }else if(KeyCode==32){
  6098                           
  6099  1D10  086F               	movf	_KeyCode^(0+128),w	;volatile
  6100  1D11  3A20               	xorlw	32
  6101  1D12  1D03               	skipz
  6102  1D13  2D1C               	goto	l11257
  6103                           
  6104                           ;prog.c: 1329: KeyCode = 0;
  6105  1D14  01EF               	clrf	_KeyCode^(0+128)	;volatile
  6106                           
  6107                           ;prog.c: 1330: clrInd();
  6108  1D15  120A  118A  2690   	fcall	_clrInd
      +       160A  158A         
  6109                           
  6110                           ;prog.c: 1331: CurrentSignals = CurrentSignals^0b00000010;
  6111  1D1A  3002               	movlw	2
  6112  1D1B  2D27               	goto	L2
  6113  1D1C                     l11257:	
  6114                           ;prog.c: 1332: }else if(KeyCode==33){
  6115                           
  6116  1D1C  086F               	movf	_KeyCode^(0+128),w	;volatile
  6117  1D1D  3A21               	xorlw	33
  6118  1D1E  1D03               	skipz
  6119  1D1F  2D2B               	goto	l11265
  6120                           
  6121                           ;prog.c: 1333: KeyCode = 0;
  6122  1D20  01EF               	clrf	_KeyCode^(0+128)	;volatile
  6123                           
  6124                           ;prog.c: 1334: clrInd();
  6125  1D21  120A  118A  2690   	fcall	_clrInd
      +       160A  158A         
  6126                           
  6127                           ;prog.c: 1335: CurrentSignals = CurrentSignals^0b00000100;
  6128  1D26  3004               	movlw	4
  6129  1D27                     L2:	
  6130  1D27  1683               	bsf	3,5	;RP0=1, select bank3
  6131  1D28  1703               	bsf	3,6	;RP1=1, select bank3
  6132  1D29  06DF               	xorwf	_CurrentSignals^(0+384),f
  6133                           
  6134                           ;prog.c: 1336: }else if(KeyCode==34){
  6135  1D2A  2CA3               	goto	l11191
  6136  1D2B                     l11265:	
  6137  1D2B  086F               	movf	_KeyCode^(0+128),w	;volatile
  6138  1D2C  3A22               	xorlw	34
  6139  1D2D  1D03               	skipz
  6140  1D2E  2D39               	goto	l11273
  6141                           
  6142                           ;prog.c: 1337: KeyCode = 0;
  6143  1D2F  01EF               	clrf	_KeyCode^(0+128)	;volatile
  6144                           
  6145                           ;prog.c: 1338: clrInd();
  6146  1D30  120A  118A  2690   	fcall	_clrInd
      +       160A  158A         
  6147                           
  6148                           ;prog.c: 1339: CurrentSignals = 0;
  6149  1D35  1683               	bsf	3,5	;RP0=1, select bank3
  6150  1D36  1703               	bsf	3,6	;RP1=1, select bank3
  6151  1D37  01DF               	clrf	_CurrentSignals^(0+384)
  6152                           
  6153                           ;prog.c: 1340: }else if(KeyCode==35){
  6154  1D38  2CA3               	goto	l11191
  6155  1D39                     l11273:	
  6156  1D39  086F               	movf	_KeyCode^(0+128),w	;volatile
  6157  1D3A  3A23               	xorlw	35
  6158  1D3B  1D03               	skipz
  6159  1D3C  2D4D               	goto	l11283
  6160                           
  6161                           ;prog.c: 1341: KeyCode = 0;
  6162  1D3D  01EF               	clrf	_KeyCode^(0+128)	;volatile
  6163                           
  6164                           ;prog.c: 1342: LockSignals = 0;
  6165  1D3E  1283               	bcf	3,5	;RP0=0, select bank0
  6166  1D3F  3000               	movlw	0
  6167  1D40  125D               	bcf	_LockSignals/(0+8),_LockSignals& (0+7)
  6168                           
  6169                           ;prog.c: 1343: EEWR(251, LockSignals);
  6170  1D41  1A5D               	btfsc	_LockSignals/(0+8),_LockSignals& (0+7)
  6171  1D42  3001               	movlw	1
  6172  1D43  1683               	bsf	3,5	;RP0=1, select bank1
  6173  1D44  00A0               	movwf	?_EEWR^(0+128)
  6174  1D45  30FB               	movlw	251
  6175  1D46  2568               	fcall	_EEWR
  6176                           
  6177                           ;prog.c: 1344: clrInd();
  6178  1D47  120A  118A  2690   	fcall	_clrInd
      +       160A  158A         
  6179                           
  6180                           ;prog.c: 1345: }else if(KeyCode==43 || KeyCode==36){
  6181  1D4C  2CA3               	goto	l11191
  6182  1D4D                     l11283:	
  6183  1D4D  086F               	movf	_KeyCode^(0+128),w	;volatile
  6184  1D4E  3A2B               	xorlw	43
  6185  1D4F  1903               	skipnz
  6186  1D50  2D55               	goto	l11287
  6187  1D51  086F               	movf	_KeyCode^(0+128),w	;volatile
  6188  1D52  3A24               	xorlw	36
  6189  1D53  1D03               	skipz
  6190  1D54  2CA3               	goto	l11191
  6191  1D55                     l11287:	
  6192                           
  6193                           ;prog.c: 1346: if(KeyCode==43){
  6194  1D55  086F               	movf	_KeyCode^(0+128),w	;volatile
  6195  1D56  3A2B               	xorlw	43
  6196  1D57  1D03               	skipz
  6197  1D58  2D62               	goto	l11291
  6198                           
  6199                           ;prog.c: 1347: NearTimeStart = Clock;
  6200  1D59  1703               	bsf	3,6	;RP1=1, select bank3
  6201  1D5A  085D               	movf	(_Clock+3)^(0+384),w
  6202  1D5B  00E4               	movwf	(_NearTimeStart+3)^(0+384)
  6203  1D5C  085C               	movf	(_Clock+2)^(0+384),w
  6204  1D5D  00E3               	movwf	(_NearTimeStart+2)^(0+384)
  6205  1D5E  085B               	movf	(_Clock+1)^(0+384),w
  6206  1D5F  00E2               	movwf	(_NearTimeStart+1)^(0+384)
  6207  1D60  085A               	movf	_Clock^(0+384),w
  6208  1D61  00E1               	movwf	_NearTimeStart^(0+384)
  6209  1D62                     l11291:	
  6210                           
  6211                           ;prog.c: 1348: }
  6212                           ;prog.c: 1349: KeyCode = 0;
  6213  1D62  1303               	bcf	3,6	;RP1=0, select bank1
  6214  1D63  01EF               	clrf	_KeyCode^(0+128)	;volatile
  6215                           
  6216                           ;prog.c: 1350: FillMinutes();
  6217  1D64  258B  160A  158A   	fcall	_FillMinutes
  6218  1D67  2C9D               	goto	L3
  6219  1D68                     __ptext2285:	
  6220 ;; =============== function _EERD ends ============
  6221                           
  6222                           
  6223 ;; *************** function _EEWR *****************
  6224 ;; Defined at:
  6225 ;;		line 391 in file "prog.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;  adress          1    wreg     unsigned char 
  6228 ;;  data            1    0[BANK1 ] unsigned char 
  6229 ;; Auto vars:     Size  Location     Type
  6230 ;;  adress          1    1[BANK1 ] unsigned char 
  6231 ;;  INTCON_BUP      1    2[BANK1 ] volatile unsigned char 
  6232 ;; Return value:  Size  Location     Type
  6233 ;;		None               void
  6234 ;; Registers used:
  6235 ;;		wreg
  6236 ;; Tracked objects:
  6237 ;;		On entry : 60/120
  6238 ;;		On exit  : 60/20
  6239 ;;		Unchanged: FFE00/0
  6240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6241 ;;      Params:         0       0       1       0       0
  6242 ;;      Locals:         0       0       2       0       0
  6243 ;;      Temps:          0       0       0       0       0
  6244 ;;      Totals:         0       0       3       0       0
  6245 ;;Total ram usage:        3 bytes
  6246 ;; Hardware stack levels used:    1
  6247 ;; Hardware stack levels required when called:    4
  6248 ;; This function calls:
  6249 ;;		Nothing
  6250 ;; This function is called by:
  6251 ;;		_WriteFourBytesEE
  6252 ;;		_main2
  6253 ;; This function uses a non-reentrant model
  6254 ;;
  6255  1D68                     _EEWR:	
  6256                           
  6257                           ; Regs used in _EEWR: [wreg]
  6258                           ;EEWR@adress stored from wreg
  6259  1D68  00A1               	movwf	EEWR@adress^(0+128)
  6260                           
  6261                           ;prog.c: 392: volatile unsigned char INTCON_BUP = INTCON;
  6262  1D69  080B               	movf	11,w	;volatile
  6263  1D6A  00A2               	movwf	EEWR@INTCON_BUP^(0+128)	;volatile
  6264                           
  6265                           ;prog.c: 393: GIE = 0;
  6266  1D6B  138B               	bcf	11,7
  6267  1D6C  0064               	clrwdt	;#
  6268                           
  6269                           ;prog.c: 395: EEADR = adress;
  6270  1D6D  1683               	bsf	3,5	;RP0=1, select bank1
  6271  1D6E  1303               	bcf	3,6	;RP1=0, select bank1
  6272  1D6F  0821               	movf	EEWR@adress^(0+128),w
  6273  1D70  1283               	bcf	3,5	;RP0=0, select bank2
  6274  1D71  1703               	bsf	3,6	;RP1=1, select bank2
  6275  1D72  008D               	movwf	13	;volatile
  6276                           
  6277                           ;prog.c: 396: EEDATA = data;
  6278  1D73  1683               	bsf	3,5	;RP0=1, select bank1
  6279  1D74  1303               	bcf	3,6	;RP1=0, select bank1
  6280  1D75  0820               	movf	EEWR@data^(0+128),w
  6281  1D76  1283               	bcf	3,5	;RP0=0, select bank2
  6282  1D77  1703               	bsf	3,6	;RP1=1, select bank2
  6283  1D78  008C               	movwf	12	;volatile
  6284                           
  6285                           ;prog.c: 397: EEPGD = 0;
  6286  1D79  1683               	bsf	3,5	;RP0=1, select bank3
  6287  1D7A  3055               	movlw	85
  6288  1D7B  138C               	bcf	12,7
  6289  1D7C  150C               	bsf	12,2
  6290                           
  6291                           ;prog.c: 399: EECON2 = 0x55;
  6292  1D7D  008D               	movwf	13	;volatile
  6293                           
  6294                           ;prog.c: 400: EECON2 = 0xAA;
  6295  1D7E  30AA               	movlw	170
  6296  1D7F  008D               	movwf	13	;volatile
  6297                           
  6298                           ;prog.c: 401: WR = 1;
  6299  1D80  148C               	bsf	12,1
  6300                           
  6301                           ;prog.c: 402: WREN = 0;
  6302  1D81  110C               	bcf	12,2
  6303  1D82                     l903:	
  6304                           ;prog.c: 403: while(WR==1){}
  6305                           
  6306  1D82  188C               	btfsc	12,1
  6307  1D83  2D82               	goto	l903
  6308                           
  6309                           ;prog.c: 404: EEIF = 0;
  6310  1D84  1283               	bcf	3,5	;RP0=0, select bank0
  6311  1D85  1303               	bcf	3,6	;RP1=0, select bank0
  6312  1D86  120D               	bcf	13,4
  6313                           
  6314                           ;prog.c: 405: INTCON = INTCON_BUP;
  6315  1D87  1683               	bsf	3,5	;RP0=1, select bank1
  6316  1D88  0822               	movf	EEWR@INTCON_BUP^(0+128),w	;volatile
  6317  1D89  008B               	movwf	11	;volatile
  6318  1D8A  0008               	return
  6319  1D8B                     __end_of_EEWR:	
  6320  1D8B                     __ptext2281:	
  6321 ;; =============== function _I2CInit ends ============
  6322                           
  6323                           
  6324 ;; *************** function _FillMinutes *****************
  6325 ;; Defined at:
  6326 ;;		line 1189 in file "prog.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;		None
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;		None
  6331 ;; Return value:  Size  Location     Type
  6332 ;;		None               void
  6333 ;; Registers used:
  6334 ;;		wreg
  6335 ;; Tracked objects:
  6336 ;;		On entry : 160/120
  6337 ;;		On exit  : 160/100
  6338 ;;		Unchanged: FFE9F/0
  6339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6340 ;;      Params:         0       0       0       0       0
  6341 ;;      Locals:         0       0       0       0       0
  6342 ;;      Temps:          0       0       0       0       0
  6343 ;;      Totals:         0       0       0       0       0
  6344 ;;Total ram usage:        0 bytes
  6345 ;; Hardware stack levels used:    1
  6346 ;; Hardware stack levels required when called:    4
  6347 ;; This function calls:
  6348 ;;		Nothing
  6349 ;; This function is called by:
  6350 ;;		_main2
  6351 ;; This function uses a non-reentrant model
  6352 ;;
  6353  1D8B                     _FillMinutes:	
  6354                           
  6355                           ;prog.c: 1190: Minutes = Clock - 3000;
  6356                           
  6357                           ; Regs used in _FillMinutes: [wreg]
  6358  1D8B  1703               	bsf	3,6	;RP1=1, select bank3
  6359  1D8C  085D               	movf	(_Clock+3)^(0+384),w
  6360  1D8D  1283               	bcf	3,5	;RP0=0, select bank0
  6361  1D8E  1303               	bcf	3,6	;RP1=0, select bank0
  6362  1D8F  00D5               	movwf	_Minutes+3
  6363  1D90  1683               	bsf	3,5	;RP0=1, select bank3
  6364  1D91  1703               	bsf	3,6	;RP1=1, select bank3
  6365  1D92  085C               	movf	(_Clock+2)^(0+384),w
  6366  1D93  1283               	bcf	3,5	;RP0=0, select bank0
  6367  1D94  1303               	bcf	3,6	;RP1=0, select bank0
  6368  1D95  00D4               	movwf	_Minutes+2
  6369  1D96  1683               	bsf	3,5	;RP0=1, select bank3
  6370  1D97  1703               	bsf	3,6	;RP1=1, select bank3
  6371  1D98  085B               	movf	(_Clock+1)^(0+384),w
  6372  1D99  1283               	bcf	3,5	;RP0=0, select bank0
  6373  1D9A  1303               	bcf	3,6	;RP1=0, select bank0
  6374  1D9B  00D3               	movwf	_Minutes+1
  6375  1D9C  1683               	bsf	3,5	;RP0=1, select bank3
  6376  1D9D  1703               	bsf	3,6	;RP1=1, select bank3
  6377  1D9E  085A               	movf	_Clock^(0+384),w
  6378  1D9F  1283               	bcf	3,5	;RP0=0, select bank0
  6379  1DA0  1303               	bcf	3,6	;RP1=0, select bank0
  6380  1DA1  00D2               	movwf	_Minutes
  6381  1DA2  3048               	movlw	72
  6382  1DA3  07D2               	addwf	_Minutes,f
  6383  1DA4  30F4               	movlw	244
  6384  1DA5  1803               	skipnc
  6385  1DA6  30F5               	movlw	245
  6386  1DA7  07D3               	addwf	_Minutes+1,f
  6387  1DA8  30FF               	movlw	255
  6388  1DA9  1C03               	skipc
  6389  1DAA  07D4               	addwf	_Minutes+2,f
  6390  1DAB  1C03               	skipc
  6391  1DAC  07D5               	addwf	_Minutes+3,f
  6392  1DAD  0008               	return
  6393  1DAE                     __end_of_FillMinutes:	
  6394  1DAE                     __ptext2255:	
  6395 ;; =============== function _FindNextTimeStart ends ============
  6396                           
  6397                           
  6398 ;; *************** function _lcd_off *****************
  6399 ;; Defined at:
  6400 ;;		line 683 in file "prog.c"
  6401 ;; Parameters:    Size  Location     Type
  6402 ;;		None
  6403 ;; Auto vars:     Size  Location     Type
  6404 ;;		None
  6405 ;; Return value:  Size  Location     Type
  6406 ;;		None               void
  6407 ;; Registers used:
  6408 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6409 ;; Tracked objects:
  6410 ;;		On entry : 20/160
  6411 ;;		On exit  : 60/0
  6412 ;;		Unchanged: 0/0
  6413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6414 ;;      Params:         0       0       0       0       0
  6415 ;;      Locals:         0       0       0       0       0
  6416 ;;      Temps:          0       0       0       0       0
  6417 ;;      Totals:         0       0       0       0       0
  6418 ;;Total ram usage:        0 bytes
  6419 ;; Hardware stack levels used:    1
  6420 ;; Hardware stack levels required when called:    6
  6421 ;; This function calls:
  6422 ;;		_lcd_send_byte
  6423 ;; This function is called by:
  6424 ;;		_TimeToInd
  6425 ;;		_main2
  6426 ;; This function uses a non-reentrant model
  6427 ;;
  6428  1DAE                     _lcd_off:	
  6429                           
  6430                           ;prog.c: 684: LCD_Light_On = 0;
  6431                           
  6432 ;; hardware stack exceeded
  6433                           ; Regs used in _lcd_off: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6434  1DAE  1283               	bcf	3,5	;RP0=0, select bank0
  6435  1DAF  1303               	bcf	3,6	;RP1=0, select bank0
  6436  1DB0  3008               	movlw	8
  6437  1DB1  115D               	bcf	_LCD_Light_On/(0+8),_LCD_Light_On& (0+7)
  6438                           
  6439                           ;prog.c: 685: lcd_send_byte(0b00001000);
  6440  1DB2  26E9               	fcall	_lcd_send_byte
  6441                           
  6442                           ;prog.c: 686: LCD_Power_On = 0;
  6443  1DB3  1283               	bcf	3,5	;RP0=0, select bank0
  6444  1DB4  1303               	bcf	3,6	;RP1=0, select bank0
  6445  1DB5  11DD               	bcf	_LCD_Power_On/(0+8),_LCD_Power_On& (0+7)
  6446                           
  6447                           ;prog.c: 687: RC2 = 0;
  6448  1DB6  1107               	bcf	7,2
  6449  1DB7  0008               	return
  6450  1DB8                     __end_of_lcd_off:	
  6451  1DB8                     __ptext2254:	
  6452  1DB8                     __end_of_TimeEdit:	
  6453                           
  6454 ;; =============== function _TimeEdit ends ============
  6455 ;; *************** function _FindNextTimeStart *****************
  6456 ;; Defined at:
  6457 ;;		line 1098 in file "prog.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;  TimeFrom        1    wreg     PTR unsigned long 
  6460 ;;		 -> NearTimeStart(4), 
  6461 ;; Auto vars:     Size  Location     Type
  6462 ;;  TimeFrom        1   59[BANK1 ] PTR unsigned long 
  6463 ;;		 -> NearTimeStart(4), 
  6464 ;;  TimeOfSignal    4   55[BANK1 ] unsigned long 
  6465 ;;  DayOn           1   43[BANK1 ] unsigned char 
  6466 ;;  DayIndex        1   63[BANK1 ] unsigned char 
  6467 ;;  Data            4   48[BANK1 ] unsigned long 
  6468 ;;  TimeStart       2   52[BANK1 ] unsigned int 
  6469 ;;  TimeStop        2   40[BANK1 ] unsigned int 
  6470 ;;  Days            1   61[BANK1 ] unsigned char 
  6471 ;;  Signals         1   60[BANK1 ] unsigned char 
  6472 ;;  LastFoundTim    4   44[BANK1 ] unsigned long 
  6473 ;;  adress          1   62[BANK1 ] unsigned char 
  6474 ;;  TimeIsFound     1   54[BANK1 ] unsigned char 
  6475 ;;  adressStart     1   42[BANK1 ] unsigned char 
  6476 ;; Return value:  Size  Location     Type
  6477 ;;                  1    wreg      unsigned char 
  6478 ;; Registers used:
  6479 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6480 ;; Tracked objects:
  6481 ;;		On entry : 0/160
  6482 ;;		On exit  : 160/120
  6483 ;;		Unchanged: FFE00/0
  6484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6485 ;;      Params:         0       0       0       0       0
  6486 ;;      Locals:         0       0      24       0       0
  6487 ;;      Temps:          0       0       4       0       0
  6488 ;;      Totals:         0       0      28       0       0
  6489 ;;Total ram usage:       28 bytes
  6490 ;; Hardware stack levels used:    1
  6491 ;; Hardware stack levels required when called:    6
  6492 ;; This function calls:
  6493 ;;		_ReadFourBytesEE
  6494 ;;		_ParseDataRecord
  6495 ;;		___lmul
  6496 ;; This function is called by:
  6497 ;;		_TimeToInd
  6498 ;;		_main2
  6499 ;; This function uses a non-reentrant model
  6500 ;;
  6501  1DB8                     _FindNextTimeStart:	
  6502                           
  6503 ;; hardware stack exceeded
  6504                           ; Regs used in _FindNextTimeStart: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6505                           ;FindNextTimeStart@TimeFrom stored from wreg
  6506  1DB8  1683               	bsf	3,5	;RP0=1, select bank1
  6507  1DB9  1303               	bcf	3,6	;RP1=0, select bank1
  6508  1DBA  00DB               	movwf	FindNextTimeStart@TimeFrom^(0+128)
  6509  1DBB  30F0               	movlw	240
  6510                           
  6511                           ;prog.c: 1100: unsigned char adress = 0;
  6512  1DBC  01DE               	clrf	FindNextTimeStart@adress^(0+128)
  6513                           
  6514                           ;prog.c: 1101: unsigned char adressStart = 240;
  6515  1DBD  00CA               	movwf	FindNextTimeStart@adressStart^(0+128)
  6516                           
  6517                           ;prog.c: 1102: unsigned char TimeIsFound = 0;
  6518  1DBE  01D6               	clrf	FindNextTimeStart@TimeIsFound^(0+128)
  6519  1DBF                     l10325:	
  6520                           
  6521                           ;prog.c: 1106: unsigned long int Data = ReadFourBytesEE(adress);
  6522  1DBF  085E               	movf	FindNextTimeStart@adress^(0+128),w
  6523  1DC0  120A  118A  27A3   	fcall	_ReadFourBytesEE
      +       160A  158A         
  6524  1DC5  0834               	movf	(?_ReadFourBytesEE+3)^(0+128),w
  6525  1DC6  00D3               	movwf	(FindNextTimeStart@Data+3)^(0+128)
  6526  1DC7  0833               	movf	(?_ReadFourBytesEE+2)^(0+128),w
  6527  1DC8  00D2               	movwf	(FindNextTimeStart@Data+2)^(0+128)
  6528  1DC9  0832               	movf	(?_ReadFourBytesEE+1)^(0+128),w
  6529  1DCA  00D1               	movwf	(FindNextTimeStart@Data+1)^(0+128)
  6530  1DCB  0831               	movf	?_ReadFourBytesEE^(0+128),w
  6531  1DCC  00D0               	movwf	FindNextTimeStart@Data^(0+128)
  6532                           
  6533                           ;prog.c: 1108: adress+=4;
  6534  1DCD  3004               	movlw	4
  6535  1DCE  07DE               	addwf	FindNextTimeStart@adress^(0+128),f
  6536                           
  6537                           ;prog.c: 1109: if(Data==0xFFFFFFFF){
  6538  1DCF  0A50               	incf	FindNextTimeStart@Data^(0+128),w
  6539  1DD0  1903               	skipnz
  6540  1DD1  0A51               	incf	(FindNextTimeStart@Data+1)^(0+128),w
  6541  1DD2  1903               	skipnz
  6542  1DD3  0A52               	incf	(FindNextTimeStart@Data+2)^(0+128),w
  6543  1DD4  1903               	skipnz
  6544  1DD5  0A53               	incf	(FindNextTimeStart@Data+3)^(0+128),w
  6545  1DD6  1903               	btfsc	3,2
  6546  1DD7  2E8B               	goto	l10371
  6547                           
  6548                           ;prog.c: 1111: }
  6549                           ;prog.c: 1112: unsigned int TimeStart;
  6550                           ;prog.c: 1113: unsigned int TimeStop;
  6551                           ;prog.c: 1114: unsigned char Days;
  6552                           ;prog.c: 1115: unsigned char Signals;
  6553                           ;prog.c: 1116: ParseDataRecord(Data, &TimeStart, &TimeStop, &Days, &Signals);
  6554  1DD8  0853               	movf	(FindNextTimeStart@Data+3)^(0+128),w
  6555  1DD9  00A6               	movwf	(?_ParseDataRecord+3)^(0+128)
  6556  1DDA  0852               	movf	(FindNextTimeStart@Data+2)^(0+128),w
  6557  1DDB  00A5               	movwf	(?_ParseDataRecord+2)^(0+128)
  6558  1DDC  0851               	movf	(FindNextTimeStart@Data+1)^(0+128),w
  6559  1DDD  00A4               	movwf	(?_ParseDataRecord+1)^(0+128)
  6560  1DDE  0850               	movf	FindNextTimeStart@Data^(0+128),w
  6561  1DDF  00A3               	movwf	?_ParseDataRecord^(0+128)
  6562  1DE0  30D4               	movlw	FindNextTimeStart@TimeStart& (0+255)
  6563  1DE1  00A7               	movwf	(?_ParseDataRecord+4)^(0+128)
  6564  1DE2  30C8               	movlw	FindNextTimeStart@TimeStop& (0+255)
  6565  1DE3  01A8               	clrf	(?_ParseDataRecord+5)^(0+128)
  6566  1DE4  00A9               	movwf	(?_ParseDataRecord+6)^(0+128)
  6567  1DE5  30DD               	movlw	FindNextTimeStart@Days& (0+255)
  6568  1DE6  01AA               	clrf	(?_ParseDataRecord+7)^(0+128)
  6569  1DE7  00AB               	movwf	(?_ParseDataRecord+8)^(0+128)
  6570  1DE8  30DC               	movlw	FindNextTimeStart@Signals& (0+255)
  6571  1DE9  01AC               	clrf	(?_ParseDataRecord+9)^(0+128)
  6572  1DEA  00AD               	movwf	(?_ParseDataRecord+10)^(0+128)
  6573  1DEB  01AE               	clrf	(?_ParseDataRecord+11)^(0+128)
  6574  1DEC  120A  118A  272F   	fcall	_ParseDataRecord
      +       160A  158A         
  6575                           
  6576                           ;prog.c: 1118: if(Signals==0){
  6577  1DF1  08DC               	movf	FindNextTimeStart@Signals^(0+128),f
  6578  1DF2  1903               	btfsc	3,2
  6579  1DF3  2E8B               	goto	l10371
  6580                           
  6581                           ;prog.c: 1120: }
  6582                           ;prog.c: 1121: for(char DayIndex = 0; DayIndex<7; DayIndex++){
  6583  1DF4  01DF               	clrf	FindNextTimeStart@DayIndex^(0+128)
  6584  1DF5                     l10345:	
  6585                           
  6586                           ;prog.c: 1122: unsigned char DayOn = Days%2;
  6587  1DF5  085D               	movf	FindNextTimeStart@Days^(0+128),w
  6588  1DF6  00CB               	movwf	FindNextTimeStart@DayOn^(0+128)
  6589  1DF7  3001               	movlw	1
  6590  1DF8  05CB               	andwf	FindNextTimeStart@DayOn^(0+128),f
  6591                           
  6592                           ;prog.c: 1123: Days /=2;
  6593  1DF9  1003               	clrc
  6594  1DFA  0CDD               	rrf	FindNextTimeStart@Days^(0+128),f
  6595                           
  6596                           ;prog.c: 1124: if(DayOn!=1){
  6597  1DFB  0B4B               	decfsz	FindNextTimeStart@DayOn^(0+128),w
  6598  1DFC  2E86               	goto	l1252
  6599                           
  6600                           ;prog.c: 1126: }
  6601                           ;prog.c: 1127: unsigned long int TimeOfSignals = ((unsigned long int)DayIndex * 86400 + 
      +                          (unsigned long int)TimeStart * 60) * 100;
  6602  1DFD  0854               	movf	FindNextTimeStart@TimeStart^(0+128),w
  6603  1DFE  00A0               	movwf	?___lmul^(0+128)
  6604  1DFF  0855               	movf	(FindNextTimeStart@TimeStart+1)^(0+128),w
  6605  1E00  00A1               	movwf	(?___lmul^(0+128)+1)
  6606  1E01  303C               	movlw	60
  6607  1E02  01A2               	clrf	(?___lmul^(0+128)+2)
  6608  1E03  01A3               	clrf	(?___lmul^(0+128)+3)
  6609  1E04  00A4               	movwf	(?___lmul^(0+128)+4)
  6610  1E05  01A5               	clrf	((?___lmul+1)^(0+128)+4)
  6611  1E06  01A6               	clrf	((?___lmul+2)^(0+128)+4)
  6612  1E07  01A7               	clrf	((?___lmul+3)^(0+128)+4)
  6613  1E08  26AC  160A  158A   	fcall	___lmul
  6614  1E0B  0820               	movf	?___lmul^(0+128),w
  6615  1E0C  00C4               	movwf	??_FindNextTimeStart^(0+128)
  6616  1E0D  0821               	movf	(?___lmul+1)^(0+128),w
  6617  1E0E  00C5               	movwf	(??_FindNextTimeStart^(0+128)+1)
  6618  1E0F  0822               	movf	(?___lmul+2)^(0+128),w
  6619  1E10  00C6               	movwf	(??_FindNextTimeStart^(0+128)+2)
  6620  1E11  0823               	movf	(?___lmul+3)^(0+128),w
  6621  1E12  00C7               	movwf	(??_FindNextTimeStart^(0+128)+3)
  6622  1E13  085F               	movf	FindNextTimeStart@DayIndex^(0+128),w
  6623  1E14  00A0               	movwf	?___lmul^(0+128)
  6624  1E15  3001               	movlw	1
  6625  1E16  01A1               	clrf	(?___lmul+1)^(0+128)
  6626  1E17  01A2               	clrf	(?___lmul+2)^(0+128)
  6627  1E18  01A3               	clrf	(?___lmul+3)^(0+128)
  6628  1E19  01A7               	clrf	((?___lmul+3)^(0+128)+4)
  6629  1E1A  00A6               	movwf	((?___lmul+2)^(0+128)+4)
  6630  1E1B  3051               	movlw	81
  6631  1E1C  00A5               	movwf	((?___lmul+1)^(0+128)+4)
  6632  1E1D  3080               	movlw	128
  6633  1E1E  00A4               	movwf	(?___lmul^(0+128)+4)
  6634  1E1F  26AC  160A  158A   	fcall	___lmul
  6635  1E22  0820               	movf	?___lmul^(0+128),w
  6636  1E23  07C4               	addwf	??_FindNextTimeStart^(0+128),f
  6637  1E24  0821               	movf	(?___lmul+1)^(0+128),w
  6638  1E25  1803               	skipnc
  6639  1E26  0F21               	incfsz	(?___lmul+1)^(0+128),w
  6640  1E27  07C5               	addwf	(??_FindNextTimeStart^(0+128)+1),f
  6641  1E28  0822               	movf	(?___lmul+2)^(0+128),w
  6642  1E29  1803               	skipnc
  6643  1E2A  0F22               	incfsz	(?___lmul+2)^(0+128),w
  6644  1E2B  07C6               	addwf	(??_FindNextTimeStart^(0+128)+2),f
  6645  1E2C  0823               	movf	(?___lmul+3)^(0+128),w
  6646  1E2D  1803               	skipnc
  6647  1E2E  0A23               	incf	(?___lmul+3)^(0+128),w
  6648  1E2F  07C7               	addwf	(??_FindNextTimeStart^(0+128)+3),f
  6649  1E30  0847               	movf	(??_FindNextTimeStart+3)^(0+128),w
  6650  1E31  00A3               	movwf	(?___lmul+3)^(0+128)
  6651  1E32  0846               	movf	(??_FindNextTimeStart+2)^(0+128),w
  6652  1E33  00A2               	movwf	(?___lmul+2)^(0+128)
  6653  1E34  0845               	movf	(??_FindNextTimeStart+1)^(0+128),w
  6654  1E35  00A1               	movwf	(?___lmul+1)^(0+128)
  6655  1E36  0844               	movf	??_FindNextTimeStart^(0+128),w
  6656  1E37  00A0               	movwf	?___lmul^(0+128)
  6657  1E38  3064               	movlw	100
  6658  1E39  00A4               	movwf	(?___lmul^(0+128)+4)
  6659  1E3A  01A5               	clrf	((?___lmul+1)^(0+128)+4)
  6660  1E3B  01A6               	clrf	((?___lmul+2)^(0+128)+4)
  6661  1E3C  01A7               	clrf	((?___lmul+3)^(0+128)+4)
  6662  1E3D  26AC  160A  158A   	fcall	___lmul
  6663  1E40  0823               	movf	(?___lmul+3)^(0+128),w
  6664  1E41  00DA               	movwf	(FindNextTimeStart@TimeOfSignals+3)^(0+128)
  6665  1E42  0822               	movf	(?___lmul+2)^(0+128),w
  6666  1E43  00D9               	movwf	(FindNextTimeStart@TimeOfSignals+2)^(0+128)
  6667  1E44  0821               	movf	(?___lmul+1)^(0+128),w
  6668  1E45  00D8               	movwf	(FindNextTimeStart@TimeOfSignals+1)^(0+128)
  6669  1E46  0820               	movf	?___lmul^(0+128),w
  6670  1E47  00D7               	movwf	FindNextTimeStart@TimeOfSignals^(0+128)
  6671                           
  6672                           ;prog.c: 1129: if((TimeOfSignals < LastFoundTimeStart || TimeIsFound==0) && TimeOfSignal
      +                          s > *TimeFrom){
  6673  1E48  084F               	movf	(FindNextTimeStart@LastFoundTimeStart+3)^(0+128),w
  6674  1E49  025A               	subwf	(FindNextTimeStart@TimeOfSignals+3)^(0+128),w
  6675  1E4A  1D03               	skipz
  6676  1E4B  2E56               	goto	u7865
  6677  1E4C  084E               	movf	(FindNextTimeStart@LastFoundTimeStart+2)^(0+128),w
  6678  1E4D  0259               	subwf	(FindNextTimeStart@TimeOfSignals+2)^(0+128),w
  6679  1E4E  1D03               	skipz
  6680  1E4F  2E56               	goto	u7865
  6681  1E50  084D               	movf	(FindNextTimeStart@LastFoundTimeStart+1)^(0+128),w
  6682  1E51  0258               	subwf	(FindNextTimeStart@TimeOfSignals+1)^(0+128),w
  6683  1E52  1D03               	skipz
  6684  1E53  2E56               	goto	u7865
  6685  1E54  084C               	movf	FindNextTimeStart@LastFoundTimeStart^(0+128),w
  6686  1E55  0257               	subwf	FindNextTimeStart@TimeOfSignals^(0+128),w
  6687  1E56                     u7865:	
  6688  1E56  1C03               	skipc
  6689  1E57  2E5B               	goto	l10361
  6690  1E58  08D6               	movf	FindNextTimeStart@TimeIsFound^(0+128),f
  6691  1E59  1D03               	skipz
  6692  1E5A  2E86               	goto	l1252
  6693  1E5B                     l10361:	
  6694  1E5B  085B               	movf	FindNextTimeStart@TimeFrom^(0+128),w
  6695  1E5C  0084               	movwf	4
  6696  1E5D  1783               	bsf	3,7	;select IRP bank2
  6697  1E5E  0800               	movf	0,w
  6698  1E5F  00C4               	movwf	??_FindNextTimeStart^(0+128)
  6699  1E60  0A84               	incf	4,f
  6700  1E61  0800               	movf	0,w
  6701  1E62  00C5               	movwf	(??_FindNextTimeStart^(0+128)+1)
  6702  1E63  0A84               	incf	4,f
  6703  1E64  0800               	movf	0,w
  6704  1E65  00C6               	movwf	(??_FindNextTimeStart^(0+128)+2)
  6705  1E66  0A84               	incf	4,f
  6706  1E67  0800               	movf	0,w
  6707  1E68  00C7               	movwf	(??_FindNextTimeStart^(0+128)+3)
  6708  1E69  085A               	movf	(FindNextTimeStart@TimeOfSignals+3)^(0+128),w
  6709  1E6A  0247               	subwf	(??_FindNextTimeStart+3)^(0+128),w
  6710  1E6B  1D03               	skipz
  6711  1E6C  2E77               	goto	u7885
  6712  1E6D  0859               	movf	(FindNextTimeStart@TimeOfSignals+2)^(0+128),w
  6713  1E6E  0246               	subwf	(??_FindNextTimeStart+2)^(0+128),w
  6714  1E6F  1D03               	skipz
  6715  1E70  2E77               	goto	u7885
  6716  1E71  0858               	movf	(FindNextTimeStart@TimeOfSignals+1)^(0+128),w
  6717  1E72  0245               	subwf	(??_FindNextTimeStart+1)^(0+128),w
  6718  1E73  1D03               	skipz
  6719  1E74  2E77               	goto	u7885
  6720  1E75  0857               	movf	FindNextTimeStart@TimeOfSignals^(0+128),w
  6721  1E76  0244               	subwf	??_FindNextTimeStart^(0+128),w
  6722  1E77                     u7885:	
  6723  1E77  1803               	skipnc
  6724  1E78  2E86               	goto	l1252
  6725                           
  6726                           ;prog.c: 1130: TimeIsFound = 1;
  6727  1E79  01D6               	clrf	FindNextTimeStart@TimeIsFound^(0+128)
  6728  1E7A  0AD6               	incf	FindNextTimeStart@TimeIsFound^(0+128),f
  6729                           
  6730                           ;prog.c: 1131: LastFoundTimeStart = TimeOfSignals;
  6731  1E7B  085A               	movf	(FindNextTimeStart@TimeOfSignals+3)^(0+128),w
  6732  1E7C  00CF               	movwf	(FindNextTimeStart@LastFoundTimeStart+3)^(0+128)
  6733  1E7D  0859               	movf	(FindNextTimeStart@TimeOfSignals+2)^(0+128),w
  6734  1E7E  00CE               	movwf	(FindNextTimeStart@LastFoundTimeStart+2)^(0+128)
  6735  1E7F  0858               	movf	(FindNextTimeStart@TimeOfSignals+1)^(0+128),w
  6736  1E80  00CD               	movwf	(FindNextTimeStart@LastFoundTimeStart+1)^(0+128)
  6737  1E81  0857               	movf	FindNextTimeStart@TimeOfSignals^(0+128),w
  6738  1E82  00CC               	movwf	FindNextTimeStart@LastFoundTimeStart^(0+128)
  6739                           
  6740                           ;prog.c: 1132: adressStart = adress-4;
  6741  1E83  085E               	movf	FindNextTimeStart@adress^(0+128),w
  6742  1E84  3EFC               	addlw	252
  6743  1E85  00CA               	movwf	FindNextTimeStart@adressStart^(0+128)
  6744  1E86                     l1252:	
  6745  1E86  3007               	movlw	7
  6746  1E87  0ADF               	incf	FindNextTimeStart@DayIndex^(0+128),f
  6747  1E88  025F               	subwf	FindNextTimeStart@DayIndex^(0+128),w
  6748  1E89  1C03               	skipc
  6749  1E8A  2DF5               	goto	l10345
  6750  1E8B                     l10371:	
  6751                           
  6752                           ;prog.c: 1133: }
  6753                           ;prog.c: 1134: }
  6754                           ;prog.c: 1135: }while(adress<240);
  6755  1E8B  30F0               	movlw	240
  6756  1E8C  025E               	subwf	FindNextTimeStart@adress^(0+128),w
  6757  1E8D  1C03               	skipc
  6758  1E8E  2DBF               	goto	l10325
  6759                           
  6760                           ;prog.c: 1137: if(TimeIsFound==1){
  6761  1E8F  0B56               	decfsz	FindNextTimeStart@TimeIsFound^(0+128),w
  6762  1E90  2EA0               	goto	l10377
  6763                           
  6764                           ;prog.c: 1138: *TimeFrom = LastFoundTimeStart;
  6765  1E91  085B               	movf	FindNextTimeStart@TimeFrom^(0+128),w
  6766  1E92  0084               	movwf	4
  6767  1E93  084C               	movf	FindNextTimeStart@LastFoundTimeStart^(0+128),w
  6768  1E94  1783               	bsf	3,7	;select IRP bank2
  6769  1E95  0080               	movwf	0
  6770  1E96  0A84               	incf	4,f
  6771  1E97  084D               	movf	(FindNextTimeStart@LastFoundTimeStart+1)^(0+128),w
  6772  1E98  0080               	movwf	0
  6773  1E99  0A84               	incf	4,f
  6774  1E9A  084E               	movf	(FindNextTimeStart@LastFoundTimeStart+2)^(0+128),w
  6775  1E9B  0080               	movwf	0
  6776  1E9C  0A84               	incf	4,f
  6777  1E9D  084F               	movf	(FindNextTimeStart@LastFoundTimeStart+3)^(0+128),w
  6778  1E9E  0080               	movwf	0
  6779                           
  6780                           ;prog.c: 1139: }else{
  6781  1E9F  2EAA               	goto	l10379
  6782  1EA0                     l10377:	
  6783                           
  6784                           ;prog.c: 1140: *TimeFrom = 0;
  6785  1EA0  085B               	movf	FindNextTimeStart@TimeFrom^(0+128),w
  6786  1EA1  0084               	movwf	4
  6787  1EA2  1783               	bsf	3,7	;select IRP bank2
  6788  1EA3  0180               	clrf	0
  6789  1EA4  0A84               	incf	4,f
  6790  1EA5  0180               	clrf	0
  6791  1EA6  0A84               	incf	4,f
  6792  1EA7  0180               	clrf	0
  6793  1EA8  0A84               	incf	4,f
  6794  1EA9  0180               	clrf	0
  6795  1EAA                     l10379:	
  6796                           
  6797                           ;prog.c: 1141: }
  6798                           ;prog.c: 1142: return adressStart;
  6799  1EAA  084A               	movf	FindNextTimeStart@adressStart^(0+128),w
  6800  1EAB  0008               	return
  6801  1EAC                     __end_of_FindNextTimeStart:	
  6802  1EAC                     __ptext2272:	
  6803 ;; =============== function ___llmod ends ============
  6804                           
  6805                           
  6806 ;; *************** function ___lmul *****************
  6807 ;; Defined at:
  6808 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lmul.c"
  6809 ;; Parameters:    Size  Location     Type
  6810 ;;  multiplier      4    0[BANK1 ] unsigned long 
  6811 ;;  multiplicand    4    4[BANK1 ] unsigned long 
  6812 ;; Auto vars:     Size  Location     Type
  6813 ;;  product         4    8[BANK1 ] unsigned long 
  6814 ;; Return value:  Size  Location     Type
  6815 ;;                  4    0[BANK1 ] unsigned long 
  6816 ;; Registers used:
  6817 ;;		wreg, status,2, status,0
  6818 ;; Tracked objects:
  6819 ;;		On entry : 60/120
  6820 ;;		On exit  : 60/120
  6821 ;;		Unchanged: FFF9F/0
  6822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6823 ;;      Params:         0       0       8       0       0
  6824 ;;      Locals:         0       0       4       0       0
  6825 ;;      Temps:          0       0       0       0       0
  6826 ;;      Totals:         0       0      12       0       0
  6827 ;;Total ram usage:       12 bytes
  6828 ;; Hardware stack levels used:    1
  6829 ;; Hardware stack levels required when called:    4
  6830 ;; This function calls:
  6831 ;;		Nothing
  6832 ;; This function is called by:
  6833 ;;		_FindNextTimeStart
  6834 ;;		_WriteTime
  6835 ;; This function uses a non-reentrant model
  6836 ;;
  6837  1EAC                     ___lmul:	
  6838                           
  6839                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6840  1EAC  01A8               	clrf	___lmul@product^(0+128)
  6841  1EAD  01A9               	clrf	(___lmul@product+1)^(0+128)
  6842  1EAE  01AA               	clrf	(___lmul@product+2)^(0+128)
  6843  1EAF  01AB               	clrf	(___lmul@product+3)^(0+128)
  6844  1EB0                     l2110:	
  6845  1EB0  1C20               	btfss	___lmul@multiplier^(0+128),0
  6846  1EB1  2EC6               	goto	l9955
  6847  1EB2  0824               	movf	___lmul@multiplicand^(0+128),w
  6848  1EB3  07A8               	addwf	___lmul@product^(0+128),f
  6849  1EB4  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
  6850  1EB5  1103               	clrz
  6851  1EB6  1803               	skipnc
  6852  1EB7  3E01               	addlw	1
  6853  1EB8  1D03               	btfss	3,2
  6854  1EB9  07A9               	addwf	(___lmul@product+1)^(0+128),f
  6855  1EBA  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
  6856  1EBB  1103               	clrz
  6857  1EBC  1803               	skipnc
  6858  1EBD  3E01               	addlw	1
  6859  1EBE  1D03               	btfss	3,2
  6860  1EBF  07AA               	addwf	(___lmul@product+2)^(0+128),f
  6861  1EC0  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
  6862  1EC1  1103               	clrz
  6863  1EC2  1803               	skipnc
  6864  1EC3  3E01               	addlw	1
  6865  1EC4  1D03               	btfss	3,2
  6866  1EC5  07AB               	addwf	(___lmul@product+3)^(0+128),f
  6867  1EC6                     l9955:	
  6868  1EC6  1003               	clrc
  6869  1EC7  0DA4               	rlf	___lmul@multiplicand^(0+128),f
  6870  1EC8  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
  6871  1EC9  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
  6872  1ECA  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
  6873  1ECB  1003               	clrc
  6874  1ECC  0CA3               	rrf	(___lmul@multiplier+3)^(0+128),f
  6875  1ECD  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
  6876  1ECE  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
  6877  1ECF  0CA0               	rrf	___lmul@multiplier^(0+128),f
  6878  1ED0  0823               	movf	(___lmul@multiplier+3)^(0+128),w
  6879  1ED1  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
  6880  1ED2  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
  6881  1ED3  0420               	iorwf	___lmul@multiplier^(0+128),w
  6882  1ED4  1D03               	skipz
  6883  1ED5  2EB0               	goto	l2110
  6884  1ED6  082B               	movf	(___lmul@product+3)^(0+128),w
  6885  1ED7  00A3               	movwf	(?___lmul+3)^(0+128)
  6886  1ED8  082A               	movf	(___lmul@product+2)^(0+128),w
  6887  1ED9  00A2               	movwf	(?___lmul+2)^(0+128)
  6888  1EDA  0829               	movf	(___lmul@product+1)^(0+128),w
  6889  1EDB  00A1               	movwf	(?___lmul+1)^(0+128)
  6890  1EDC  0828               	movf	___lmul@product^(0+128),w
  6891  1EDD  00A0               	movwf	?___lmul^(0+128)
  6892  1EDE  0008               	return
  6893  1EDF                     __end_of___lmul:	
  6894  1EDF                     __ptext2248:	
  6895  1EDF                     __end_of_Scheduler:	
  6896                           
  6897 ;; =============== function _Scheduler ends ============
  6898 ;; *************** function _lcd_on *****************
  6899 ;; Defined at:
  6900 ;;		line 689 in file "prog.c"
  6901 ;; Parameters:    Size  Location     Type
  6902 ;;		None
  6903 ;; Auto vars:     Size  Location     Type
  6904 ;;		None
  6905 ;; Return value:  Size  Location     Type
  6906 ;;		None               void
  6907 ;; Registers used:
  6908 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6909 ;; Tracked objects:
  6910 ;;		On entry : 40/100
  6911 ;;		On exit  : 60/0
  6912 ;;		Unchanged: 0/0
  6913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6914 ;;      Params:         0       0       0       0       0
  6915 ;;      Locals:         0       0       0       0       0
  6916 ;;      Temps:          0       0       0       0       0
  6917 ;;      Totals:         0       0       0       0       0
  6918 ;;Total ram usage:        0 bytes
  6919 ;; Hardware stack levels used:    1
  6920 ;; Hardware stack levels required when called:    7
  6921 ;; This function calls:
  6922 ;;		_lcd_init
  6923 ;;		_lcd_send_byte
  6924 ;; This function is called by:
  6925 ;;		_main
  6926 ;;		_main2
  6927 ;; This function uses a non-reentrant model
  6928 ;;
  6929  1EDF                     _lcd_on:	
  6930                           
  6931                           ;prog.c: 690: lcd_init();
  6932                           
  6933 ;; hardware stack exceeded
  6934                           ; Regs used in _lcd_on: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6935  1EDF  240B  160A  158A   	fcall	_lcd_init
  6936                           
  6937                           ;prog.c: 691: lcd_send_byte(0b00001100);
  6938  1EE2  300C               	movlw	12
  6939  1EE3  26E9               	fcall	_lcd_send_byte
  6940                           
  6941                           ;prog.c: 692: LCD_Power_On = 1;
  6942  1EE4  1283               	bcf	3,5	;RP0=0, select bank0
  6943  1EE5  1303               	bcf	3,6	;RP1=0, select bank0
  6944  1EE6  15DD               	bsf	_LCD_Power_On/(0+8),_LCD_Power_On& (0+7)
  6945                           
  6946                           ;prog.c: 693: RC2 = 1;
  6947  1EE7  1507               	bsf	7,2
  6948  1EE8  0008               	return
  6949  1EE9                     __end_of_lcd_on:	
  6950  1EE9                     __ptext2260:	
  6951 ;; =============== function _FindCell ends ============
  6952                           
  6953                           
  6954 ;; *************** function _lcd_send_byte *****************
  6955 ;; Defined at:
  6956 ;;		line 677 in file "prog.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;  data            1    wreg     unsigned char 
  6959 ;; Auto vars:     Size  Location     Type
  6960 ;;  data            1    8[BANK1 ] unsigned char 
  6961 ;; Return value:  Size  Location     Type
  6962 ;;		None               void
  6963 ;; Registers used:
  6964 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6965 ;; Tracked objects:
  6966 ;;		On entry : 0/120
  6967 ;;		On exit  : 0/0
  6968 ;;		Unchanged: 0/0
  6969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6970 ;;      Params:         0       0       0       0       0
  6971 ;;      Locals:         0       0       1       0       0
  6972 ;;      Temps:          0       0       1       0       0
  6973 ;;      Totals:         0       0       2       0       0
  6974 ;;Total ram usage:        2 bytes
  6975 ;; Hardware stack levels used:    1
  6976 ;; Hardware stack levels required when called:    5
  6977 ;; This function calls:
  6978 ;;		_lcd_send_initial_half_byte
  6979 ;; This function is called by:
  6980 ;;		_lcd_off
  6981 ;;		_lcd_on
  6982 ;;		_lcd_init
  6983 ;; This function uses a non-reentrant model
  6984 ;;
  6985  1EE9                     _lcd_send_byte:	
  6986                           
  6987 ;; hardware stack exceeded
  6988                           ; Regs used in _lcd_send_byte: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6989                           ;lcd_send_byte@data stored from wreg
  6990  1EE9  1683               	bsf	3,5	;RP0=1, select bank1
  6991  1EEA  1303               	bcf	3,6	;RP1=0, select bank1
  6992  1EEB  00A8               	movwf	lcd_send_byte@data^(0+128)
  6993                           
  6994                           ;prog.c: 678: lcd_send_initial_half_byte((data & 0b11110000) / 16);
  6995  1EEC  0E28               	swapf	lcd_send_byte@data^(0+128),w
  6996  1EED  390F               	andlw	15
  6997  1EEE  2705  160A  158A   	fcall	_lcd_send_initial_half_byte
  6998                           
  6999                           ;prog.c: 679: _delay((unsigned long)((40)*(20000000/4000000.0)));
  7000  1EF1  3042               	movlw	66
  7001  1EF2  1683               	bsf	3,5	;RP0=1, select bank1
  7002  1EF3  00A7               	movwf	??_lcd_send_byte^(0+128)
  7003  1EF4                     u9427:	
  7004  1EF4  0BA7               	decfsz	??_lcd_send_byte^(0+128),f
  7005  1EF5  2EF4               	goto	u9427
  7006  1EF6  0064               	clrwdt
  7007                           
  7008                           ;prog.c: 680: lcd_send_initial_half_byte(data & 0b00001111);
  7009  1EF7  1683               	bsf	3,5	;RP0=1, select bank1
  7010  1EF8  1303               	bcf	3,6	;RP1=0, select bank1
  7011  1EF9  0828               	movf	lcd_send_byte@data^(0+128),w
  7012  1EFA  390F               	andlw	15
  7013  1EFB  2705  160A  158A   	fcall	_lcd_send_initial_half_byte
  7014                           
  7015                           ;prog.c: 681: _delay((unsigned long)((40)*(20000000/4000000.0)));
  7016  1EFE  3042               	movlw	66
  7017  1EFF  1683               	bsf	3,5	;RP0=1, select bank1
  7018  1F00  00A7               	movwf	??_lcd_send_byte^(0+128)
  7019  1F01                     u9437:	
  7020  1F01  0BA7               	decfsz	??_lcd_send_byte^(0+128),f
  7021  1F02  2F01               	goto	u9437
  7022  1F03  0064               	clrwdt
  7023  1F04  0008               	return
  7024  1F05                     __end_of_lcd_send_byte:	
  7025  1F05                     __ptext2283:	
  7026 ;; =============== function _ConvertDayToBit ends ============
  7027                           
  7028                           
  7029 ;; *************** function _lcd_send_initial_half_byte *****************
  7030 ;; Defined at:
  7031 ;;		line 661 in file "prog.c"
  7032 ;; Parameters:    Size  Location     Type
  7033 ;;  data            1    wreg     unsigned char 
  7034 ;; Auto vars:     Size  Location     Type
  7035 ;;  data            1    1[BANK1 ] unsigned char 
  7036 ;;  a               2    5[BANK1 ] int 
  7037 ;;  data_temp       1    4[BANK1 ] unsigned char 
  7038 ;; Return value:  Size  Location     Type
  7039 ;;		None               void
  7040 ;; Registers used:
  7041 ;;		wreg, status,2, status,0, btemp+1
  7042 ;; Tracked objects:
  7043 ;;		On entry : 0/100
  7044 ;;		On exit  : 60/0
  7045 ;;		Unchanged: FFE00/0
  7046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7047 ;;      Params:         0       0       0       0       0
  7048 ;;      Locals:         0       0       6       0       0
  7049 ;;      Temps:          0       0       1       0       0
  7050 ;;      Totals:         0       0       7       0       0
  7051 ;;Total ram usage:        7 bytes
  7052 ;; Hardware stack levels used:    1
  7053 ;; Hardware stack levels required when called:    4
  7054 ;; This function calls:
  7055 ;;		Nothing
  7056 ;; This function is called by:
  7057 ;;		_lcd_send_byte
  7058 ;;		_lcd_init
  7059 ;; This function uses a non-reentrant model
  7060 ;;
  7061  1F05                     _lcd_send_initial_half_byte:	
  7062                           
  7063 ;; hardware stack exceeded
  7064                           ; Regs used in _lcd_send_initial_half_byte: [wreg+status,2+status,0+btemp+1]
  7065                           ;lcd_send_initial_half_byte@data stored from wreg
  7066  1F05  1683               	bsf	3,5	;RP0=1, select bank1
  7067  1F06  1303               	bcf	3,6	;RP1=0, select bank1
  7068  1F07  00A1               	movwf	lcd_send_initial_half_byte@data^(0+128)
  7069                           
  7070                           ;prog.c: 662: RC1 = 0;
  7071  1F08  1283               	bcf	3,5	;RP0=0, select bank0
  7072  1F09  1087               	bcf	7,1
  7073                           
  7074                           ;prog.c: 663: unsigned char data_temp = 0;
  7075  1F0A  1683               	bsf	3,5	;RP0=1, select bank1
  7076  1F0B  01A4               	clrf	lcd_send_initial_half_byte@data_temp^(0+128)
  7077  1F0C  0064               	clrwdt	;#
  7078                           
  7079                           ;prog.c: 665: for(int a = 4; a>0; a--){
  7080  1F0D  3004               	movlw	4
  7081  1F0E  1683               	bsf	3,5	;RP0=1, select bank1
  7082  1F0F  1303               	bcf	3,6	;RP1=0, select bank1
  7083  1F10  00A5               	movwf	lcd_send_initial_half_byte@a^(0+128)
  7084  1F11  01A6               	clrf	(lcd_send_initial_half_byte@a+1)^(0+128)
  7085  1F12                     l1007:	
  7086                           
  7087                           ;prog.c: 666: data_temp*=2;
  7088  1F12  1683               	bsf	3,5	;RP0=1, select bank1
  7089  1F13  1303               	bcf	3,6	;RP1=0, select bank1
  7090  1F14  1003               	clrc
  7091  1F15  0DA4               	rlf	lcd_send_initial_half_byte@data_temp^(0+128),f
  7092                           
  7093                           ;prog.c: 667: if(data%2==1){
  7094  1F16  1821               	btfsc	lcd_send_initial_half_byte@data^(0+128),0
  7095                           
  7096                           ;prog.c: 668: data_temp++;
  7097  1F17  0AA4               	incf	lcd_send_initial_half_byte@data_temp^(0+128),f
  7098                           
  7099                           ;prog.c: 669: }
  7100                           ;prog.c: 670: data/=2;
  7101  1F18  1003               	clrc
  7102  1F19  0CA1               	rrf	lcd_send_initial_half_byte@data^(0+128),f
  7103  1F1A  0064               	clrwdt	;#
  7104  1F1B  30FF               	movlw	-1
  7105  1F1C  1683               	bsf	3,5	;RP0=1, select bank1
  7106  1F1D  1303               	bcf	3,6	;RP1=0, select bank1
  7107  1F1E  07A5               	addwf	lcd_send_initial_half_byte@a^(0+128),f
  7108  1F1F  1C03               	skipc
  7109  1F20  03A6               	decf	(lcd_send_initial_half_byte@a+1)^(0+128),f
  7110  1F21  0826               	movf	(lcd_send_initial_half_byte@a+1)^(0+128),w
  7111  1F22  3A80               	xorlw	128
  7112  1F23  00FF               	movwf	127
  7113  1F24  3080               	movlw	128
  7114  1F25  027F               	subwf	127,w
  7115  1F26  1D03               	skipz
  7116  1F27  2F2A               	goto	u7155
  7117  1F28  3001               	movlw	1
  7118  1F29  0225               	subwf	lcd_send_initial_half_byte@a^(0+128),w
  7119  1F2A                     u7155:	
  7120  1F2A  1803               	skipnc
  7121  1F2B  2F12               	goto	l1007
  7122                           
  7123                           ;prog.c: 672: }
  7124                           ;prog.c: 673: PORTA = (0b00111100 & (data_temp * 4)) | (LCD_Light_On == 1 ? 0b00000010 :
      +                           0b00000000);
  7125  1F2C  1283               	bcf	3,5	;RP0=0, select bank0
  7126  1F2D  1303               	bcf	3,6	;RP1=0, select bank0
  7127  1F2E  195D               	btfsc	_LCD_Light_On/(0+8),_LCD_Light_On& (0+7)
  7128  1F2F  2F33               	goto	l9801
  7129  1F30  1683               	bsf	3,5	;RP0=1, select bank1
  7130  1F31  01A2               	clrf	_lcd_send_initial_half_byte$1348^(0+128)
  7131  1F32  2F36               	goto	L36
  7132  1F33                     l9801:	
  7133  1F33  3002               	movlw	2
  7134  1F34  1683               	bsf	3,5	;RP0=1, select bank1
  7135  1F35  00A2               	movwf	_lcd_send_initial_half_byte$1348^(0+128)
  7136  1F36                     L36:	
  7137  1F36  01A3               	clrf	(_lcd_send_initial_half_byte$1348+1)^(0+128)
  7138  1F37  0824               	movf	lcd_send_initial_half_byte@data_temp^(0+128),w
  7139  1F38  00A0               	movwf	??_lcd_send_initial_half_byte^(0+128)
  7140  1F39  1003               	clrc
  7141  1F3A  0DA0               	rlf	??_lcd_send_initial_half_byte^(0+128),f
  7142  1F3B  1003               	clrc
  7143  1F3C  0D20               	rlf	??_lcd_send_initial_half_byte^(0+128),w
  7144  1F3D  393C               	andlw	60
  7145  1F3E  0422               	iorwf	_lcd_send_initial_half_byte$1348^(0+128),w
  7146  1F3F  1283               	bcf	3,5	;RP0=0, select bank0
  7147  1F40  0085               	movwf	5	;volatile
  7148                           
  7149                           ;prog.c: 674: RC0 = 1;
  7150  1F41  1407               	bsf	7,0
  7151                           
  7152                           ;prog.c: 675: RC0 = 0;
  7153  1F42  1007               	bcf	7,0
  7154  1F43  0008               	return
  7155  1F44                     __end_of_lcd_send_initial_half_byte:	
  7156  1F44                     __ptext2247:	
  7157  1F44                     __end_of_main2:	
  7158                           
  7159 ;; =============== function _main2 ends ============
  7160 ;; *************** function _Scheduler *****************
  7161 ;; Defined at:
  7162 ;;		line 1029 in file "prog.c"
  7163 ;; Parameters:    Size  Location     Type
  7164 ;;  StartFrom       1    wreg     unsigned char 
  7165 ;;  new             1    0[BANK3 ] unsigned char 
  7166 ;; Auto vars:     Size  Location     Type
  7167 ;;  StartFrom       1    1[BANK3 ] unsigned char 
  7168 ;;  isDataModifi    1    2[BANK3 ] unsigned char 
  7169 ;; Return value:  Size  Location     Type
  7170 ;;		None               void
  7171 ;; Registers used:
  7172 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  7173 ;; Tracked objects:
  7174 ;;		On entry : 60/160
  7175 ;;		On exit  : 160/120
  7176 ;;		Unchanged: 0/0
  7177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7178 ;;      Params:         0       0       0       1       0
  7179 ;;      Locals:         0       0       0       2       0
  7180 ;;      Temps:          0       0       0       0       0
  7181 ;;      Totals:         0       0       0       3       0
  7182 ;;Total ram usage:        3 bytes
  7183 ;; Hardware stack levels used:    1
  7184 ;; Hardware stack levels required when called:    7
  7185 ;; This function calls:
  7186 ;;		_clrInd
  7187 ;;		_WriteFourBytesEE
  7188 ;;		_Scheduler
  7189 ;;		_EditSchedule
  7190 ;;		_FindCell
  7191 ;;		_RefreshSchedulerIndicator
  7192 ;;		_main2
  7193 ;; This function is called by:
  7194 ;;		_main2
  7195 ;; This function uses a non-reentrant model
  7196 ;;
  7197  1F44                     _Scheduler:	
  7198                           
  7199 ;; hardware stack exceeded
  7200                           ; Regs used in _Scheduler: [allreg]
  7201                           ;Scheduler@StartFrom stored from wreg
  7202  1F44  0091               	movwf	Scheduler@StartFrom^(0+384)
  7203                           
  7204                           ;prog.c: 1030: clrInd();
  7205  1F45  120A  118A  2690   	fcall	_clrInd
      +       160A  158A         
  7206                           
  7207                           ;prog.c: 1031: volatile static unsigned char NumberOfCells = 0;
  7208                           ;prog.c: 1035: unsigned char isDataModified = 1;
  7209  1F4A  1683               	bsf	3,5	;RP0=1, select bank3
  7210  1F4B  1703               	bsf	3,6	;RP1=1, select bank3
  7211  1F4C  0192               	clrf	Scheduler@isDataModified^(0+384)
  7212  1F4D  0A92               	incf	Scheduler@isDataModified^(0+384),f
  7213  1F4E                     l11113:	
  7214                           
  7215                           ;prog.c: 1037: if(new==0 && NumberOfCells!=240 && KeyCode==44){
  7216  1F4E  1703               	bsf	3,6	;RP1=1, select bank3
  7217  1F4F  0890               	movf	Scheduler@new^(0+384),f
  7218  1F50  1D03               	skipz
  7219  1F51  2F67               	goto	l11125
  7220  1F52  085E               	movf	Scheduler@NumberOfCells^(0+384),w	;volatile
  7221  1F53  3AF0               	xorlw	240
  7222  1F54  1903               	skipnz
  7223  1F55  2F67               	goto	l11125
  7224  1F56  1303               	bcf	3,6	;RP1=0, select bank1
  7225  1F57  086F               	movf	_KeyCode^(0+128),w	;volatile
  7226  1F58  3A2C               	xorlw	44
  7227  1F59  1D03               	skipz
  7228  1F5A  2F67               	goto	l11125
  7229                           
  7230                           ;prog.c: 1038: KeyCode = 0;
  7231  1F5B  01EF               	clrf	_KeyCode^(0+128)	;volatile
  7232                           
  7233                           ;prog.c: 1039: WriteFourBytesEE(NumberOfCells,0xFFFFFFFF);
  7234  1F5C  30FF               	movlw	255
  7235  1F5D  00A6               	movwf	(?_WriteFourBytesEE+3)^(0+128)
  7236  1F5E  00A5               	movwf	(?_WriteFourBytesEE+2)^(0+128)
  7237  1F5F  00A4               	movwf	(?_WriteFourBytesEE+1)^(0+128)
  7238  1F60  00A3               	movwf	?_WriteFourBytesEE^(0+128)
  7239  1F61  1703               	bsf	3,6	;RP1=1, select bank3
  7240  1F62  085E               	movf	Scheduler@NumberOfCells^(0+384),w	;volatile
  7241  1F63  27E9  160A  158A   	fcall	_WriteFourBytesEE
  7242                           
  7243                           ;prog.c: 1041: }else if(new==0 && KeyCode==35){
  7244  1F66  2FB8               	goto	l11123
  7245  1F67                     l11125:	
  7246  1F67  1703               	bsf	3,6	;RP1=1, select bank3
  7247  1F68  0890               	movf	Scheduler@new^(0+384),f
  7248  1F69  1D03               	skipz
  7249  1F6A  2F79               	goto	l11135
  7250  1F6B  1303               	bcf	3,6	;RP1=0, select bank1
  7251  1F6C  086F               	movf	_KeyCode^(0+128),w	;volatile
  7252  1F6D  3A23               	xorlw	35
  7253  1F6E  1D03               	skipz
  7254  1F6F  2F79               	goto	l11135
  7255                           
  7256                           ;prog.c: 1042: KeyCode = 0;
  7257  1F70  01EF               	clrf	_KeyCode^(0+128)	;volatile
  7258                           
  7259                           ;prog.c: 1043: Scheduler(240, 1);
  7260  1F71  1703               	bsf	3,6	;RP1=1, select bank3
  7261  1F72  30F0               	movlw	240
  7262  1F73  0190               	clrf	?_Scheduler^(0+384)
  7263  1F74  0A90               	incf	?_Scheduler^(0+384),f
  7264  1F75  2744  160A  158A   	fcall	_Scheduler
  7265  1F78  2FB8               	goto	l11123
  7266  1F79                     l11135:	
  7267  1F79  1703               	bsf	3,6	;RP1=1, select bank3
  7268  1F7A  085E               	movf	Scheduler@NumberOfCells^(0+384),w	;volatile
  7269  1F7B  3AF0               	xorlw	240
  7270  1F7C  1903               	skipnz
  7271  1F7D  2F90               	goto	l11145
  7272  1F7E  1303               	bcf	3,6	;RP1=0, select bank1
  7273  1F7F  086F               	movf	_KeyCode^(0+128),w	;volatile
  7274  1F80  3A2D               	xorlw	45
  7275  1F81  1D03               	skipz
  7276  1F82  2F90               	goto	l11145
  7277                           
  7278                           ;prog.c: 1050: KeyCode = 0;
  7279  1F83  01EF               	clrf	_KeyCode^(0+128)	;volatile
  7280                           
  7281                           ;prog.c: 1051: EditSchedule(NumberOfCells, StartFrom);
  7282  1F84  1703               	bsf	3,6	;RP1=1, select bank3
  7283  1F85  0811               	movf	Scheduler@StartFrom^(0+384),w
  7284  1F86  1303               	bcf	3,6	;RP1=0, select bank1
  7285  1F87  00C4               	movwf	?_EditSchedule^(0+128)
  7286  1F88  1703               	bsf	3,6	;RP1=1, select bank3
  7287  1F89  085E               	movf	Scheduler@NumberOfCells^(0+384),w	;volatile
  7288  1F8A  120A  118A  2015   	fcall	_EditSchedule
      +       160A  158A         
  7289  1F8F  2FB8               	goto	l11123
  7290  1F90                     l11145:	
  7291  1F90  1303               	bcf	3,6	;RP1=0, select bank1
  7292  1F91  086F               	movf	_KeyCode^(0+128),w	;volatile
  7293  1F92  3A28               	xorlw	40
  7294  1F93  1D03               	skipz
  7295  1F94  2F9C               	goto	l11153
  7296                           
  7297                           ;prog.c: 1054: KeyCode = 0;
  7298  1F95  01EF               	clrf	_KeyCode^(0+128)	;volatile
  7299                           
  7300                           ;prog.c: 1055: NumberOfCells = FindCell(NumberOfCells, new, 0);
  7301  1F96  1703               	bsf	3,6	;RP1=1, select bank3
  7302  1F97  0810               	movf	Scheduler@new^(0+384),w
  7303  1F98  1303               	bcf	3,6	;RP1=0, select bank1
  7304  1F99  00A3               	movwf	?_FindCell^(0+128)
  7305  1F9A  01A4               	clrf	(?_FindCell^(0+128)+1)
  7306  1F9B  2FA7               	goto	L5
  7307  1F9C                     l11153:	
  7308  1F9C  086F               	movf	_KeyCode^(0+128),w	;volatile
  7309  1F9D  3A29               	xorlw	41
  7310  1F9E  1D03               	skipz
  7311  1F9F  2FB1               	goto	l11161
  7312                           
  7313                           ;prog.c: 1058: KeyCode = 0;
  7314  1FA0  01EF               	clrf	_KeyCode^(0+128)	;volatile
  7315                           
  7316                           ;prog.c: 1059: NumberOfCells = FindCell(NumberOfCells, new, 1);
  7317  1FA1  1703               	bsf	3,6	;RP1=1, select bank3
  7318  1FA2  0810               	movf	Scheduler@new^(0+384),w
  7319  1FA3  1303               	bcf	3,6	;RP1=0, select bank1
  7320  1FA4  00A3               	movwf	?_FindCell^(0+128)
  7321  1FA5  01A4               	clrf	(?_FindCell^(0+128)+1)
  7322  1FA6  0AA4               	incf	(?_FindCell^(0+128)+1),f
  7323  1FA7                     L5:	
  7324  1FA7  1703               	bsf	3,6	;RP1=1, select bank3
  7325  1FA8  085E               	movf	Scheduler@NumberOfCells^(0+384),w	;volatile
  7326  1FA9  160A  158A  21A6   	fcall	_FindCell
      +       160A  158A         
  7327  1FAE  1703               	bsf	3,6	;RP1=1, select bank3
  7328  1FAF  00DE               	movwf	Scheduler@NumberOfCells^(0+384)	;volatile
  7329  1FB0  2FB8               	goto	l11123
  7330  1FB1                     l11161:	
  7331  1FB1  086F               	movf	_KeyCode^(0+128),w	;volatile
  7332  1FB2  3A1E               	xorlw	30
  7333  1FB3  1D03               	skipz
  7334  1FB4  2FBC               	goto	l11167
  7335                           
  7336                           ;prog.c: 1062: KeyCode = 0;
  7337  1FB5  01EF               	clrf	_KeyCode^(0+128)	;volatile
  7338                           
  7339                           ;prog.c: 1063: NumberOfCells = 0;
  7340  1FB6  1703               	bsf	3,6	;RP1=1, select bank3
  7341  1FB7  01DE               	clrf	Scheduler@NumberOfCells^(0+384)	;volatile
  7342  1FB8                     l11123:	
  7343                           
  7344                           ;prog.c: 1040: isDataModified = 1;
  7345  1FB8  1683               	bsf	3,5	;RP0=1, select bank3
  7346  1FB9  1703               	bsf	3,6	;RP1=1, select bank3
  7347  1FBA  0192               	clrf	Scheduler@isDataModified^(0+384)
  7348  1FBB  0A92               	incf	Scheduler@isDataModified^(0+384),f
  7349  1FBC                     l11167:	
  7350                           
  7351                           ;prog.c: 1065: }
  7352                           ;prog.c: 1066: if(isDataModified == 1){
  7353  1FBC  1703               	bsf	3,6	;RP1=1, select bank3
  7354  1FBD  0B12               	decfsz	Scheduler@isDataModified^(0+384),w
  7355  1FBE  2FD0               	goto	l11173
  7356                           
  7357                           ;prog.c: 1067: NumberOfCells = RefreshSchedulerIndicator(NumberOfCells, new, StartFrom);
  7358  1FBF  0810               	movf	Scheduler@new^(0+384),w
  7359  1FC0  1303               	bcf	3,6	;RP1=0, select bank1
  7360  1FC1  00BD               	movwf	?_RefreshSchedulerIndicator^(0+128)
  7361  1FC2  1703               	bsf	3,6	;RP1=1, select bank3
  7362  1FC3  0811               	movf	Scheduler@StartFrom^(0+384),w
  7363  1FC4  1303               	bcf	3,6	;RP1=0, select bank1
  7364  1FC5  00BE               	movwf	(?_RefreshSchedulerIndicator^(0+128)+1)
  7365  1FC6  1703               	bsf	3,6	;RP1=1, select bank3
  7366  1FC7  085E               	movf	Scheduler@NumberOfCells^(0+384),w	;volatile
  7367  1FC8  160A  118A  2498   	fcall	_RefreshSchedulerIndicator
      +       160A  158A         
  7368  1FCD  1703               	bsf	3,6	;RP1=1, select bank3
  7369  1FCE  00DE               	movwf	Scheduler@NumberOfCells^(0+384)	;volatile
  7370                           
  7371                           ;prog.c: 1068: isDataModified = 0;
  7372  1FCF  0192               	clrf	Scheduler@isDataModified^(0+384)
  7373  1FD0                     l11173:	
  7374                           
  7375                           ;prog.c: 1069: }
  7376                           ;prog.c: 1071: if(KeyCode==43){
  7377  1FD0  1303               	bcf	3,6	;RP1=0, select bank1
  7378  1FD1  086F               	movf	_KeyCode^(0+128),w	;volatile
  7379  1FD2  3A2B               	xorlw	43
  7380  1FD3  1D03               	skipz
  7381  1FD4  2F4E               	goto	l11113
  7382                           
  7383                           ;prog.c: 1072: KeyCode = 0;
  7384  1FD5  01EF               	clrf	_KeyCode^(0+128)	;volatile
  7385                           
  7386                           ;prog.c: 1073: clrInd();
  7387  1FD6  120A  118A  2690   	fcall	_clrInd
      +       160A  158A         
  7388                           
  7389                           ;prog.c: 1074: if(new==1){
  7390  1FDB  1683               	bsf	3,5	;RP0=1, select bank3
  7391  1FDC  1703               	bsf	3,6	;RP1=1, select bank3
  7392  1FDD  0B10               	decfsz	Scheduler@new^(0+384),w
  7393  1FDE  2FE5               	goto	l11183
  7394  1FDF  30F0               	movlw	240
  7395                           
  7396                           ;prog.c: 1075: Scheduler(240, 0);
  7397  1FE0  0190               	clrf	?_Scheduler^(0+384)
  7398  1FE1  2744  160A  158A   	fcall	_Scheduler
  7399                           
  7400                           ;prog.c: 1076: }else{
  7401  1FE4  2F4E               	goto	l11113
  7402  1FE5                     l11183:	
  7403                           
  7404                           ;prog.c: 1077: main2();
  7405  1FE5  2490  160A  158A   	fcall	_main2
  7406  1FE8  2F4E               	goto	l11113
  7407  1FE9                     __ptext2261:	
  7408 ;; =============== function _lcd_send_byte ends ============
  7409                           
  7410                           
  7411 ;; *************** function _WriteFourBytesEE *****************
  7412 ;; Defined at:
  7413 ;;		line 599 in file "prog.c"
  7414 ;; Parameters:    Size  Location     Type
  7415 ;;  adress          1    wreg     unsigned char 
  7416 ;;  data            4    3[BANK1 ] unsigned long 
  7417 ;; Auto vars:     Size  Location     Type
  7418 ;;  adress          1    7[BANK1 ] unsigned char 
  7419 ;;  i               1    8[BANK1 ] unsigned char 
  7420 ;; Return value:  Size  Location     Type
  7421 ;;		None               void
  7422 ;; Registers used:
  7423 ;;		wreg, status,2, status,0, pclath, cstack
  7424 ;; Tracked objects:
  7425 ;;		On entry : 20/160
  7426 ;;		On exit  : 60/20
  7427 ;;		Unchanged: FFE00/0
  7428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7429 ;;      Params:         0       0       4       0       0
  7430 ;;      Locals:         0       0       2       0       0
  7431 ;;      Temps:          0       0       0       0       0
  7432 ;;      Totals:         0       0       6       0       0
  7433 ;;Total ram usage:        6 bytes
  7434 ;; Hardware stack levels used:    1
  7435 ;; Hardware stack levels required when called:    5
  7436 ;; This function calls:
  7437 ;;		_EEWR
  7438 ;; This function is called by:
  7439 ;;		_EditSchedule
  7440 ;;		_Scheduler
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443  1FE9                     _WriteFourBytesEE:	
  7444                           
  7445 ;; hardware stack exceeded
  7446                           ; Regs used in _WriteFourBytesEE: [wreg+status,2+status,0+pclath+cstack]
  7447                           ;WriteFourBytesEE@adress stored from wreg
  7448  1FE9  1303               	bcf	3,6	;RP1=0, select bank1
  7449  1FEA  00A7               	movwf	WriteFourBytesEE@adress^(0+128)
  7450                           
  7451                           ;prog.c: 600: for(char i=0;i<4;i++){
  7452  1FEB  01A8               	clrf	WriteFourBytesEE@i^(0+128)
  7453  1FEC                     l10205:	
  7454                           
  7455                           ;prog.c: 601: EEWR(adress+i,data%256);
  7456  1FEC  0823               	movf	WriteFourBytesEE@data^(0+128),w
  7457  1FED  00A0               	movwf	?_EEWR^(0+128)
  7458  1FEE  0828               	movf	WriteFourBytesEE@i^(0+128),w
  7459  1FEF  0727               	addwf	WriteFourBytesEE@adress^(0+128),w
  7460  1FF0  2568  160A  158A   	fcall	_EEWR
  7461                           
  7462                           ;prog.c: 602: data /= 256;
  7463  1FF3  0824               	movf	(WriteFourBytesEE@data+1)^(0+128),w
  7464  1FF4  00A3               	movwf	WriteFourBytesEE@data^(0+128)
  7465  1FF5  0825               	movf	(WriteFourBytesEE@data+2)^(0+128),w
  7466  1FF6  00A4               	movwf	(WriteFourBytesEE@data+1)^(0+128)
  7467  1FF7  0826               	movf	(WriteFourBytesEE@data+3)^(0+128),w
  7468  1FF8  00A5               	movwf	(WriteFourBytesEE@data+2)^(0+128)
  7469  1FF9  3004               	movlw	4
  7470  1FFA  01A6               	clrf	(WriteFourBytesEE@data+3)^(0+128)
  7471  1FFB  0AA8               	incf	WriteFourBytesEE@i^(0+128),f
  7472  1FFC  0228               	subwf	WriteFourBytesEE@i^(0+128),w
  7473  1FFD  1803               	btfsc	3,0
  7474  1FFE  0008               	return
  7475  1FFF  2FEC               	goto	l10205
  7476  2000                     __end_of_WriteFourBytesEE:	
  7477                           
  7478                           	psect	swtext1
  7479  1830                     __pswtext1:	
  7480  1830                     S11377:	
  7481  1830  120A  118A  2F18   	ljmp	l10295
  7482  1833  120A  118A  2F1A   	ljmp	l10297
  7483  1836  120A  118A  2F2D   	ljmp	l10305
  7484  1839  120A  118A  2F0D   	ljmp	l10291
  7485  183C  120A  118A  2F0B   	ljmp	l10289
  7486  183F  120A  118A  2F2D   	ljmp	l10305
  7487  1842  120A  118A  2F18   	ljmp	l10295
  7488  1845  120A  118A  2F1A   	ljmp	l10297
  7489  1848  120A  118A  2F2D   	ljmp	l10305
  7490  184B  120A  118A  2F0D   	ljmp	l10291
  7491  184E  120A  118A  2F0B   	ljmp	l10289
  7492                           
  7493                           	psect	text2258
  7494  1019                     __ptext2258:	
  7495 ;; =============== function _ItemsToIndicator ends ============
  7496                           
  7497                           
  7498 ;; *************** function _TimesToIndicator *****************
  7499 ;; Defined at:
  7500 ;;		line 826 in file "prog.c"
  7501 ;; Parameters:    Size  Location     Type
  7502 ;;  Times           1    wreg     PTR unsigned int 
  7503 ;;		 -> EditSchedule@Times(4), 
  7504 ;; Auto vars:     Size  Location     Type
  7505 ;;  Times           1   26[BANK1 ] PTR unsigned int 
  7506 ;;		 -> EditSchedule@Times(4), 
  7507 ;;  j               1   29[BANK1 ] unsigned char 
  7508 ;;  temp            2   27[BANK1 ] unsigned int 
  7509 ;; Return value:  Size  Location     Type
  7510 ;;		None               void
  7511 ;; Registers used:
  7512 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7513 ;; Tracked objects:
  7514 ;;		On entry : 60/120
  7515 ;;		On exit  : 160/120
  7516 ;;		Unchanged: FFE9F/0
  7517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7518 ;;      Params:         0       0       0       0       0
  7519 ;;      Locals:         0       0       4       0       0
  7520 ;;      Temps:          0       0       2       0       0
  7521 ;;      Totals:         0       0       6       0       0
  7522 ;;Total ram usage:        6 bytes
  7523 ;; Hardware stack levels used:    1
  7524 ;; Hardware stack levels required when called:    5
  7525 ;; This function calls:
  7526 ;;		___lbdiv
  7527 ;;		___lwmod
  7528 ;;		_setDigit
  7529 ;;		___lwdiv
  7530 ;; This function is called by:
  7531 ;;		_EditSchedule
  7532 ;; This function uses a non-reentrant model
  7533 ;;
  7534  1019                     _TimesToIndicator:	
  7535                           
  7536 ;; hardware stack exceeded
  7537                           ; Regs used in _TimesToIndicator: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7538                           ;TimesToIndicator@Times stored from wreg
  7539  1019  00BA               	movwf	TimesToIndicator@Times^(0+128)
  7540                           
  7541                           ;prog.c: 827: unsigned int temp;
  7542                           ;prog.c: 828: for(char j=0;j<7;j+=6){
  7543  101A  01BD               	clrf	TimesToIndicator@j^(0+128)
  7544  101B                     l10259:	
  7545                           
  7546                           ;prog.c: 829: temp = Times[j/5];
  7547  101B  3005               	movlw	5
  7548  101C  00A0               	movwf	?___lbdiv^(0+128)
  7549  101D  083D               	movf	TimesToIndicator@j^(0+128),w
  7550  101E  120A  118A  2788   	fcall	___lbdiv
      +       160A  118A         
  7551  1023  00B8               	movwf	??_TimesToIndicator^(0+128)
  7552  1024  0738               	addwf	??_TimesToIndicator^(0+128),w
  7553  1025  073A               	addwf	TimesToIndicator@Times^(0+128),w
  7554  1026  00B9               	movwf	(??_TimesToIndicator+1)^(0+128)
  7555  1027  0084               	movwf	4
  7556  1028  1383               	bcf	3,7	;select IRP bank0
  7557  1029  0800               	movf	0,w
  7558  102A  00BB               	movwf	TimesToIndicator@temp^(0+128)
  7559  102B  0A84               	incf	4,f
  7560  102C  0800               	movf	0,w
  7561  102D  00BC               	movwf	(TimesToIndicator@temp+1)^(0+128)
  7562                           
  7563                           ;prog.c: 830: setDigit(0,1+j,temp%10);
  7564  102E  0A3D               	incf	TimesToIndicator@j^(0+128),w
  7565  102F  00AE               	movwf	?_setDigit^(0+128)
  7566  1030  300A               	movlw	10
  7567  1031  00A0               	movwf	?___lwmod^(0+128)
  7568  1032  01A1               	clrf	(?___lwmod+1)^(0+128)
  7569  1033  083C               	movf	(TimesToIndicator@temp+1)^(0+128),w
  7570  1034  00A3               	movwf	((?___lwmod+1)^(0+128)+2)
  7571  1035  083B               	movf	TimesToIndicator@temp^(0+128),w
  7572  1036  00A2               	movwf	(?___lwmod^(0+128)+2)
  7573  1037  2790  160A  118A   	fcall	___lwmod
  7574  103A  0820               	movf	?___lwmod^(0+128),w
  7575  103B  00AF               	movwf	(?_setDigit^(0+128)+1)
  7576  103C  3000               	movlw	0
  7577  103D  265C  160A  118A   	fcall	_setDigit
  7578                           
  7579                           ;prog.c: 831: temp/=10;
  7580  1040  300A               	movlw	10
  7581  1041  00A0               	movwf	?___lwdiv^(0+128)
  7582  1042  01A1               	clrf	(?___lwdiv+1)^(0+128)
  7583  1043  083C               	movf	(TimesToIndicator@temp+1)^(0+128),w
  7584  1044  00A3               	movwf	((?___lwdiv+1)^(0+128)+2)
  7585  1045  083B               	movf	TimesToIndicator@temp^(0+128),w
  7586  1046  00A2               	movwf	(?___lwdiv^(0+128)+2)
  7587  1047  27B4  160A  118A   	fcall	___lwdiv
  7588  104A  0821               	movf	(?___lwdiv+1)^(0+128),w
  7589  104B  00BC               	movwf	(TimesToIndicator@temp+1)^(0+128)
  7590  104C  0820               	movf	?___lwdiv^(0+128),w
  7591  104D  00BB               	movwf	TimesToIndicator@temp^(0+128)
  7592                           
  7593                           ;prog.c: 832: setDigit(0,2+j,temp%6);
  7594  104E  083D               	movf	TimesToIndicator@j^(0+128),w
  7595  104F  3E02               	addlw	2
  7596  1050  00AE               	movwf	?_setDigit^(0+128)
  7597  1051  3006               	movlw	6
  7598  1052  00A0               	movwf	?___lwmod^(0+128)
  7599  1053  01A1               	clrf	(?___lwmod+1)^(0+128)
  7600  1054  083C               	movf	(TimesToIndicator@temp+1)^(0+128),w
  7601  1055  00A3               	movwf	((?___lwmod+1)^(0+128)+2)
  7602  1056  083B               	movf	TimesToIndicator@temp^(0+128),w
  7603  1057  00A2               	movwf	(?___lwmod^(0+128)+2)
  7604  1058  2790  160A  118A   	fcall	___lwmod
  7605  105B  0820               	movf	?___lwmod^(0+128),w
  7606  105C  00AF               	movwf	(?_setDigit^(0+128)+1)
  7607  105D  3000               	movlw	0
  7608  105E  265C  160A  118A   	fcall	_setDigit
  7609                           
  7610                           ;prog.c: 833: setDigit(0,3+j,35);
  7611  1061  083D               	movf	TimesToIndicator@j^(0+128),w
  7612  1062  3E03               	addlw	3
  7613  1063  00AE               	movwf	?_setDigit^(0+128)
  7614  1064  3023               	movlw	35
  7615  1065  00AF               	movwf	(?_setDigit^(0+128)+1)
  7616  1066  3000               	movlw	0
  7617  1067  265C  160A  118A   	fcall	_setDigit
  7618                           
  7619                           ;prog.c: 834: temp=temp/6;
  7620  106A  3006               	movlw	6
  7621  106B  00A0               	movwf	?___lwdiv^(0+128)
  7622  106C  01A1               	clrf	(?___lwdiv+1)^(0+128)
  7623  106D  083C               	movf	(TimesToIndicator@temp+1)^(0+128),w
  7624  106E  00A3               	movwf	((?___lwdiv+1)^(0+128)+2)
  7625  106F  083B               	movf	TimesToIndicator@temp^(0+128),w
  7626  1070  00A2               	movwf	(?___lwdiv^(0+128)+2)
  7627  1071  27B4  160A  118A   	fcall	___lwdiv
  7628  1074  0821               	movf	(?___lwdiv+1)^(0+128),w
  7629  1075  00BC               	movwf	(TimesToIndicator@temp+1)^(0+128)
  7630  1076  0820               	movf	?___lwdiv^(0+128),w
  7631  1077  00BB               	movwf	TimesToIndicator@temp^(0+128)
  7632                           
  7633                           ;prog.c: 835: setDigit(0,4+j,temp%10);
  7634  1078  083D               	movf	TimesToIndicator@j^(0+128),w
  7635  1079  3E04               	addlw	4
  7636  107A  00AE               	movwf	?_setDigit^(0+128)
  7637  107B  300A               	movlw	10
  7638  107C  00A0               	movwf	?___lwmod^(0+128)
  7639  107D  01A1               	clrf	(?___lwmod+1)^(0+128)
  7640  107E  083C               	movf	(TimesToIndicator@temp+1)^(0+128),w
  7641  107F  00A3               	movwf	((?___lwmod+1)^(0+128)+2)
  7642  1080  083B               	movf	TimesToIndicator@temp^(0+128),w
  7643  1081  00A2               	movwf	(?___lwmod^(0+128)+2)
  7644  1082  2790  160A  118A   	fcall	___lwmod
  7645  1085  0820               	movf	?___lwmod^(0+128),w
  7646  1086  00AF               	movwf	(?_setDigit^(0+128)+1)
  7647  1087  3000               	movlw	0
  7648  1088  265C  160A  118A   	fcall	_setDigit
  7649                           
  7650                           ;prog.c: 836: setDigit(0,5+j,temp/10);
  7651  108B  083D               	movf	TimesToIndicator@j^(0+128),w
  7652  108C  3E05               	addlw	5
  7653  108D  00AE               	movwf	?_setDigit^(0+128)
  7654  108E  300A               	movlw	10
  7655  108F  00A0               	movwf	?___lwdiv^(0+128)
  7656  1090  01A1               	clrf	(?___lwdiv+1)^(0+128)
  7657  1091  083C               	movf	(TimesToIndicator@temp+1)^(0+128),w
  7658  1092  00A3               	movwf	((?___lwdiv+1)^(0+128)+2)
  7659  1093  083B               	movf	TimesToIndicator@temp^(0+128),w
  7660  1094  00A2               	movwf	(?___lwdiv^(0+128)+2)
  7661  1095  27B4  160A  118A   	fcall	___lwdiv
  7662  1098  0820               	movf	?___lwdiv^(0+128),w
  7663  1099  00AF               	movwf	(?_setDigit^(0+128)+1)
  7664  109A  3000               	movlw	0
  7665  109B  265C  160A  118A   	fcall	_setDigit
  7666  109E  3006               	movlw	6
  7667  109F  07BD               	addwf	TimesToIndicator@j^(0+128),f
  7668  10A0  3007               	movlw	7
  7669  10A1  023D               	subwf	TimesToIndicator@j^(0+128),w
  7670  10A2  1C03               	skipc
  7671  10A3  281B               	goto	l10259
  7672                           
  7673                           ;prog.c: 837: }
  7674                           ;prog.c: 838: setDigit(0,6,32);
  7675  10A4  3006               	movlw	6
  7676  10A5  00AE               	movwf	?_setDigit^(0+128)
  7677  10A6  3020               	movlw	32
  7678  10A7  00AF               	movwf	(?_setDigit^(0+128)+1)
  7679  10A8  3000               	movlw	0
  7680  10A9  2E5C               	ljmp	_setDigit
  7681  10AA                     __end_of_TimesToIndicator:	
  7682  10AA                     __ptext2249:	
  7683 ;; =============== function _lcd_on ends ============
  7684                           
  7685                           
  7686 ;; *************** function _TimeToInd *****************
  7687 ;; Defined at:
  7688 ;;		line 252 in file "prog.c"
  7689 ;; Parameters:    Size  Location     Type
  7690 ;;		None
  7691 ;; Auto vars:     Size  Location     Type
  7692 ;;  j               1   36[BANK3 ] unsigned char 
  7693 ;;  SignalOn        1   11[BANK3 ] unsigned char 
  7694 ;;  SignalOn        1   10[BANK3 ] unsigned char 
  7695 ;;  i               1   34[BANK3 ] unsigned char 
  7696 ;;  i               1   33[BANK3 ] unsigned char 
  7697 ;;  Time            2   38[BANK3 ] unsigned int 
  7698 ;;  TimeStop        2    4[BANK3 ] unsigned int 
  7699 ;;  TimeStart       2    2[BANK3 ] unsigned int 
  7700 ;;  nSymb           1   37[BANK3 ] unsigned char 
  7701 ;;  Signals         1   32[BANK3 ] unsigned char 
  7702 ;;  Day             1   31[BANK3 ] unsigned char 
  7703 ;;  DataArray2      1   13[BANK3 ] PTR unsigned char 
  7704 ;;		 -> GetDayOfWeek@array(3), 
  7705 ;;  Days            1   12[BANK3 ] unsigned char 
  7706 ;;  line            1    1[BANK3 ] unsigned char 
  7707 ;;  D               4    6[BANK3 ] unsigned char [4]
  7708 ;;  DataArray      17   14[BANK3 ] unsigned char [17]
  7709 ;;  temp            4   42[BANK3 ] long 
  7710 ;;  line            1   41[BANK3 ] unsigned char 
  7711 ;;  symbol          1   40[BANK3 ] unsigned char 
  7712 ;;  SignalsFinal    1   35[BANK3 ] unsigned char 
  7713 ;;  day             1    0[BANK3 ] unsigned char 
  7714 ;; Return value:  Size  Location     Type
  7715 ;;		None               void
  7716 ;; Registers used:
  7717 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7718 ;; Tracked objects:
  7719 ;;		On entry : 60/100
  7720 ;;		On exit  : 160/120
  7721 ;;		Unchanged: 0/0
  7722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7723 ;;      Params:         0       0       0       0       0
  7724 ;;      Locals:         0       0       0      46       0
  7725 ;;      Temps:          0       0       4       0       0
  7726 ;;      Totals:         0       0       4      46       0
  7727 ;;Total ram usage:       50 bytes
  7728 ;; Hardware stack levels used:    1
  7729 ;; Hardware stack levels required when called:    7
  7730 ;; This function calls:
  7731 ;;		_lcd_off
  7732 ;;		_FindNextTimeStart
  7733 ;;		_clrInd
  7734 ;;		_SendArrayToLCD
  7735 ;;		_setDigit
  7736 ;;		___aldiv
  7737 ;;		___almod
  7738 ;;		_GetDayOfWeek
  7739 ;;		_ReadFourBytesEE
  7740 ;;		_ParseDataRecord
  7741 ;;		_ParseTime
  7742 ;;		___lwmod
  7743 ;;		___lwdiv
  7744 ;; This function is called by:
  7745 ;;		_main2
  7746 ;; This function uses a non-reentrant model
  7747 ;;
  7748  10AA                     _TimeToInd:	
  7749                           
  7750                           ;prog.c: 253: if(LCD_Power_On && KeyCode==37){
  7751                           
  7752 ;; hardware stack exceeded
  7753                           ; Regs used in _TimeToInd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7754  10AA  1DDD               	btfss	_LCD_Power_On/(0+8),_LCD_Power_On& (0+7)
  7755  10AB  28B7               	goto	l10969
  7756  10AC  1683               	bsf	3,5	;RP0=1, select bank1
  7757  10AD  086F               	movf	_KeyCode^(0+128),w	;volatile
  7758  10AE  3A25               	xorlw	37
  7759  10AF  1D03               	skipz
  7760  10B0  28B7               	goto	l10969
  7761                           
  7762                           ;prog.c: 254: KeyCode = 0;
  7763  10B1  01EF               	clrf	_KeyCode^(0+128)	;volatile
  7764                           
  7765                           ;prog.c: 255: lcd_off();
  7766  10B2  160A  158A  25AE   	fcall	_lcd_off
      +       160A  118A         
  7767  10B7                     l10969:	
  7768                           
  7769                           ;prog.c: 256: }
  7770                           ;prog.c: 258: if(!RelevanceOfNextStartCell){
  7771  10B7  1283               	bcf	3,5	;RP0=0, select bank0
  7772  10B8  1B5D               	btfsc	_RelevanceOfNextStartCell/(0+8),_RelevanceOfNextStartCell& (0+7)
  7773  10B9  28CF               	goto	l10977
  7774                           
  7775                           ;prog.c: 259: NearTimeStart = Clock;
  7776  10BA  1683               	bsf	3,5	;RP0=1, select bank3
  7777  10BB  1703               	bsf	3,6	;RP1=1, select bank3
  7778  10BC  085D               	movf	(_Clock+3)^(0+384),w
  7779  10BD  00E4               	movwf	(_NearTimeStart+3)^(0+384)
  7780  10BE  085C               	movf	(_Clock+2)^(0+384),w
  7781  10BF  00E3               	movwf	(_NearTimeStart+2)^(0+384)
  7782  10C0  085B               	movf	(_Clock+1)^(0+384),w
  7783  10C1  00E2               	movwf	(_NearTimeStart+1)^(0+384)
  7784  10C2  085A               	movf	_Clock^(0+384),w
  7785  10C3  00E1               	movwf	_NearTimeStart^(0+384)
  7786                           
  7787                           ;prog.c: 260: AdressOfNextStartCell = FindNextTimeStart(&NearTimeStart);
  7788  10C4  30E1               	movlw	_NearTimeStart& (0+255)
  7789  10C5  160A  158A  25B8   	fcall	_FindNextTimeStart
      +       160A  118A         
  7790  10CA  1703               	bsf	3,6	;RP1=1, select bank3
  7791  10CB  00D6               	movwf	_AdressOfNextStartCell^(0+384)
  7792                           
  7793                           ;prog.c: 261: RelevanceOfNextStartCell = 1;
  7794  10CC  1283               	bcf	3,5	;RP0=0, select bank0
  7795  10CD  1303               	bcf	3,6	;RP1=0, select bank0
  7796  10CE  175D               	bsf	_RelevanceOfNextStartCell/(0+8),_RelevanceOfNextStartCell& (0+7)
  7797  10CF                     l10977:	
  7798                           
  7799                           ;prog.c: 262: }
  7800                           ;prog.c: 263: char line = 0;
  7801  10CF  1683               	bsf	3,5	;RP0=1, select bank3
  7802  10D0  1703               	bsf	3,6	;RP1=1, select bank3
  7803  10D1  3003               	movlw	3
  7804  10D2  01B9               	clrf	TimeToInd@line^(0+384)
  7805                           
  7806                           ;prog.c: 264: char symbol = 3;
  7807  10D3  00B8               	movwf	TimeToInd@symbol^(0+384)
  7808                           
  7809                           ;prog.c: 265: unsigned char SignalsFinal = CurrentSignals|SignalsForInd;
  7810  10D4  085F               	movf	_CurrentSignals^(0+384),w
  7811  10D5  0460               	iorwf	_SignalsForInd^(0+384),w	;volatile
  7812  10D6  00B3               	movwf	TimeToInd@SignalsFinal^(0+384)
  7813                           
  7814                           ;prog.c: 266: if(ModeOfFirstLine != (SignalsFinal>0)){
  7815  10D7  1283               	bcf	3,5	;RP0=0, select bank0
  7816  10D8  1303               	bcf	3,6	;RP1=0, select bank0
  7817  10D9  1EDD               	btfss	_ModeOfFirstLine/(0+8),_ModeOfFirstLine& (0+7)
  7818  10DA  28DD               	goto	u8850
  7819  10DB  3001               	movlw	1
  7820  10DC  28DE               	goto	u8852
  7821  10DD                     u8850:	
  7822  10DD  3000               	movlw	0
  7823  10DE                     u8852:	
  7824  10DE  1683               	bsf	3,5	;RP0=1, select bank1
  7825  10DF  00E0               	movwf	??_TimeToInd^(0+128)
  7826  10E0  1703               	bsf	3,6	;RP1=1, select bank3
  7827  10E1  08B3               	movf	TimeToInd@SignalsFinal^(0+384),f
  7828  10E2  1903               	btfsc	3,2
  7829  10E3  28E6               	goto	u8860
  7830  10E4  3001               	movlw	1
  7831  10E5  28E7               	goto	u8862
  7832  10E6                     u8860:	
  7833  10E6  3000               	movlw	0
  7834  10E7                     u8862:	
  7835  10E7  1303               	bcf	3,6	;RP1=0, select bank1
  7836  10E8  0660               	xorwf	??_TimeToInd^(0+128),w
  7837  10E9  1903               	skipnz
  7838  10EA  28FC               	goto	l10989
  7839                           
  7840                           ;prog.c: 267: clrInd();
  7841  10EB  120A  118A  2690   	fcall	_clrInd
      +       160A  118A         
  7842                           
  7843                           ;prog.c: 268: ModeOfFirstLine = SignalsFinal > 0;
  7844  10F0  1683               	bsf	3,5	;RP0=1, select bank3
  7845  10F1  1703               	bsf	3,6	;RP1=1, select bank3
  7846  10F2  08B3               	movf	TimeToInd@SignalsFinal^(0+384),f
  7847  10F3  1903               	btfsc	3,2
  7848  10F4  28F9               	goto	u8880
  7849  10F5  1283               	bcf	3,5	;RP0=0, select bank0
  7850  10F6  1303               	bcf	3,6	;RP1=0, select bank0
  7851  10F7  16DD               	bsf	_ModeOfFirstLine/(0+8),_ModeOfFirstLine& (0+7)
  7852  10F8  28FC               	goto	l10989
  7853  10F9                     u8880:	
  7854  10F9  1283               	bcf	3,5	;RP0=0, select bank0
  7855  10FA  1303               	bcf	3,6	;RP1=0, select bank0
  7856  10FB  12DD               	bcf	_ModeOfFirstLine/(0+8),_ModeOfFirstLine& (0+7)
  7857  10FC                     l10989:	
  7858                           
  7859                           ;prog.c: 269: }
  7860                           ;prog.c: 270: if(SignalsFinal > 0){
  7861  10FC  1683               	bsf	3,5	;RP0=1, select bank3
  7862  10FD  1703               	bsf	3,6	;RP1=1, select bank3
  7863  10FE  0833               	movf	TimeToInd@SignalsFinal^(0+384),w
  7864  10FF  1903               	btfsc	3,2
  7865  1100  2929               	goto	l886
  7866                           
  7867                           ;prog.c: 271: symbol = 4;
  7868  1101  3004               	movlw	4
  7869  1102  00B8               	movwf	TimeToInd@symbol^(0+384)
  7870                           
  7871                           ;prog.c: 273: unsigned char D[4] = {34,34,34,255};
  7872  1103  0853               	movf	(TimeToInd@F1311+3)^(0+384),w
  7873  1104  0099               	movwf	(TimeToInd@D+3)^(0+384)
  7874  1105  0852               	movf	(TimeToInd@F1311+2)^(0+384),w
  7875  1106  0098               	movwf	(TimeToInd@D+2)^(0+384)
  7876  1107  0851               	movf	(TimeToInd@F1311+1)^(0+384),w
  7877  1108  0097               	movwf	(TimeToInd@D+1)^(0+384)
  7878  1109  0850               	movf	TimeToInd@F1311^(0+384),w
  7879  110A  0096               	movwf	TimeToInd@D^(0+384)
  7880                           
  7881                           ;prog.c: 274: for(unsigned char i = 1; i<4; i++){
  7882  110B  01B1               	clrf	TimeToInd@i^(0+384)
  7883  110C  0AB1               	incf	TimeToInd@i^(0+384),f
  7884  110D                     l10997:	
  7885                           
  7886                           ;prog.c: 275: unsigned char SignalOn = SignalsFinal%2;
  7887  110D  0833               	movf	TimeToInd@SignalsFinal^(0+384),w
  7888  110E  009A               	movwf	TimeToInd@SignalOn^(0+384)
  7889  110F  3001               	movlw	1
  7890  1110  059A               	andwf	TimeToInd@SignalOn^(0+384),f
  7891                           
  7892                           ;prog.c: 276: SignalsFinal/=2;
  7893  1111  1003               	clrc
  7894  1112  0CB3               	rrf	TimeToInd@SignalsFinal^(0+384),f
  7895                           
  7896                           ;prog.c: 277: if(SignalOn==1){
  7897  1113  0B1A               	decfsz	TimeToInd@SignalOn^(0+384),w
  7898  1114  291B               	goto	l11007
  7899                           
  7900                           ;prog.c: 278: D[2] = D[1];
  7901  1115  0817               	movf	(TimeToInd@D^(0+384)+1),w
  7902  1116  0098               	movwf	(TimeToInd@D^(0+384)+2)
  7903                           
  7904                           ;prog.c: 279: D[1] = D[0];
  7905  1117  0816               	movf	TimeToInd@D^(0+384),w
  7906  1118  0097               	movwf	(TimeToInd@D^(0+384)+1)
  7907                           
  7908                           ;prog.c: 280: D[0] = i;
  7909  1119  0831               	movf	TimeToInd@i^(0+384),w
  7910  111A  0096               	movwf	TimeToInd@D^(0+384)
  7911  111B                     l11007:	
  7912  111B  3004               	movlw	4
  7913  111C  0AB1               	incf	TimeToInd@i^(0+384),f
  7914  111D  0231               	subwf	TimeToInd@i^(0+384),w
  7915  111E  1C03               	skipc
  7916  111F  290D               	goto	l10997
  7917                           
  7918                           ;prog.c: 281: }
  7919                           ;prog.c: 282: }
  7920                           ;prog.c: 283: SendArrayToLCD(D, line, 1);
  7921  1120  0839               	movf	TimeToInd@line^(0+384),w
  7922  1121  1303               	bcf	3,6	;RP1=0, select bank1
  7923  1122  00B8               	movwf	?_SendArrayToLCD^(0+128)
  7924  1123  3096               	movlw	TimeToInd@D& (0+255)
  7925  1124  01B9               	clrf	(?_SendArrayToLCD^(0+128)+1)
  7926  1125  0AB9               	incf	(?_SendArrayToLCD^(0+128)+1),f
  7927  1126  27DE  160A  118A   	fcall	_SendArrayToLCD
  7928  1129                     l886:	
  7929                           
  7930                           ;prog.c: 284: }
  7931                           ;prog.c: 286: setDigit(line, symbol+3, 35);
  7932  1129  1703               	bsf	3,6	;RP1=1, select bank3
  7933  112A  0838               	movf	TimeToInd@symbol^(0+384),w
  7934  112B  3E03               	addlw	3
  7935  112C  1303               	bcf	3,6	;RP1=0, select bank1
  7936  112D  00AE               	movwf	?_setDigit^(0+128)
  7937  112E  3023               	movlw	35
  7938  112F  00AF               	movwf	(?_setDigit^(0+128)+1)
  7939  1130  1703               	bsf	3,6	;RP1=1, select bank3
  7940  1131  0839               	movf	TimeToInd@line^(0+384),w
  7941  1132  265C  160A  118A   	fcall	_setDigit
  7942                           
  7943                           ;prog.c: 287: setDigit(line, symbol+6, 35);
  7944  1135  1703               	bsf	3,6	;RP1=1, select bank3
  7945  1136  0838               	movf	TimeToInd@symbol^(0+384),w
  7946  1137  3E06               	addlw	6
  7947  1138  1303               	bcf	3,6	;RP1=0, select bank1
  7948  1139  00AE               	movwf	?_setDigit^(0+128)
  7949  113A  3023               	movlw	35
  7950  113B  00AF               	movwf	(?_setDigit^(0+128)+1)
  7951  113C  1703               	bsf	3,6	;RP1=1, select bank3
  7952  113D  0839               	movf	TimeToInd@line^(0+384),w
  7953  113E  265C  160A  118A   	fcall	_setDigit
  7954                           
  7955                           ;prog.c: 288: long int temp = Clock/100;
  7956  1141  3064               	movlw	100
  7957  1142  00A0               	movwf	?___aldiv^(0+128)
  7958  1143  01A1               	clrf	(?___aldiv+1)^(0+128)
  7959  1144  01A2               	clrf	(?___aldiv+2)^(0+128)
  7960  1145  01A3               	clrf	(?___aldiv+3)^(0+128)
  7961  1146  1703               	bsf	3,6	;RP1=1, select bank3
  7962  1147  085D               	movf	(_Clock+3)^(0+384),w
  7963  1148  1303               	bcf	3,6	;RP1=0, select bank1
  7964  1149  00A7               	movwf	((?___aldiv+3)^(0+128)+4)
  7965  114A  1703               	bsf	3,6	;RP1=1, select bank3
  7966  114B  085C               	movf	(_Clock+2)^(0+384),w
  7967  114C  1303               	bcf	3,6	;RP1=0, select bank1
  7968  114D  00A6               	movwf	((?___aldiv+2)^(0+128)+4)
  7969  114E  1703               	bsf	3,6	;RP1=1, select bank3
  7970  114F  085B               	movf	(_Clock+1)^(0+384),w
  7971  1150  1303               	bcf	3,6	;RP1=0, select bank1
  7972  1151  00A5               	movwf	((?___aldiv+1)^(0+128)+4)
  7973  1152  1703               	bsf	3,6	;RP1=1, select bank3
  7974  1153  085A               	movf	_Clock^(0+384),w
  7975  1154  1303               	bcf	3,6	;RP1=0, select bank1
  7976  1155  00A4               	movwf	(?___aldiv^(0+128)+4)
  7977  1156  26B2  160A  118A   	fcall	___aldiv
  7978  1159  0823               	movf	(?___aldiv+3)^(0+128),w
  7979  115A  1703               	bsf	3,6	;RP1=1, select bank3
  7980  115B  00BD               	movwf	(TimeToInd@temp+3)^(0+384)
  7981  115C  1303               	bcf	3,6	;RP1=0, select bank1
  7982  115D  0822               	movf	(?___aldiv+2)^(0+128),w
  7983  115E  1703               	bsf	3,6	;RP1=1, select bank3
  7984  115F  00BC               	movwf	(TimeToInd@temp+2)^(0+384)
  7985  1160  1303               	bcf	3,6	;RP1=0, select bank1
  7986  1161  0821               	movf	(?___aldiv+1)^(0+128),w
  7987  1162  1703               	bsf	3,6	;RP1=1, select bank3
  7988  1163  00BB               	movwf	(TimeToInd@temp+1)^(0+384)
  7989  1164  1303               	bcf	3,6	;RP1=0, select bank1
  7990  1165  0820               	movf	?___aldiv^(0+128),w
  7991  1166  1703               	bsf	3,6	;RP1=1, select bank3
  7992  1167  00BA               	movwf	TimeToInd@temp^(0+384)
  7993                           
  7994                           ;prog.c: 289: setDigit(line, symbol+1, temp%10);
  7995  1168  0A38               	incf	TimeToInd@symbol^(0+384),w
  7996  1169  1303               	bcf	3,6	;RP1=0, select bank1
  7997  116A  00AE               	movwf	?_setDigit^(0+128)
  7998  116B  300A               	movlw	10
  7999  116C  00A0               	movwf	?___almod^(0+128)
  8000  116D  01A1               	clrf	(?___almod+1)^(0+128)
  8001  116E  01A2               	clrf	(?___almod+2)^(0+128)
  8002  116F  01A3               	clrf	(?___almod+3)^(0+128)
  8003  1170  1703               	bsf	3,6	;RP1=1, select bank3
  8004  1171  083D               	movf	(TimeToInd@temp+3)^(0+384),w
  8005  1172  1303               	bcf	3,6	;RP1=0, select bank1
  8006  1173  00A7               	movwf	((?___almod+3)^(0+128)+4)
  8007  1174  1703               	bsf	3,6	;RP1=1, select bank3
  8008  1175  083C               	movf	(TimeToInd@temp+2)^(0+384),w
  8009  1176  1303               	bcf	3,6	;RP1=0, select bank1
  8010  1177  00A6               	movwf	((?___almod+2)^(0+128)+4)
  8011  1178  1703               	bsf	3,6	;RP1=1, select bank3
  8012  1179  083B               	movf	(TimeToInd@temp+1)^(0+384),w
  8013  117A  1303               	bcf	3,6	;RP1=0, select bank1
  8014  117B  00A5               	movwf	((?___almod+1)^(0+128)+4)
  8015  117C  1703               	bsf	3,6	;RP1=1, select bank3
  8016  117D  083A               	movf	TimeToInd@temp^(0+384),w
  8017  117E  1303               	bcf	3,6	;RP1=0, select bank1
  8018  117F  00A4               	movwf	(?___almod^(0+128)+4)
  8019  1180  2727  160A  118A   	fcall	___almod
  8020  1183  0820               	movf	?___almod^(0+128),w
  8021  1184  00AF               	movwf	(?_setDigit^(0+128)+1)
  8022  1185  1703               	bsf	3,6	;RP1=1, select bank3
  8023  1186  0839               	movf	TimeToInd@line^(0+384),w
  8024  1187  265C  160A  118A   	fcall	_setDigit
  8025                           
  8026                           ;prog.c: 290: temp /= 10;
  8027  118A  300A               	movlw	10
  8028  118B  00A0               	movwf	?___aldiv^(0+128)
  8029  118C  01A1               	clrf	(?___aldiv+1)^(0+128)
  8030  118D  01A2               	clrf	(?___aldiv+2)^(0+128)
  8031  118E  01A3               	clrf	(?___aldiv+3)^(0+128)
  8032  118F  1703               	bsf	3,6	;RP1=1, select bank3
  8033  1190  083D               	movf	(TimeToInd@temp+3)^(0+384),w
  8034  1191  1303               	bcf	3,6	;RP1=0, select bank1
  8035  1192  00A7               	movwf	((?___aldiv+3)^(0+128)+4)
  8036  1193  1703               	bsf	3,6	;RP1=1, select bank3
  8037  1194  083C               	movf	(TimeToInd@temp+2)^(0+384),w
  8038  1195  1303               	bcf	3,6	;RP1=0, select bank1
  8039  1196  00A6               	movwf	((?___aldiv+2)^(0+128)+4)
  8040  1197  1703               	bsf	3,6	;RP1=1, select bank3
  8041  1198  083B               	movf	(TimeToInd@temp+1)^(0+384),w
  8042  1199  1303               	bcf	3,6	;RP1=0, select bank1
  8043  119A  00A5               	movwf	((?___aldiv+1)^(0+128)+4)
  8044  119B  1703               	bsf	3,6	;RP1=1, select bank3
  8045  119C  083A               	movf	TimeToInd@temp^(0+384),w
  8046  119D  1303               	bcf	3,6	;RP1=0, select bank1
  8047  119E  00A4               	movwf	(?___aldiv^(0+128)+4)
  8048  119F  26B2  160A  118A   	fcall	___aldiv
  8049  11A2  0823               	movf	(?___aldiv+3)^(0+128),w
  8050  11A3  1703               	bsf	3,6	;RP1=1, select bank3
  8051  11A4  00BD               	movwf	(TimeToInd@temp+3)^(0+384)
  8052  11A5  1303               	bcf	3,6	;RP1=0, select bank1
  8053  11A6  0822               	movf	(?___aldiv+2)^(0+128),w
  8054  11A7  1703               	bsf	3,6	;RP1=1, select bank3
  8055  11A8  00BC               	movwf	(TimeToInd@temp+2)^(0+384)
  8056  11A9  1303               	bcf	3,6	;RP1=0, select bank1
  8057  11AA  0821               	movf	(?___aldiv+1)^(0+128),w
  8058  11AB  1703               	bsf	3,6	;RP1=1, select bank3
  8059  11AC  00BB               	movwf	(TimeToInd@temp+1)^(0+384)
  8060  11AD  1303               	bcf	3,6	;RP1=0, select bank1
  8061  11AE  0820               	movf	?___aldiv^(0+128),w
  8062  11AF  1703               	bsf	3,6	;RP1=1, select bank3
  8063  11B0  00BA               	movwf	TimeToInd@temp^(0+384)
  8064                           
  8065                           ;prog.c: 291: setDigit(line, symbol+2, temp%6);
  8066  11B1  0838               	movf	TimeToInd@symbol^(0+384),w
  8067  11B2  3E02               	addlw	2
  8068  11B3  1303               	bcf	3,6	;RP1=0, select bank1
  8069  11B4  00AE               	movwf	?_setDigit^(0+128)
  8070  11B5  3006               	movlw	6
  8071  11B6  00A0               	movwf	?___almod^(0+128)
  8072  11B7  01A1               	clrf	(?___almod+1)^(0+128)
  8073  11B8  01A2               	clrf	(?___almod+2)^(0+128)
  8074  11B9  01A3               	clrf	(?___almod+3)^(0+128)
  8075  11BA  1703               	bsf	3,6	;RP1=1, select bank3
  8076  11BB  083D               	movf	(TimeToInd@temp+3)^(0+384),w
  8077  11BC  1303               	bcf	3,6	;RP1=0, select bank1
  8078  11BD  00A7               	movwf	((?___almod+3)^(0+128)+4)
  8079  11BE  1703               	bsf	3,6	;RP1=1, select bank3
  8080  11BF  083C               	movf	(TimeToInd@temp+2)^(0+384),w
  8081  11C0  1303               	bcf	3,6	;RP1=0, select bank1
  8082  11C1  00A6               	movwf	((?___almod+2)^(0+128)+4)
  8083  11C2  1703               	bsf	3,6	;RP1=1, select bank3
  8084  11C3  083B               	movf	(TimeToInd@temp+1)^(0+384),w
  8085  11C4  1303               	bcf	3,6	;RP1=0, select bank1
  8086  11C5  00A5               	movwf	((?___almod+1)^(0+128)+4)
  8087  11C6  1703               	bsf	3,6	;RP1=1, select bank3
  8088  11C7  083A               	movf	TimeToInd@temp^(0+384),w
  8089  11C8  1303               	bcf	3,6	;RP1=0, select bank1
  8090  11C9  00A4               	movwf	(?___almod^(0+128)+4)
  8091  11CA  2727  160A  118A   	fcall	___almod
  8092  11CD  0820               	movf	?___almod^(0+128),w
  8093  11CE  00AF               	movwf	(?_setDigit^(0+128)+1)
  8094  11CF  1703               	bsf	3,6	;RP1=1, select bank3
  8095  11D0  0839               	movf	TimeToInd@line^(0+384),w
  8096  11D1  265C  160A  118A   	fcall	_setDigit
  8097                           
  8098                           ;prog.c: 292: temp /= 6;
  8099  11D4  3006               	movlw	6
  8100  11D5  00A0               	movwf	?___aldiv^(0+128)
  8101  11D6  01A1               	clrf	(?___aldiv+1)^(0+128)
  8102  11D7  01A2               	clrf	(?___aldiv+2)^(0+128)
  8103  11D8  01A3               	clrf	(?___aldiv+3)^(0+128)
  8104  11D9  1703               	bsf	3,6	;RP1=1, select bank3
  8105  11DA  083D               	movf	(TimeToInd@temp+3)^(0+384),w
  8106  11DB  1303               	bcf	3,6	;RP1=0, select bank1
  8107  11DC  00A7               	movwf	((?___aldiv+3)^(0+128)+4)
  8108  11DD  1703               	bsf	3,6	;RP1=1, select bank3
  8109  11DE  083C               	movf	(TimeToInd@temp+2)^(0+384),w
  8110  11DF  1303               	bcf	3,6	;RP1=0, select bank1
  8111  11E0  00A6               	movwf	((?___aldiv+2)^(0+128)+4)
  8112  11E1  1703               	bsf	3,6	;RP1=1, select bank3
  8113  11E2  083B               	movf	(TimeToInd@temp+1)^(0+384),w
  8114  11E3  1303               	bcf	3,6	;RP1=0, select bank1
  8115  11E4  00A5               	movwf	((?___aldiv+1)^(0+128)+4)
  8116  11E5  1703               	bsf	3,6	;RP1=1, select bank3
  8117  11E6  083A               	movf	TimeToInd@temp^(0+384),w
  8118  11E7  1303               	bcf	3,6	;RP1=0, select bank1
  8119  11E8  00A4               	movwf	(?___aldiv^(0+128)+4)
  8120  11E9  26B2  160A  118A   	fcall	___aldiv
  8121  11EC  0823               	movf	(?___aldiv+3)^(0+128),w
  8122  11ED  1703               	bsf	3,6	;RP1=1, select bank3
  8123  11EE  00BD               	movwf	(TimeToInd@temp+3)^(0+384)
  8124  11EF  1303               	bcf	3,6	;RP1=0, select bank1
  8125  11F0  0822               	movf	(?___aldiv+2)^(0+128),w
  8126  11F1  1703               	bsf	3,6	;RP1=1, select bank3
  8127  11F2  00BC               	movwf	(TimeToInd@temp+2)^(0+384)
  8128  11F3  1303               	bcf	3,6	;RP1=0, select bank1
  8129  11F4  0821               	movf	(?___aldiv+1)^(0+128),w
  8130  11F5  1703               	bsf	3,6	;RP1=1, select bank3
  8131  11F6  00BB               	movwf	(TimeToInd@temp+1)^(0+384)
  8132  11F7  1303               	bcf	3,6	;RP1=0, select bank1
  8133  11F8  0820               	movf	?___aldiv^(0+128),w
  8134  11F9  1703               	bsf	3,6	;RP1=1, select bank3
  8135  11FA  00BA               	movwf	TimeToInd@temp^(0+384)
  8136                           
  8137                           ;prog.c: 293: setDigit(line, symbol+4, temp%10);
  8138  11FB  0838               	movf	TimeToInd@symbol^(0+384),w
  8139  11FC  3E04               	addlw	4
  8140  11FD  1303               	bcf	3,6	;RP1=0, select bank1
  8141  11FE  00AE               	movwf	?_setDigit^(0+128)
  8142  11FF  300A               	movlw	10
  8143  1200  00A0               	movwf	?___almod^(0+128)
  8144  1201  01A1               	clrf	(?___almod+1)^(0+128)
  8145  1202  01A2               	clrf	(?___almod+2)^(0+128)
  8146  1203  01A3               	clrf	(?___almod+3)^(0+128)
  8147  1204  1703               	bsf	3,6	;RP1=1, select bank3
  8148  1205  083D               	movf	(TimeToInd@temp+3)^(0+384),w
  8149  1206  1303               	bcf	3,6	;RP1=0, select bank1
  8150  1207  00A7               	movwf	((?___almod+3)^(0+128)+4)
  8151  1208  1703               	bsf	3,6	;RP1=1, select bank3
  8152  1209  083C               	movf	(TimeToInd@temp+2)^(0+384),w
  8153  120A  1303               	bcf	3,6	;RP1=0, select bank1
  8154  120B  00A6               	movwf	((?___almod+2)^(0+128)+4)
  8155  120C  1703               	bsf	3,6	;RP1=1, select bank3
  8156  120D  083B               	movf	(TimeToInd@temp+1)^(0+384),w
  8157  120E  1303               	bcf	3,6	;RP1=0, select bank1
  8158  120F  00A5               	movwf	((?___almod+1)^(0+128)+4)
  8159  1210  1703               	bsf	3,6	;RP1=1, select bank3
  8160  1211  083A               	movf	TimeToInd@temp^(0+384),w
  8161  1212  1303               	bcf	3,6	;RP1=0, select bank1
  8162  1213  00A4               	movwf	(?___almod^(0+128)+4)
  8163  1214  2727  160A  118A   	fcall	___almod
  8164  1217  0820               	movf	?___almod^(0+128),w
  8165  1218  00AF               	movwf	(?_setDigit^(0+128)+1)
  8166  1219  1703               	bsf	3,6	;RP1=1, select bank3
  8167  121A  0839               	movf	TimeToInd@line^(0+384),w
  8168  121B  265C  160A  118A   	fcall	_setDigit
  8169                           
  8170                           ;prog.c: 294: temp /= 10;
  8171  121E  300A               	movlw	10
  8172  121F  00A0               	movwf	?___aldiv^(0+128)
  8173  1220  01A1               	clrf	(?___aldiv+1)^(0+128)
  8174  1221  01A2               	clrf	(?___aldiv+2)^(0+128)
  8175  1222  01A3               	clrf	(?___aldiv+3)^(0+128)
  8176  1223  1703               	bsf	3,6	;RP1=1, select bank3
  8177  1224  083D               	movf	(TimeToInd@temp+3)^(0+384),w
  8178  1225  1303               	bcf	3,6	;RP1=0, select bank1
  8179  1226  00A7               	movwf	((?___aldiv+3)^(0+128)+4)
  8180  1227  1703               	bsf	3,6	;RP1=1, select bank3
  8181  1228  083C               	movf	(TimeToInd@temp+2)^(0+384),w
  8182  1229  1303               	bcf	3,6	;RP1=0, select bank1
  8183  122A  00A6               	movwf	((?___aldiv+2)^(0+128)+4)
  8184  122B  1703               	bsf	3,6	;RP1=1, select bank3
  8185  122C  083B               	movf	(TimeToInd@temp+1)^(0+384),w
  8186  122D  1303               	bcf	3,6	;RP1=0, select bank1
  8187  122E  00A5               	movwf	((?___aldiv+1)^(0+128)+4)
  8188  122F  1703               	bsf	3,6	;RP1=1, select bank3
  8189  1230  083A               	movf	TimeToInd@temp^(0+384),w
  8190  1231  1303               	bcf	3,6	;RP1=0, select bank1
  8191  1232  00A4               	movwf	(?___aldiv^(0+128)+4)
  8192  1233  26B2  160A  118A   	fcall	___aldiv
  8193  1236  0823               	movf	(?___aldiv+3)^(0+128),w
  8194  1237  1703               	bsf	3,6	;RP1=1, select bank3
  8195  1238  00BD               	movwf	(TimeToInd@temp+3)^(0+384)
  8196  1239  1303               	bcf	3,6	;RP1=0, select bank1
  8197  123A  0822               	movf	(?___aldiv+2)^(0+128),w
  8198  123B  1703               	bsf	3,6	;RP1=1, select bank3
  8199  123C  00BC               	movwf	(TimeToInd@temp+2)^(0+384)
  8200  123D  1303               	bcf	3,6	;RP1=0, select bank1
  8201  123E  0821               	movf	(?___aldiv+1)^(0+128),w
  8202  123F  1703               	bsf	3,6	;RP1=1, select bank3
  8203  1240  00BB               	movwf	(TimeToInd@temp+1)^(0+384)
  8204  1241  1303               	bcf	3,6	;RP1=0, select bank1
  8205  1242  0820               	movf	?___aldiv^(0+128),w
  8206  1243  1703               	bsf	3,6	;RP1=1, select bank3
  8207  1244  00BA               	movwf	TimeToInd@temp^(0+384)
  8208                           
  8209                           ;prog.c: 295: setDigit(line, symbol+5, temp%6);
  8210  1245  0838               	movf	TimeToInd@symbol^(0+384),w
  8211  1246  3E05               	addlw	5
  8212  1247  1303               	bcf	3,6	;RP1=0, select bank1
  8213  1248  00AE               	movwf	?_setDigit^(0+128)
  8214  1249  3006               	movlw	6
  8215  124A  00A0               	movwf	?___almod^(0+128)
  8216  124B  01A1               	clrf	(?___almod+1)^(0+128)
  8217  124C  01A2               	clrf	(?___almod+2)^(0+128)
  8218  124D  01A3               	clrf	(?___almod+3)^(0+128)
  8219  124E  1703               	bsf	3,6	;RP1=1, select bank3
  8220  124F  083D               	movf	(TimeToInd@temp+3)^(0+384),w
  8221  1250  1303               	bcf	3,6	;RP1=0, select bank1
  8222  1251  00A7               	movwf	((?___almod+3)^(0+128)+4)
  8223  1252  1703               	bsf	3,6	;RP1=1, select bank3
  8224  1253  083C               	movf	(TimeToInd@temp+2)^(0+384),w
  8225  1254  1303               	bcf	3,6	;RP1=0, select bank1
  8226  1255  00A6               	movwf	((?___almod+2)^(0+128)+4)
  8227  1256  1703               	bsf	3,6	;RP1=1, select bank3
  8228  1257  083B               	movf	(TimeToInd@temp+1)^(0+384),w
  8229  1258  1303               	bcf	3,6	;RP1=0, select bank1
  8230  1259  00A5               	movwf	((?___almod+1)^(0+128)+4)
  8231  125A  1703               	bsf	3,6	;RP1=1, select bank3
  8232  125B  083A               	movf	TimeToInd@temp^(0+384),w
  8233  125C  1303               	bcf	3,6	;RP1=0, select bank1
  8234  125D  00A4               	movwf	(?___almod^(0+128)+4)
  8235  125E  2727  160A  118A   	fcall	___almod
  8236  1261  0820               	movf	?___almod^(0+128),w
  8237  1262  00AF               	movwf	(?_setDigit^(0+128)+1)
  8238  1263  1703               	bsf	3,6	;RP1=1, select bank3
  8239  1264  0839               	movf	TimeToInd@line^(0+384),w
  8240  1265  265C  160A  118A   	fcall	_setDigit
  8241                           
  8242                           ;prog.c: 296: temp /= 6;
  8243  1268  3006               	movlw	6
  8244  1269  00A0               	movwf	?___aldiv^(0+128)
  8245  126A  01A1               	clrf	(?___aldiv+1)^(0+128)
  8246  126B  01A2               	clrf	(?___aldiv+2)^(0+128)
  8247  126C  01A3               	clrf	(?___aldiv+3)^(0+128)
  8248  126D  1703               	bsf	3,6	;RP1=1, select bank3
  8249  126E  083D               	movf	(TimeToInd@temp+3)^(0+384),w
  8250  126F  1303               	bcf	3,6	;RP1=0, select bank1
  8251  1270  00A7               	movwf	((?___aldiv+3)^(0+128)+4)
  8252  1271  1703               	bsf	3,6	;RP1=1, select bank3
  8253  1272  083C               	movf	(TimeToInd@temp+2)^(0+384),w
  8254  1273  1303               	bcf	3,6	;RP1=0, select bank1
  8255  1274  00A6               	movwf	((?___aldiv+2)^(0+128)+4)
  8256  1275  1703               	bsf	3,6	;RP1=1, select bank3
  8257  1276  083B               	movf	(TimeToInd@temp+1)^(0+384),w
  8258  1277  1303               	bcf	3,6	;RP1=0, select bank1
  8259  1278  00A5               	movwf	((?___aldiv+1)^(0+128)+4)
  8260  1279  1703               	bsf	3,6	;RP1=1, select bank3
  8261  127A  083A               	movf	TimeToInd@temp^(0+384),w
  8262  127B  1303               	bcf	3,6	;RP1=0, select bank1
  8263  127C  00A4               	movwf	(?___aldiv^(0+128)+4)
  8264  127D  26B2  160A  118A   	fcall	___aldiv
  8265  1280  0823               	movf	(?___aldiv+3)^(0+128),w
  8266  1281  1703               	bsf	3,6	;RP1=1, select bank3
  8267  1282  00BD               	movwf	(TimeToInd@temp+3)^(0+384)
  8268  1283  1303               	bcf	3,6	;RP1=0, select bank1
  8269  1284  0822               	movf	(?___aldiv+2)^(0+128),w
  8270  1285  1703               	bsf	3,6	;RP1=1, select bank3
  8271  1286  00BC               	movwf	(TimeToInd@temp+2)^(0+384)
  8272  1287  1303               	bcf	3,6	;RP1=0, select bank1
  8273  1288  0821               	movf	(?___aldiv+1)^(0+128),w
  8274  1289  1703               	bsf	3,6	;RP1=1, select bank3
  8275  128A  00BB               	movwf	(TimeToInd@temp+1)^(0+384)
  8276  128B  1303               	bcf	3,6	;RP1=0, select bank1
  8277  128C  0820               	movf	?___aldiv^(0+128),w
  8278  128D  1703               	bsf	3,6	;RP1=1, select bank3
  8279  128E  00BA               	movwf	TimeToInd@temp^(0+384)
  8280                           
  8281                           ;prog.c: 297: unsigned char day = temp/24 + 1;
  8282  128F  3018               	movlw	24
  8283  1290  1303               	bcf	3,6	;RP1=0, select bank1
  8284  1291  00A0               	movwf	?___aldiv^(0+128)
  8285  1292  01A1               	clrf	(?___aldiv+1)^(0+128)
  8286  1293  01A2               	clrf	(?___aldiv+2)^(0+128)
  8287  1294  01A3               	clrf	(?___aldiv+3)^(0+128)
  8288  1295  1703               	bsf	3,6	;RP1=1, select bank3
  8289  1296  083D               	movf	(TimeToInd@temp+3)^(0+384),w
  8290  1297  1303               	bcf	3,6	;RP1=0, select bank1
  8291  1298  00A7               	movwf	((?___aldiv+3)^(0+128)+4)
  8292  1299  1703               	bsf	3,6	;RP1=1, select bank3
  8293  129A  083C               	movf	(TimeToInd@temp+2)^(0+384),w
  8294  129B  1303               	bcf	3,6	;RP1=0, select bank1
  8295  129C  00A6               	movwf	((?___aldiv+2)^(0+128)+4)
  8296  129D  1703               	bsf	3,6	;RP1=1, select bank3
  8297  129E  083B               	movf	(TimeToInd@temp+1)^(0+384),w
  8298  129F  1303               	bcf	3,6	;RP1=0, select bank1
  8299  12A0  00A5               	movwf	((?___aldiv+1)^(0+128)+4)
  8300  12A1  1703               	bsf	3,6	;RP1=1, select bank3
  8301  12A2  083A               	movf	TimeToInd@temp^(0+384),w
  8302  12A3  1303               	bcf	3,6	;RP1=0, select bank1
  8303  12A4  00A4               	movwf	(?___aldiv^(0+128)+4)
  8304  12A5  26B2  160A  118A   	fcall	___aldiv
  8305  12A8  0A20               	incf	?___aldiv^(0+128),w
  8306  12A9  1703               	bsf	3,6	;RP1=1, select bank3
  8307  12AA  0090               	movwf	TimeToInd@day^(0+384)
  8308                           
  8309                           ;prog.c: 298: temp %= 24;
  8310  12AB  3018               	movlw	24
  8311  12AC  1303               	bcf	3,6	;RP1=0, select bank1
  8312  12AD  00A0               	movwf	?___almod^(0+128)
  8313  12AE  01A1               	clrf	(?___almod+1)^(0+128)
  8314  12AF  01A2               	clrf	(?___almod+2)^(0+128)
  8315  12B0  01A3               	clrf	(?___almod+3)^(0+128)
  8316  12B1  1703               	bsf	3,6	;RP1=1, select bank3
  8317  12B2  083D               	movf	(TimeToInd@temp+3)^(0+384),w
  8318  12B3  1303               	bcf	3,6	;RP1=0, select bank1
  8319  12B4  00A7               	movwf	((?___almod+3)^(0+128)+4)
  8320  12B5  1703               	bsf	3,6	;RP1=1, select bank3
  8321  12B6  083C               	movf	(TimeToInd@temp+2)^(0+384),w
  8322  12B7  1303               	bcf	3,6	;RP1=0, select bank1
  8323  12B8  00A6               	movwf	((?___almod+2)^(0+128)+4)
  8324  12B9  1703               	bsf	3,6	;RP1=1, select bank3
  8325  12BA  083B               	movf	(TimeToInd@temp+1)^(0+384),w
  8326  12BB  1303               	bcf	3,6	;RP1=0, select bank1
  8327  12BC  00A5               	movwf	((?___almod+1)^(0+128)+4)
  8328  12BD  1703               	bsf	3,6	;RP1=1, select bank3
  8329  12BE  083A               	movf	TimeToInd@temp^(0+384),w
  8330  12BF  1303               	bcf	3,6	;RP1=0, select bank1
  8331  12C0  00A4               	movwf	(?___almod^(0+128)+4)
  8332  12C1  2727  160A  118A   	fcall	___almod
  8333  12C4  0823               	movf	(?___almod+3)^(0+128),w
  8334  12C5  1703               	bsf	3,6	;RP1=1, select bank3
  8335  12C6  00BD               	movwf	(TimeToInd@temp+3)^(0+384)
  8336  12C7  1303               	bcf	3,6	;RP1=0, select bank1
  8337  12C8  0822               	movf	(?___almod+2)^(0+128),w
  8338  12C9  1703               	bsf	3,6	;RP1=1, select bank3
  8339  12CA  00BC               	movwf	(TimeToInd@temp+2)^(0+384)
  8340  12CB  1303               	bcf	3,6	;RP1=0, select bank1
  8341  12CC  0821               	movf	(?___almod+1)^(0+128),w
  8342  12CD  1703               	bsf	3,6	;RP1=1, select bank3
  8343  12CE  00BB               	movwf	(TimeToInd@temp+1)^(0+384)
  8344  12CF  1303               	bcf	3,6	;RP1=0, select bank1
  8345  12D0  0820               	movf	?___almod^(0+128),w
  8346  12D1  1703               	bsf	3,6	;RP1=1, select bank3
  8347  12D2  00BA               	movwf	TimeToInd@temp^(0+384)
  8348                           
  8349                           ;prog.c: 299: setDigit(line, symbol+7, temp%10);
  8350  12D3  0838               	movf	TimeToInd@symbol^(0+384),w
  8351  12D4  3E07               	addlw	7
  8352  12D5  1303               	bcf	3,6	;RP1=0, select bank1
  8353  12D6  00AE               	movwf	?_setDigit^(0+128)
  8354  12D7  300A               	movlw	10
  8355  12D8  00A0               	movwf	?___almod^(0+128)
  8356  12D9  01A1               	clrf	(?___almod+1)^(0+128)
  8357  12DA  01A2               	clrf	(?___almod+2)^(0+128)
  8358  12DB  01A3               	clrf	(?___almod+3)^(0+128)
  8359  12DC  1703               	bsf	3,6	;RP1=1, select bank3
  8360  12DD  083D               	movf	(TimeToInd@temp+3)^(0+384),w
  8361  12DE  1303               	bcf	3,6	;RP1=0, select bank1
  8362  12DF  00A7               	movwf	((?___almod+3)^(0+128)+4)
  8363  12E0  1703               	bsf	3,6	;RP1=1, select bank3
  8364  12E1  083C               	movf	(TimeToInd@temp+2)^(0+384),w
  8365  12E2  1303               	bcf	3,6	;RP1=0, select bank1
  8366  12E3  00A6               	movwf	((?___almod+2)^(0+128)+4)
  8367  12E4  1703               	bsf	3,6	;RP1=1, select bank3
  8368  12E5  083B               	movf	(TimeToInd@temp+1)^(0+384),w
  8369  12E6  1303               	bcf	3,6	;RP1=0, select bank1
  8370  12E7  00A5               	movwf	((?___almod+1)^(0+128)+4)
  8371  12E8  1703               	bsf	3,6	;RP1=1, select bank3
  8372  12E9  083A               	movf	TimeToInd@temp^(0+384),w
  8373  12EA  1303               	bcf	3,6	;RP1=0, select bank1
  8374  12EB  00A4               	movwf	(?___almod^(0+128)+4)
  8375  12EC  2727  160A  118A   	fcall	___almod
  8376  12EF  0820               	movf	?___almod^(0+128),w
  8377  12F0  00AF               	movwf	(?_setDigit^(0+128)+1)
  8378  12F1  1703               	bsf	3,6	;RP1=1, select bank3
  8379  12F2  0839               	movf	TimeToInd@line^(0+384),w
  8380  12F3  265C  160A  118A   	fcall	_setDigit
  8381                           
  8382                           ;prog.c: 300: setDigit(line, symbol+8, temp/10);
  8383  12F6  1703               	bsf	3,6	;RP1=1, select bank3
  8384  12F7  0838               	movf	TimeToInd@symbol^(0+384),w
  8385  12F8  3E08               	addlw	8
  8386  12F9  1303               	bcf	3,6	;RP1=0, select bank1
  8387  12FA  00AE               	movwf	?_setDigit^(0+128)
  8388  12FB  300A               	movlw	10
  8389  12FC  00A0               	movwf	?___aldiv^(0+128)
  8390  12FD  01A1               	clrf	(?___aldiv+1)^(0+128)
  8391  12FE  01A2               	clrf	(?___aldiv+2)^(0+128)
  8392  12FF  01A3               	clrf	(?___aldiv+3)^(0+128)
  8393  1300  1703               	bsf	3,6	;RP1=1, select bank3
  8394  1301  083D               	movf	(TimeToInd@temp+3)^(0+384),w
  8395  1302  1303               	bcf	3,6	;RP1=0, select bank1
  8396  1303  00A7               	movwf	((?___aldiv+3)^(0+128)+4)
  8397  1304  1703               	bsf	3,6	;RP1=1, select bank3
  8398  1305  083C               	movf	(TimeToInd@temp+2)^(0+384),w
  8399  1306  1303               	bcf	3,6	;RP1=0, select bank1
  8400  1307  00A6               	movwf	((?___aldiv+2)^(0+128)+4)
  8401  1308  1703               	bsf	3,6	;RP1=1, select bank3
  8402  1309  083B               	movf	(TimeToInd@temp+1)^(0+384),w
  8403  130A  1303               	bcf	3,6	;RP1=0, select bank1
  8404  130B  00A5               	movwf	((?___aldiv+1)^(0+128)+4)
  8405  130C  1703               	bsf	3,6	;RP1=1, select bank3
  8406  130D  083A               	movf	TimeToInd@temp^(0+384),w
  8407  130E  1303               	bcf	3,6	;RP1=0, select bank1
  8408  130F  00A4               	movwf	(?___aldiv^(0+128)+4)
  8409  1310  26B2  160A  118A   	fcall	___aldiv
  8410  1313  0820               	movf	?___aldiv^(0+128),w
  8411  1314  00AF               	movwf	(?_setDigit^(0+128)+1)
  8412  1315  1703               	bsf	3,6	;RP1=1, select bank3
  8413  1316  0839               	movf	TimeToInd@line^(0+384),w
  8414  1317  265C               	fcall	_setDigit
  8415                           
  8416                           ;prog.c: 302: SendArrayToLCD(GetDayOfWeek(day), line, symbol + 10);
  8417  1318  1703               	bsf	3,6	;RP1=1, select bank3
  8418  1319  0839               	movf	TimeToInd@line^(0+384),w
  8419  131A  1303               	bcf	3,6	;RP1=0, select bank1
  8420  131B  00B8               	movwf	?_SendArrayToLCD^(0+128)
  8421  131C  1703               	bsf	3,6	;RP1=1, select bank3
  8422  131D  0838               	movf	TimeToInd@symbol^(0+384),w
  8423  131E  3E0A               	addlw	10
  8424  131F  1303               	bcf	3,6	;RP1=0, select bank1
  8425  1320  00B9               	movwf	(?_SendArrayToLCD^(0+128)+1)
  8426  1321  1703               	bsf	3,6	;RP1=1, select bank3
  8427  1322  0810               	movf	TimeToInd@day^(0+384),w
  8428  1323  160A  158A  20A2   	fcall	_GetDayOfWeek
      +       160A  118A         
  8429  1328  27DE  160A  118A   	fcall	_SendArrayToLCD
  8430                           
  8431                           ;prog.c: 304: unsigned char DataArray[] = {34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,
      +                          34,255};
  8432  132B  309E               	movlw	TimeToInd@DataArray& (0+255)
  8433  132C  0084               	movwf	4
  8434  132D  30BF               	movlw	low TimeToInd@F1317
  8435  132E  00E0               	movwf	??_TimeToInd^(0+128)
  8436  132F  0804               	movf	4,w
  8437  1330  00E1               	movwf	(??_TimeToInd^(0+128)+1)
  8438  1331  3011               	movlw	17
  8439  1332  00E2               	movwf	(??_TimeToInd^(0+128)+2)
  8440  1333                     u8930:	
  8441  1333  0860               	movf	??_TimeToInd^(0+128),w
  8442  1334  0084               	movwf	4
  8443  1335  1783               	bsf	3,7	;select IRP bank3
  8444  1336  0800               	movf	0,w
  8445  1337  00E3               	movwf	(??_TimeToInd^(0+128)+3)
  8446  1338  0AE0               	incf	??_TimeToInd^(0+128),f
  8447  1339  0861               	movf	(??_TimeToInd^(0+128)+1),w
  8448  133A  0084               	movwf	4
  8449  133B  0863               	movf	(??_TimeToInd^(0+128)+3),w
  8450  133C  0080               	movwf	0
  8451  133D  0AE1               	incf	(??_TimeToInd^(0+128)+1),f
  8452  133E  0BE2               	decfsz	(??_TimeToInd^(0+128)+2),f
  8453  133F  2B33               	goto	u8930
  8454                           
  8455                           ;prog.c: 305: if(AdressOfNextStartCell!=240){
  8456  1340  1703               	bsf	3,6	;RP1=1, select bank3
  8457  1341  0856               	movf	_AdressOfNextStartCell^(0+384),w
  8458  1342  3AF0               	xorlw	240
  8459  1343  1903               	skipnz
  8460  1344  2C91               	goto	l11101
  8461                           
  8462                           ;prog.c: 307: if(LockSignals){
  8463  1345  1283               	bcf	3,5	;RP0=0, select bank0
  8464  1346  1303               	bcf	3,6	;RP1=0, select bank0
  8465  1347  1E5D               	btfss	_LockSignals/(0+8),_LockSignals& (0+7)
  8466  1348  2B72               	goto	l11041
  8467                           
  8468                           ;prog.c: 308: DataArray[0] = 86;
  8469  1349  3056               	movlw	86
  8470  134A  1683               	bsf	3,5	;RP0=1, select bank3
  8471  134B  1703               	bsf	3,6	;RP1=1, select bank3
  8472  134C  009E               	movwf	TimeToInd@DataArray^(0+384)
  8473                           
  8474                           ;prog.c: 309: DataArray[1] = 53;
  8475  134D  3035               	movlw	53
  8476  134E  009F               	movwf	(TimeToInd@DataArray^(0+384)+1)
  8477                           
  8478                           ;prog.c: 310: DataArray[2] = 52;
  8479  134F  3034               	movlw	52
  8480  1350  00A0               	movwf	(TimeToInd@DataArray^(0+384)+2)
  8481                           
  8482                           ;prog.c: 311: DataArray[3] = 60;
  8483  1351  303C               	movlw	60
  8484  1352  00A1               	movwf	(TimeToInd@DataArray^(0+384)+3)
  8485                           
  8486                           ;prog.c: 312: DataArray[4] = 56;
  8487  1353  3038               	movlw	56
  8488  1354  00A2               	movwf	(TimeToInd@DataArray^(0+384)+4)
  8489                           
  8490                           ;prog.c: 313: DataArray[5] = 34;
  8491  1355  3022               	movlw	34
  8492  1356  00A3               	movwf	(TimeToInd@DataArray^(0+384)+5)
  8493                           
  8494                           ;prog.c: 314: DataArray[6] = 46;
  8495  1357  302E               	movlw	46
  8496  1358  00A4               	movwf	(TimeToInd@DataArray^(0+384)+6)
  8497                           
  8498                           ;prog.c: 315: DataArray[7] = 50;
  8499  1359  3032               	movlw	50
  8500  135A  00A5               	movwf	(TimeToInd@DataArray^(0+384)+7)
  8501                           
  8502                           ;prog.c: 316: DataArray[8] = 55;
  8503  135B  3037               	movlw	55
  8504  135C  00A6               	movwf	(TimeToInd@DataArray^(0+384)+8)
  8505                           
  8506                           ;prog.c: 317: DataArray[9] = 41;
  8507  135D  3029               	movlw	41
  8508  135E  00A7               	movwf	(TimeToInd@DataArray^(0+384)+9)
  8509                           
  8510                           ;prog.c: 318: DataArray[10] = 59;
  8511  135F  303B               	movlw	59
  8512  1360  00A8               	movwf	(TimeToInd@DataArray^(0+384)+10)
  8513                           
  8514                           ;prog.c: 319: DataArray[11] = 50;
  8515  1361  3032               	movlw	50
  8516  1362  00A9               	movwf	(TimeToInd@DataArray^(0+384)+11)
  8517                           
  8518                           ;prog.c: 320: DataArray[12] = 57;
  8519  1363  3039               	movlw	57
  8520  1364  00AA               	movwf	(TimeToInd@DataArray^(0+384)+12)
  8521                           
  8522                           ;prog.c: 321: DataArray[13] = 59;
  8523  1365  303B               	movlw	59
  8524  1366  00AB               	movwf	(TimeToInd@DataArray^(0+384)+13)
  8525                           
  8526                           ;prog.c: 322: DataArray[14] = 41;
  8527  1367  3029               	movlw	41
  8528  1368  00AC               	movwf	(TimeToInd@DataArray^(0+384)+14)
  8529                           
  8530                           ;prog.c: 323: DataArray[15] = 58;
  8531  1369  303A               	movlw	58
  8532  136A  00AD               	movwf	(TimeToInd@DataArray^(0+384)+15)
  8533                           
  8534                           ;prog.c: 325: SendArrayToLCD(DataArray, 1, 1);
  8535  136B  1303               	bcf	3,6	;RP1=0, select bank1
  8536  136C  309E               	movlw	TimeToInd@DataArray& (0+255)
  8537  136D  01B8               	clrf	?_SendArrayToLCD^(0+128)
  8538  136E  0AB8               	incf	?_SendArrayToLCD^(0+128),f
  8539  136F  01B9               	clrf	(?_SendArrayToLCD^(0+128)+1)
  8540  1370  0AB9               	incf	(?_SendArrayToLCD^(0+128)+1),f
  8541  1371  2FDE               	ljmp	_SendArrayToLCD
  8542  1372                     l11041:	
  8543                           
  8544                           ;prog.c: 327: }
  8545                           ;prog.c: 328: DataArray[15] = 90;
  8546  1372  305A               	movlw	90
  8547  1373  1683               	bsf	3,5	;RP0=1, select bank3
  8548  1374  1703               	bsf	3,6	;RP1=1, select bank3
  8549  1375  00AD               	movwf	(TimeToInd@DataArray^(0+384)+15)
  8550                           
  8551                           ;prog.c: 330: char line = 1;
  8552  1376  0191               	clrf	TimeToInd@line_1291^(0+384)
  8553  1377  0A91               	incf	TimeToInd@line_1291^(0+384),f
  8554                           
  8555                           ;prog.c: 331: unsigned int TimeStart;
  8556                           ;prog.c: 332: unsigned int TimeStop;
  8557                           ;prog.c: 333: unsigned char Days;
  8558                           ;prog.c: 334: unsigned char Signals;
  8559                           ;prog.c: 335: ParseDataRecord(ReadFourBytesEE(AdressOfNextStartCell), &TimeStart, &TimeS
      +                          top, &Days, &Signals);
  8560  1378  0856               	movf	_AdressOfNextStartCell^(0+384),w
  8561  1379  120A  118A  27A3   	fcall	_ReadFourBytesEE
      +       160A  118A         
  8562  137E  0834               	movf	(?_ReadFourBytesEE+3)^(0+128),w
  8563  137F  00A6               	movwf	(?_ParseDataRecord+3)^(0+128)
  8564  1380  0833               	movf	(?_ReadFourBytesEE+2)^(0+128),w
  8565  1381  00A5               	movwf	(?_ParseDataRecord+2)^(0+128)
  8566  1382  0832               	movf	(?_ReadFourBytesEE+1)^(0+128),w
  8567  1383  00A4               	movwf	(?_ParseDataRecord+1)^(0+128)
  8568  1384  0831               	movf	?_ReadFourBytesEE^(0+128),w
  8569  1385  00A3               	movwf	?_ParseDataRecord^(0+128)
  8570  1386  3092               	movlw	TimeToInd@TimeStart& (0+255)
  8571  1387  00A7               	movwf	(?_ParseDataRecord+4)^(0+128)
  8572  1388  3001               	movlw	1
  8573  1389  00A8               	movwf	(?_ParseDataRecord+5)^(0+128)
  8574  138A  3094               	movlw	TimeToInd@TimeStop& (0+255)
  8575  138B  00A9               	movwf	(?_ParseDataRecord+6)^(0+128)
  8576  138C  3001               	movlw	1
  8577  138D  00AA               	movwf	(?_ParseDataRecord+7)^(0+128)
  8578  138E  309C               	movlw	TimeToInd@Days& (0+255)
  8579  138F  00AB               	movwf	(?_ParseDataRecord+8)^(0+128)
  8580  1390  3001               	movlw	1
  8581  1391  00AC               	movwf	(?_ParseDataRecord+9)^(0+128)
  8582  1392  30B0               	movlw	TimeToInd@Signals& (0+255)
  8583  1393  00AD               	movwf	(?_ParseDataRecord+10)^(0+128)
  8584  1394  3001               	movlw	1
  8585  1395  00AE               	movwf	(?_ParseDataRecord+11)^(0+128)
  8586  1396  120A  118A  272F   	fcall	_ParseDataRecord
      +       160A  118A         
  8587                           
  8588                           ;prog.c: 337: unsigned int Time;
  8589                           ;prog.c: 338: unsigned char Day;
  8590                           ;prog.c: 339: ParseTime(NearTimeStart, &Time, &Day);
  8591  139B  1703               	bsf	3,6	;RP1=1, select bank3
  8592  139C  0864               	movf	(_NearTimeStart+3)^(0+384),w
  8593  139D  1303               	bcf	3,6	;RP1=0, select bank1
  8594  139E  00B1               	movwf	(?_ParseTime+3)^(0+128)
  8595  139F  1703               	bsf	3,6	;RP1=1, select bank3
  8596  13A0  0863               	movf	(_NearTimeStart+2)^(0+384),w
  8597  13A1  1303               	bcf	3,6	;RP1=0, select bank1
  8598  13A2  00B0               	movwf	(?_ParseTime+2)^(0+128)
  8599  13A3  1703               	bsf	3,6	;RP1=1, select bank3
  8600  13A4  0862               	movf	(_NearTimeStart+1)^(0+384),w
  8601  13A5  1303               	bcf	3,6	;RP1=0, select bank1
  8602  13A6  00AF               	movwf	(?_ParseTime+1)^(0+128)
  8603  13A7  1703               	bsf	3,6	;RP1=1, select bank3
  8604  13A8  0861               	movf	_NearTimeStart^(0+384),w
  8605  13A9  1303               	bcf	3,6	;RP1=0, select bank1
  8606  13AA  00AE               	movwf	?_ParseTime^(0+128)
  8607  13AB  30B6               	movlw	TimeToInd@Time& (0+255)
  8608  13AC  00B2               	movwf	(?_ParseTime+4)^(0+128)
  8609  13AD  30AF               	movlw	TimeToInd@Day& (0+255)
  8610  13AE  00B3               	movwf	(?_ParseTime+5)^(0+128)
  8611  13AF  160A  158A  20E0   	fcall	_ParseTime
      +       160A  118A         
  8612                           
  8613                           ;prog.c: 341: char nSymb = 0;
  8614  13B4  1703               	bsf	3,6	;RP1=1, select bank3
  8615  13B5  3023               	movlw	35
  8616  13B6  01B5               	clrf	TimeToInd@nSymb^(0+384)
  8617                           
  8618                           ;prog.c: 342: DataArray[8-nSymb] = 35;
  8619  13B7  00A6               	movwf	(TimeToInd@DataArray^(0+384)+8)
  8620                           
  8621                           ;prog.c: 343: DataArray[6-nSymb] = Time%10;
  8622  13B8  300A               	movlw	10
  8623  13B9  1303               	bcf	3,6	;RP1=0, select bank1
  8624  13BA  00A0               	movwf	?___lwmod^(0+128)
  8625  13BB  01A1               	clrf	(?___lwmod+1)^(0+128)
  8626  13BC  1703               	bsf	3,6	;RP1=1, select bank3
  8627  13BD  0837               	movf	(TimeToInd@Time+1)^(0+384),w
  8628  13BE  1303               	bcf	3,6	;RP1=0, select bank1
  8629  13BF  00A3               	movwf	((?___lwmod+1)^(0+128)+2)
  8630  13C0  1703               	bsf	3,6	;RP1=1, select bank3
  8631  13C1  0836               	movf	TimeToInd@Time^(0+384),w
  8632  13C2  1303               	bcf	3,6	;RP1=0, select bank1
  8633  13C3  00A2               	movwf	(?___lwmod^(0+128)+2)
  8634  13C4  2790  160A  118A   	fcall	___lwmod
  8635  13C7  0820               	movf	?___lwmod^(0+128),w
  8636  13C8  1703               	bsf	3,6	;RP1=1, select bank3
  8637  13C9  00A4               	movwf	(TimeToInd@DataArray^(0+384)+6)
  8638                           
  8639                           ;prog.c: 344: Time/=10;
  8640  13CA  300A               	movlw	10
  8641  13CB  1303               	bcf	3,6	;RP1=0, select bank1
  8642  13CC  00A0               	movwf	?___lwdiv^(0+128)
  8643  13CD  01A1               	clrf	(?___lwdiv+1)^(0+128)
  8644  13CE  1703               	bsf	3,6	;RP1=1, select bank3
  8645  13CF  0837               	movf	(TimeToInd@Time+1)^(0+384),w
  8646  13D0  1303               	bcf	3,6	;RP1=0, select bank1
  8647  13D1  00A3               	movwf	((?___lwdiv+1)^(0+128)+2)
  8648  13D2  1703               	bsf	3,6	;RP1=1, select bank3
  8649  13D3  0836               	movf	TimeToInd@Time^(0+384),w
  8650  13D4  1303               	bcf	3,6	;RP1=0, select bank1
  8651  13D5  00A2               	movwf	(?___lwdiv^(0+128)+2)
  8652  13D6  27B4  160A  118A   	fcall	___lwdiv
  8653  13D9  0821               	movf	(?___lwdiv+1)^(0+128),w
  8654  13DA  1703               	bsf	3,6	;RP1=1, select bank3
  8655  13DB  00B7               	movwf	(TimeToInd@Time+1)^(0+384)
  8656  13DC  1303               	bcf	3,6	;RP1=0, select bank1
  8657  13DD  0820               	movf	?___lwdiv^(0+128),w
  8658  13DE  1703               	bsf	3,6	;RP1=1, select bank3
  8659  13DF  00B6               	movwf	TimeToInd@Time^(0+384)
  8660                           
  8661                           ;prog.c: 345: DataArray[7-nSymb] = Time%6;
  8662  13E0  3006               	movlw	6
  8663  13E1  1303               	bcf	3,6	;RP1=0, select bank1
  8664  13E2  00A0               	movwf	?___lwmod^(0+128)
  8665  13E3  01A1               	clrf	(?___lwmod+1)^(0+128)
  8666  13E4  1703               	bsf	3,6	;RP1=1, select bank3
  8667  13E5  0837               	movf	(TimeToInd@Time+1)^(0+384),w
  8668  13E6  1303               	bcf	3,6	;RP1=0, select bank1
  8669  13E7  00A3               	movwf	((?___lwmod+1)^(0+128)+2)
  8670  13E8  1703               	bsf	3,6	;RP1=1, select bank3
  8671  13E9  0836               	movf	TimeToInd@Time^(0+384),w
  8672  13EA  1303               	bcf	3,6	;RP1=0, select bank1
  8673  13EB  00A2               	movwf	(?___lwmod^(0+128)+2)
  8674  13EC  2790  160A  118A   	fcall	___lwmod
  8675  13EF  0820               	movf	?___lwmod^(0+128),w
  8676  13F0  1703               	bsf	3,6	;RP1=1, select bank3
  8677  13F1  00A5               	movwf	(TimeToInd@DataArray^(0+384)+7)
  8678                           
  8679                           ;prog.c: 346: Time/=6;
  8680  13F2  3006               	movlw	6
  8681  13F3  1303               	bcf	3,6	;RP1=0, select bank1
  8682  13F4  00A0               	movwf	?___lwdiv^(0+128)
  8683  13F5  01A1               	clrf	(?___lwdiv+1)^(0+128)
  8684  13F6  1703               	bsf	3,6	;RP1=1, select bank3
  8685  13F7  0837               	movf	(TimeToInd@Time+1)^(0+384),w
  8686  13F8  1303               	bcf	3,6	;RP1=0, select bank1
  8687  13F9  00A3               	movwf	((?___lwdiv+1)^(0+128)+2)
  8688  13FA  1703               	bsf	3,6	;RP1=1, select bank3
  8689  13FB  0836               	movf	TimeToInd@Time^(0+384),w
  8690  13FC  1303               	bcf	3,6	;RP1=0, select bank1
  8691  13FD  00A2               	movwf	(?___lwdiv^(0+128)+2)
  8692  13FE  27B4  160A  118A   	fcall	___lwdiv
  8693  1401  0821               	movf	(?___lwdiv+1)^(0+128),w
  8694  1402  1703               	bsf	3,6	;RP1=1, select bank3
  8695  1403  00B7               	movwf	(TimeToInd@Time+1)^(0+384)
  8696  1404  1303               	bcf	3,6	;RP1=0, select bank1
  8697  1405  0820               	movf	?___lwdiv^(0+128),w
  8698  1406  1703               	bsf	3,6	;RP1=1, select bank3
  8699  1407  00B6               	movwf	TimeToInd@Time^(0+384)
  8700                           
  8701                           ;prog.c: 347: DataArray[9-nSymb] = Time%10;
  8702  1408  300A               	movlw	10
  8703  1409  1303               	bcf	3,6	;RP1=0, select bank1
  8704  140A  00A0               	movwf	?___lwmod^(0+128)
  8705  140B  01A1               	clrf	(?___lwmod+1)^(0+128)
  8706  140C  1703               	bsf	3,6	;RP1=1, select bank3
  8707  140D  0837               	movf	(TimeToInd@Time+1)^(0+384),w
  8708  140E  1303               	bcf	3,6	;RP1=0, select bank1
  8709  140F  00A3               	movwf	((?___lwmod+1)^(0+128)+2)
  8710  1410  1703               	bsf	3,6	;RP1=1, select bank3
  8711  1411  0836               	movf	TimeToInd@Time^(0+384),w
  8712  1412  1303               	bcf	3,6	;RP1=0, select bank1
  8713  1413  00A2               	movwf	(?___lwmod^(0+128)+2)
  8714  1414  2790  160A  118A   	fcall	___lwmod
  8715  1417  0820               	movf	?___lwmod^(0+128),w
  8716  1418  1703               	bsf	3,6	;RP1=1, select bank3
  8717  1419  00A7               	movwf	(TimeToInd@DataArray^(0+384)+9)
  8718                           
  8719                           ;prog.c: 348: Time/=10;
  8720  141A  300A               	movlw	10
  8721  141B  1303               	bcf	3,6	;RP1=0, select bank1
  8722  141C  00A0               	movwf	?___lwdiv^(0+128)
  8723  141D  01A1               	clrf	(?___lwdiv+1)^(0+128)
  8724  141E  1703               	bsf	3,6	;RP1=1, select bank3
  8725  141F  0837               	movf	(TimeToInd@Time+1)^(0+384),w
  8726  1420  1303               	bcf	3,6	;RP1=0, select bank1
  8727  1421  00A3               	movwf	((?___lwdiv+1)^(0+128)+2)
  8728  1422  1703               	bsf	3,6	;RP1=1, select bank3
  8729  1423  0836               	movf	TimeToInd@Time^(0+384),w
  8730  1424  1303               	bcf	3,6	;RP1=0, select bank1
  8731  1425  00A2               	movwf	(?___lwdiv^(0+128)+2)
  8732  1426  27B4  160A  118A   	fcall	___lwdiv
  8733  1429  0821               	movf	(?___lwdiv+1)^(0+128),w
  8734  142A  1703               	bsf	3,6	;RP1=1, select bank3
  8735  142B  00B7               	movwf	(TimeToInd@Time+1)^(0+384)
  8736  142C  1303               	bcf	3,6	;RP1=0, select bank1
  8737  142D  0820               	movf	?___lwdiv^(0+128),w
  8738  142E  1703               	bsf	3,6	;RP1=1, select bank3
  8739  142F  00B6               	movwf	TimeToInd@Time^(0+384)
  8740                           
  8741                           ;prog.c: 349: DataArray[10-nSymb] = Time%10;
  8742  1430  300A               	movlw	10
  8743  1431  1303               	bcf	3,6	;RP1=0, select bank1
  8744  1432  00A0               	movwf	?___lwmod^(0+128)
  8745  1433  01A1               	clrf	(?___lwmod+1)^(0+128)
  8746  1434  1703               	bsf	3,6	;RP1=1, select bank3
  8747  1435  0837               	movf	(TimeToInd@Time+1)^(0+384),w
  8748  1436  1303               	bcf	3,6	;RP1=0, select bank1
  8749  1437  00A3               	movwf	((?___lwmod+1)^(0+128)+2)
  8750  1438  1703               	bsf	3,6	;RP1=1, select bank3
  8751  1439  0836               	movf	TimeToInd@Time^(0+384),w
  8752  143A  1303               	bcf	3,6	;RP1=0, select bank1
  8753  143B  00A2               	movwf	(?___lwmod^(0+128)+2)
  8754  143C  2790  160A  118A   	fcall	___lwmod
  8755  143F  0820               	movf	?___lwmod^(0+128),w
  8756  1440  1703               	bsf	3,6	;RP1=1, select bank3
  8757  1441  00A8               	movwf	(TimeToInd@DataArray^(0+384)+10)
  8758                           
  8759                           ;prog.c: 351: for(unsigned char i = 1; i<4; i++){
  8760  1442  01B2               	clrf	TimeToInd@i_1299^(0+384)
  8761  1443  0AB2               	incf	TimeToInd@i_1299^(0+384),f
  8762  1444                     l11073:	
  8763                           
  8764                           ;prog.c: 352: unsigned char SignalOn = Signals%2;
  8765  1444  0830               	movf	TimeToInd@Signals^(0+384),w
  8766  1445  009B               	movwf	TimeToInd@SignalOn_1300^(0+384)
  8767  1446  3001               	movlw	1
  8768  1447  059B               	andwf	TimeToInd@SignalOn_1300^(0+384),f
  8769                           
  8770                           ;prog.c: 353: Signals/=2;
  8771  1448  1003               	clrc
  8772  1449  0CB0               	rrf	TimeToInd@Signals^(0+384),f
  8773                           
  8774                           ;prog.c: 354: if(SignalOn==1){
  8775  144A  0B1B               	decfsz	TimeToInd@SignalOn_1300^(0+384),w
  8776  144B  2C75               	goto	l11089
  8777                           
  8778                           ;prog.c: 355: char j = nSymb/2;
  8779  144C  1003               	clrc
  8780  144D  0C35               	rrf	TimeToInd@nSymb^(0+384),w
  8781  144E  00B4               	movwf	TimeToInd@j^(0+384)
  8782                           
  8783                           ;prog.c: 356: DataArray[3-j] = DataArray[2-j];
  8784  144F  3C02               	sublw	2
  8785  1450  3E9E               	addlw	TimeToInd@DataArray& (0+255)
  8786  1451  0084               	movwf	4
  8787  1452  1783               	bsf	3,7	;select IRP bank3
  8788  1453  0800               	movf	0,w
  8789  1454  1303               	bcf	3,6	;RP1=0, select bank1
  8790  1455  00E0               	movwf	??_TimeToInd^(0+128)
  8791  1456  1703               	bsf	3,6	;RP1=1, select bank3
  8792  1457  0834               	movf	TimeToInd@j^(0+384),w
  8793  1458  3C03               	sublw	3
  8794  1459  3E9E               	addlw	TimeToInd@DataArray& (0+255)
  8795  145A  0084               	movwf	4
  8796  145B  1303               	bcf	3,6	;RP1=0, select bank1
  8797  145C  0860               	movf	??_TimeToInd^(0+128),w
  8798  145D  0080               	movwf	0
  8799                           
  8800                           ;prog.c: 357: DataArray[2-j] = DataArray[1-j];
  8801  145E  1703               	bsf	3,6	;RP1=1, select bank3
  8802  145F  0834               	movf	TimeToInd@j^(0+384),w
  8803  1460  3C01               	sublw	1
  8804  1461  3E9E               	addlw	TimeToInd@DataArray& (0+255)
  8805  1462  0084               	movwf	4
  8806  1463  0800               	movf	0,w
  8807  1464  1303               	bcf	3,6	;RP1=0, select bank1
  8808  1465  00E0               	movwf	??_TimeToInd^(0+128)
  8809  1466  1703               	bsf	3,6	;RP1=1, select bank3
  8810  1467  0834               	movf	TimeToInd@j^(0+384),w
  8811  1468  3C02               	sublw	2
  8812  1469  3E9E               	addlw	TimeToInd@DataArray& (0+255)
  8813  146A  0084               	movwf	4
  8814  146B  1303               	bcf	3,6	;RP1=0, select bank1
  8815  146C  0860               	movf	??_TimeToInd^(0+128),w
  8816  146D  0080               	movwf	0
  8817                           
  8818                           ;prog.c: 358: DataArray[1-j] = i;
  8819  146E  1703               	bsf	3,6	;RP1=1, select bank3
  8820  146F  0834               	movf	TimeToInd@j^(0+384),w
  8821  1470  3C01               	sublw	1
  8822  1471  3E9E               	addlw	TimeToInd@DataArray& (0+255)
  8823  1472  0084               	movwf	4
  8824  1473  0832               	movf	TimeToInd@i_1299^(0+384),w
  8825  1474  0080               	movwf	0
  8826  1475                     l11089:	
  8827  1475  3004               	movlw	4
  8828  1476  0AB2               	incf	TimeToInd@i_1299^(0+384),f
  8829  1477  0232               	subwf	TimeToInd@i_1299^(0+384),w
  8830  1478  1C03               	skipc
  8831  1479  2C44               	goto	l11073
  8832                           
  8833                           ;prog.c: 359: }
  8834                           ;prog.c: 360: }
  8835                           ;prog.c: 361: unsigned char *DataArray2 = GetDayOfWeek(Day);
  8836  147A  082F               	movf	TimeToInd@Day^(0+384),w
  8837  147B  160A  158A  20A2   	fcall	_GetDayOfWeek
      +       160A  118A         
  8838  1480  009D               	movwf	TimeToInd@DataArray2^(0+384)
  8839                           
  8840                           ;prog.c: 362: DataArray[12] = DataArray2[0];
  8841  1481  0084               	movwf	4
  8842  1482  1783               	bsf	3,7	;select IRP bank2
  8843  1483  0800               	movf	0,w
  8844  1484  00AA               	movwf	(TimeToInd@DataArray^(0+384)+12)
  8845                           
  8846                           ;prog.c: 363: DataArray[13] = DataArray2[1];
  8847  1485  081D               	movf	TimeToInd@DataArray2^(0+384),w
  8848  1486  3E01               	addlw	1
  8849  1487  0084               	movwf	4
  8850  1488  0800               	movf	0,w
  8851  1489  00AB               	movwf	(TimeToInd@DataArray^(0+384)+13)
  8852                           
  8853                           ;prog.c: 365: SendArrayToLCD(DataArray, line, 1);
  8854  148A  0811               	movf	TimeToInd@line_1291^(0+384),w
  8855  148B  1303               	bcf	3,6	;RP1=0, select bank1
  8856  148C  00B8               	movwf	?_SendArrayToLCD^(0+128)
  8857  148D  309E               	movlw	TimeToInd@DataArray& (0+255)
  8858  148E  01B9               	clrf	(?_SendArrayToLCD^(0+128)+1)
  8859  148F  0AB9               	incf	(?_SendArrayToLCD^(0+128)+1),f
  8860  1490  2FDE               	ljmp	_SendArrayToLCD
  8861  1491                     l11101:	
  8862                           ;prog.c: 387: }else{
  8863                           
  8864                           
  8865                           ;prog.c: 388: SendArrayToLCD(DataArray, 1, 1);
  8866  1491  1303               	bcf	3,6	;RP1=0, select bank1
  8867  1492  309E               	movlw	TimeToInd@DataArray& (0+255)
  8868  1493  01B8               	clrf	?_SendArrayToLCD^(0+128)
  8869  1494  0AB8               	incf	?_SendArrayToLCD^(0+128),f
  8870  1495  01B9               	clrf	(?_SendArrayToLCD^(0+128)+1)
  8871  1496  0AB9               	incf	(?_SendArrayToLCD^(0+128)+1),f
  8872  1497  2FDE               	ljmp	_SendArrayToLCD
  8873  1498                     __end_of_TimeToInd:	
  8874  1498                     __ptext2251:	
  8875 ;; =============== function _EditSchedule ends ============
  8876                           
  8877                           
  8878 ;; *************** function _RefreshSchedulerIndicator *****************
  8879 ;; Defined at:
  8880 ;;		line 782 in file "prog.c"
  8881 ;; Parameters:    Size  Location     Type
  8882 ;;  adress          1    wreg     unsigned char 
  8883 ;;  New             1   29[BANK1 ] unsigned char 
  8884 ;;  CopyFrom        1   30[BANK1 ] unsigned char 
  8885 ;; Auto vars:     Size  Location     Type
  8886 ;;  adress          1   34[BANK1 ] unsigned char 
  8887 ;; Return value:  Size  Location     Type
  8888 ;;                  1    wreg      unsigned char 
  8889 ;; Registers used:
  8890 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8891 ;; Tracked objects:
  8892 ;;		On entry : 60/160
  8893 ;;		On exit  : 160/120
  8894 ;;		Unchanged: FFE00/0
  8895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8896 ;;      Params:         0       0       2       0       0
  8897 ;;      Locals:         0       0       3       0       0
  8898 ;;      Temps:          0       0       1       0       0
  8899 ;;      Totals:         0       0       6       0       0
  8900 ;;Total ram usage:        6 bytes
  8901 ;; Hardware stack levels used:    1
  8902 ;; Hardware stack levels required when called:    6
  8903 ;; This function calls:
  8904 ;;		_EERD
  8905 ;;		_NumericToIndicator
  8906 ;;		_FindCell
  8907 ;;		_setDigit
  8908 ;; This function is called by:
  8909 ;;		_Scheduler
  8910 ;; This function uses a non-reentrant model
  8911 ;;
  8912  1498                     _RefreshSchedulerIndicator:	
  8913                           
  8914 ;; hardware stack exceeded
  8915                           ; Regs used in _RefreshSchedulerIndicator: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8916                           ;RefreshSchedulerIndicator@adress stored from wreg
  8917  1498  1303               	bcf	3,6	;RP1=0, select bank1
  8918  1499  00C2               	movwf	RefreshSchedulerIndicator@adress^(0+128)
  8919                           
  8920                           ;prog.c: 783: if(adress!=240 && (New!=1 ? EERD(adress+2)!=0xFF : EERD(adress+2)==0xFF)){
  8921  149A  3AF0               	xorlw	240
  8922  149B  1903               	skipnz
  8923  149C  2CD8               	goto	l10689
  8924  149D  0B3D               	decfsz	RefreshSchedulerIndicator@New^(0+128),w
  8925  149E  2CAD               	goto	l10683
  8926  149F  0842               	movf	RefreshSchedulerIndicator@adress^(0+128),w
  8927  14A0  3E02               	addlw	2
  8928  14A1  120A  118A  27E5   	fcall	_EERD
      +       160A  118A         
  8929  14A6  3AFF               	xorlw	255
  8930  14A7  3000               	movlw	0
  8931  14A8  1903               	skipnz
  8932  14A9  3001               	movlw	1
  8933  14AA  00C0               	movwf	_RefreshSchedulerIndicator$1370^(0+128)
  8934  14AB  01C1               	clrf	(_RefreshSchedulerIndicator$1370+1)^(0+128)
  8935  14AC  2CBA               	goto	l10685
  8936  14AD                     l10683:	
  8937  14AD  0842               	movf	RefreshSchedulerIndicator@adress^(0+128),w
  8938  14AE  3E02               	addlw	2
  8939  14AF  120A  118A  27E5   	fcall	_EERD
      +       160A  118A         
  8940  14B4  3AFF               	xorlw	255
  8941  14B5  3000               	movlw	0
  8942  14B6  1D03               	skipz
  8943  14B7  3001               	movlw	1
  8944  14B8  00C0               	movwf	_RefreshSchedulerIndicator$1370^(0+128)
  8945  14B9  01C1               	clrf	(_RefreshSchedulerIndicator$1370+1)^(0+128)
  8946  14BA                     l10685:	
  8947  14BA  0841               	movf	(_RefreshSchedulerIndicator$1370+1)^(0+128),w
  8948  14BB  0440               	iorwf	_RefreshSchedulerIndicator$1370^(0+128),w
  8949  14BC  1903               	skipnz
  8950  14BD  2CD8               	goto	l10689
  8951  14BE                     l10687:	
  8952                           
  8953                           ;prog.c: 784: NumericToIndicator(adress/4+1,1);
  8954  14BE  0842               	movf	RefreshSchedulerIndicator@adress^(0+128),w
  8955  14BF  00BF               	movwf	??_RefreshSchedulerIndicator^(0+128)
  8956  14C0  1003               	clrc
  8957  14C1  0CBF               	rrf	??_RefreshSchedulerIndicator^(0+128),f
  8958  14C2  1003               	clrc
  8959  14C3  0CBF               	rrf	??_RefreshSchedulerIndicator^(0+128),f
  8960  14C4  083F               	movf	??_RefreshSchedulerIndicator^(0+128),w
  8961  14C5  3E01               	addlw	1
  8962  14C6  00B8               	movwf	?_NumericToIndicator^(0+128)
  8963  14C7  3000               	movlw	0
  8964  14C8  1803               	skipnc
  8965  14C9  3001               	movlw	1
  8966  14CA  00B9               	movwf	(?_NumericToIndicator^(0+128)+1)
  8967  14CB  01BA               	clrf	(?_NumericToIndicator^(0+128)+2)
  8968  14CC  1BB9               	btfsc	(?_NumericToIndicator^(0+128)+1),7
  8969  14CD  03BA               	decf	(?_NumericToIndicator+2)^(0+128),f
  8970  14CE  083A               	movf	(?_NumericToIndicator^(0+128)+2),w
  8971  14CF  00BB               	movwf	(?_NumericToIndicator+3)^(0+128)
  8972  14D0  01BC               	clrf	(?_NumericToIndicator^(0+128)+4)
  8973  14D1  0ABC               	incf	(?_NumericToIndicator^(0+128)+4),f
  8974  14D2  160A  158A  2254   	fcall	_NumericToIndicator
      +       160A  118A         
  8975                           
  8976                           ;prog.c: 785: }else{
  8977  14D7  2CF5               	goto	l10697
  8978  14D8                     l10689:	
  8979                           
  8980                           ;prog.c: 786: adress = FindCell(adress, New, 0);
  8981  14D8  083D               	movf	RefreshSchedulerIndicator@New^(0+128),w
  8982  14D9  00A3               	movwf	?_FindCell^(0+128)
  8983  14DA  01A4               	clrf	(?_FindCell^(0+128)+1)
  8984  14DB  0842               	movf	RefreshSchedulerIndicator@adress^(0+128),w
  8985  14DC  160A  158A  21A6   	fcall	_FindCell
      +       160A  118A         
  8986  14E1  00C2               	movwf	RefreshSchedulerIndicator@adress^(0+128)
  8987                           
  8988                           ;prog.c: 787: if(adress!=240){
  8989  14E2  3AF0               	xorlw	240
  8990  14E3  1D03               	btfss	3,2
  8991  14E4  2CBE               	goto	l10687
  8992                           
  8993                           ;prog.c: 790: setDigit(0,3,32);
  8994  14E5  3003               	movlw	3
  8995  14E6  00AE               	movwf	?_setDigit^(0+128)
  8996  14E7  3020               	movlw	32
  8997  14E8  00AF               	movwf	(?_setDigit^(0+128)+1)
  8998  14E9  3000               	movlw	0
  8999  14EA  265C  160A  118A   	fcall	_setDigit
  9000                           
  9001                           ;prog.c: 791: setDigit(0,2,32);
  9002  14ED  3002               	movlw	2
  9003  14EE  00AE               	movwf	?_setDigit^(0+128)
  9004  14EF  3020               	movlw	32
  9005  14F0  00AF               	movwf	(?_setDigit^(0+128)+1)
  9006  14F1  3000               	movlw	0
  9007  14F2  265C  160A  118A   	fcall	_setDigit
  9008  14F5                     l10697:	
  9009                           
  9010                           ;prog.c: 792: }
  9011                           ;prog.c: 793: }
  9012                           ;prog.c: 794: if(New==1){
  9013  14F5  033D               	decf	RefreshSchedulerIndicator@New^(0+128),w
  9014  14F6  1D03               	skipz
  9015  14F7  2D10               	goto	l1091
  9016                           
  9017                           ;prog.c: 816: setDigit(0,12,21);
  9018  14F8  300C               	movlw	12
  9019  14F9  00AE               	movwf	?_setDigit^(0+128)
  9020  14FA  3015               	movlw	21
  9021  14FB  00AF               	movwf	(?_setDigit^(0+128)+1)
  9022  14FC  3000               	movlw	0
  9023  14FD  265C  160A  118A   	fcall	_setDigit
  9024                           
  9025                           ;prog.c: 817: setDigit(0,11,14);
  9026  1500  300B               	movlw	11
  9027  1501  00AE               	movwf	?_setDigit^(0+128)
  9028  1502  300E               	movlw	14
  9029  1503  00AF               	movwf	(?_setDigit^(0+128)+1)
  9030  1504  3000               	movlw	0
  9031  1505  265C  160A  118A   	fcall	_setDigit
  9032                           
  9033                           ;prog.c: 818: setDigit(0,10,36);
  9034  1508  300A               	movlw	10
  9035  1509  00AE               	movwf	?_setDigit^(0+128)
  9036  150A  3024               	movlw	36
  9037  150B  00AF               	movwf	(?_setDigit^(0+128)+1)
  9038  150C  3000               	movlw	0
  9039  150D  265C  160A  118A   	fcall	_setDigit
  9040  1510                     l1091:	
  9041                           
  9042                           ;prog.c: 819: }
  9043                           ;prog.c: 820: setDigit(0,8,12);
  9044  1510  3008               	movlw	8
  9045  1511  00AE               	movwf	?_setDigit^(0+128)
  9046  1512  300C               	movlw	12
  9047  1513  00AF               	movwf	(?_setDigit^(0+128)+1)
  9048  1514  3000               	movlw	0
  9049  1515  265C  160A  118A   	fcall	_setDigit
  9050                           
  9051                           ;prog.c: 821: setDigit(0,7,14);
  9052  1518  3007               	movlw	7
  9053  1519  00AE               	movwf	?_setDigit^(0+128)
  9054  151A  300E               	movlw	14
  9055  151B  00AF               	movwf	(?_setDigit^(0+128)+1)
  9056  151C  3000               	movlw	0
  9057  151D  265C  160A  118A   	fcall	_setDigit
  9058                           
  9059                           ;prog.c: 822: setDigit(0,6,20);
  9060  1520  3006               	movlw	6
  9061  1521  00AE               	movwf	?_setDigit^(0+128)
  9062  1522  3014               	movlw	20
  9063  1523  00AF               	movwf	(?_setDigit^(0+128)+1)
  9064  1524  3000               	movlw	0
  9065  1525  265C  160A  118A   	fcall	_setDigit
  9066                           
  9067                           ;prog.c: 823: setDigit(0,5,20);
  9068  1528  3005               	movlw	5
  9069  1529  00AE               	movwf	?_setDigit^(0+128)
  9070  152A  3014               	movlw	20
  9071  152B  00AF               	movwf	(?_setDigit^(0+128)+1)
  9072  152C  3000               	movlw	0
  9073  152D  265C               	fcall	_setDigit
  9074                           
  9075                           ;prog.c: 824: return adress;
  9076  152E  0842               	movf	RefreshSchedulerIndicator@adress^(0+128),w
  9077  152F  0008               	return
  9078  1530                     __end_of_RefreshSchedulerIndicator:	
  9079  1530                     __ptext2263:	
  9080 ;; =============== function _WriteTime ends ============
  9081                           
  9082                           
  9083 ;; *************** function _ReIndTimeEdit *****************
  9084 ;; Defined at:
  9085 ;;		line 418 in file "prog.c"
  9086 ;; Parameters:    Size  Location     Type
  9087 ;;  n               4   24[BANK1 ] long 
  9088 ;; Auto vars:     Size  Location     Type
  9089 ;;  temp            4   28[BANK1 ] long 
  9090 ;; Return value:  Size  Location     Type
  9091 ;;		None               void
  9092 ;; Registers used:
  9093 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9094 ;; Tracked objects:
  9095 ;;		On entry : 160/120
  9096 ;;		On exit  : 160/120
  9097 ;;		Unchanged: FFE9F/0
  9098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9099 ;;      Params:         0       0       4       0       0
  9100 ;;      Locals:         0       0       4       0       0
  9101 ;;      Temps:          0       0       0       0       0
  9102 ;;      Totals:         0       0       8       0       0
  9103 ;;Total ram usage:        8 bytes
  9104 ;; Hardware stack levels used:    1
  9105 ;; Hardware stack levels required when called:    5
  9106 ;; This function calls:
  9107 ;;		___almod
  9108 ;;		_setDigit
  9109 ;;		___aldiv
  9110 ;; This function is called by:
  9111 ;;		_TimeEdit
  9112 ;; This function uses a non-reentrant model
  9113 ;;
  9114  1530                     _ReIndTimeEdit:	
  9115                           
  9116                           ;prog.c: 419: long int temp = n;
  9117                           
  9118                           ; Regs used in _ReIndTimeEdit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9119  1530  083B               	movf	(ReIndTimeEdit@n+3)^(0+128),w
  9120  1531  00BF               	movwf	(ReIndTimeEdit@temp+3)^(0+128)
  9121  1532  083A               	movf	(ReIndTimeEdit@n+2)^(0+128),w
  9122  1533  00BE               	movwf	(ReIndTimeEdit@temp+2)^(0+128)
  9123  1534  0839               	movf	(ReIndTimeEdit@n+1)^(0+128),w
  9124  1535  00BD               	movwf	(ReIndTimeEdit@temp+1)^(0+128)
  9125  1536  0838               	movf	ReIndTimeEdit@n^(0+128),w
  9126  1537  00BC               	movwf	ReIndTimeEdit@temp^(0+128)
  9127                           
  9128                           ;prog.c: 420: setDigit(0, 2, temp%10);
  9129  1538  3002               	movlw	2
  9130  1539  00AE               	movwf	?_setDigit^(0+128)
  9131  153A  300A               	movlw	10
  9132  153B  00A0               	movwf	?___almod^(0+128)
  9133  153C  01A1               	clrf	(?___almod+1)^(0+128)
  9134  153D  01A2               	clrf	(?___almod+2)^(0+128)
  9135  153E  01A3               	clrf	(?___almod+3)^(0+128)
  9136  153F  083F               	movf	(ReIndTimeEdit@temp+3)^(0+128),w
  9137  1540  00A7               	movwf	((?___almod+3)^(0+128)+4)
  9138  1541  083E               	movf	(ReIndTimeEdit@temp+2)^(0+128),w
  9139  1542  00A6               	movwf	((?___almod+2)^(0+128)+4)
  9140  1543  083D               	movf	(ReIndTimeEdit@temp+1)^(0+128),w
  9141  1544  00A5               	movwf	((?___almod+1)^(0+128)+4)
  9142  1545  083C               	movf	ReIndTimeEdit@temp^(0+128),w
  9143  1546  00A4               	movwf	(?___almod^(0+128)+4)
  9144  1547  2727  160A  118A   	fcall	___almod
  9145  154A  0820               	movf	?___almod^(0+128),w
  9146  154B  00AF               	movwf	(?_setDigit^(0+128)+1)
  9147  154C  3000               	movlw	0
  9148  154D  265C  160A  118A   	fcall	_setDigit
  9149                           
  9150                           ;prog.c: 421: temp /= 10;
  9151  1550  300A               	movlw	10
  9152  1551  00A0               	movwf	?___aldiv^(0+128)
  9153  1552  01A1               	clrf	(?___aldiv+1)^(0+128)
  9154  1553  01A2               	clrf	(?___aldiv+2)^(0+128)
  9155  1554  01A3               	clrf	(?___aldiv+3)^(0+128)
  9156  1555  083F               	movf	(ReIndTimeEdit@temp+3)^(0+128),w
  9157  1556  00A7               	movwf	((?___aldiv+3)^(0+128)+4)
  9158  1557  083E               	movf	(ReIndTimeEdit@temp+2)^(0+128),w
  9159  1558  00A6               	movwf	((?___aldiv+2)^(0+128)+4)
  9160  1559  083D               	movf	(ReIndTimeEdit@temp+1)^(0+128),w
  9161  155A  00A5               	movwf	((?___aldiv+1)^(0+128)+4)
  9162  155B  083C               	movf	ReIndTimeEdit@temp^(0+128),w
  9163  155C  00A4               	movwf	(?___aldiv^(0+128)+4)
  9164  155D  26B2  160A  118A   	fcall	___aldiv
  9165  1560  0823               	movf	(?___aldiv+3)^(0+128),w
  9166  1561  00BF               	movwf	(ReIndTimeEdit@temp+3)^(0+128)
  9167  1562  0822               	movf	(?___aldiv+2)^(0+128),w
  9168  1563  00BE               	movwf	(ReIndTimeEdit@temp+2)^(0+128)
  9169  1564  0821               	movf	(?___aldiv+1)^(0+128),w
  9170  1565  00BD               	movwf	(ReIndTimeEdit@temp+1)^(0+128)
  9171  1566  0820               	movf	?___aldiv^(0+128),w
  9172  1567  00BC               	movwf	ReIndTimeEdit@temp^(0+128)
  9173                           
  9174                           ;prog.c: 422: setDigit(0, 3, temp%6);
  9175  1568  3003               	movlw	3
  9176  1569  00AE               	movwf	?_setDigit^(0+128)
  9177  156A  3006               	movlw	6
  9178  156B  00A0               	movwf	?___almod^(0+128)
  9179  156C  01A1               	clrf	(?___almod+1)^(0+128)
  9180  156D  01A2               	clrf	(?___almod+2)^(0+128)
  9181  156E  01A3               	clrf	(?___almod+3)^(0+128)
  9182  156F  083F               	movf	(ReIndTimeEdit@temp+3)^(0+128),w
  9183  1570  00A7               	movwf	((?___almod+3)^(0+128)+4)
  9184  1571  083E               	movf	(ReIndTimeEdit@temp+2)^(0+128),w
  9185  1572  00A6               	movwf	((?___almod+2)^(0+128)+4)
  9186  1573  083D               	movf	(ReIndTimeEdit@temp+1)^(0+128),w
  9187  1574  00A5               	movwf	((?___almod+1)^(0+128)+4)
  9188  1575  083C               	movf	ReIndTimeEdit@temp^(0+128),w
  9189  1576  00A4               	movwf	(?___almod^(0+128)+4)
  9190  1577  2727  160A  118A   	fcall	___almod
  9191  157A  0820               	movf	?___almod^(0+128),w
  9192  157B  00AF               	movwf	(?_setDigit^(0+128)+1)
  9193  157C  3000               	movlw	0
  9194  157D  265C  160A  118A   	fcall	_setDigit
  9195                           
  9196                           ;prog.c: 423: temp /= 6;
  9197  1580  3006               	movlw	6
  9198  1581  00A0               	movwf	?___aldiv^(0+128)
  9199  1582  01A1               	clrf	(?___aldiv+1)^(0+128)
  9200  1583  01A2               	clrf	(?___aldiv+2)^(0+128)
  9201  1584  01A3               	clrf	(?___aldiv+3)^(0+128)
  9202  1585  083F               	movf	(ReIndTimeEdit@temp+3)^(0+128),w
  9203  1586  00A7               	movwf	((?___aldiv+3)^(0+128)+4)
  9204  1587  083E               	movf	(ReIndTimeEdit@temp+2)^(0+128),w
  9205  1588  00A6               	movwf	((?___aldiv+2)^(0+128)+4)
  9206  1589  083D               	movf	(ReIndTimeEdit@temp+1)^(0+128),w
  9207  158A  00A5               	movwf	((?___aldiv+1)^(0+128)+4)
  9208  158B  083C               	movf	ReIndTimeEdit@temp^(0+128),w
  9209  158C  00A4               	movwf	(?___aldiv^(0+128)+4)
  9210  158D  26B2  160A  118A   	fcall	___aldiv
  9211  1590  0823               	movf	(?___aldiv+3)^(0+128),w
  9212  1591  00BF               	movwf	(ReIndTimeEdit@temp+3)^(0+128)
  9213  1592  0822               	movf	(?___aldiv+2)^(0+128),w
  9214  1593  00BE               	movwf	(ReIndTimeEdit@temp+2)^(0+128)
  9215  1594  0821               	movf	(?___aldiv+1)^(0+128),w
  9216  1595  00BD               	movwf	(ReIndTimeEdit@temp+1)^(0+128)
  9217  1596  0820               	movf	?___aldiv^(0+128),w
  9218  1597  00BC               	movwf	ReIndTimeEdit@temp^(0+128)
  9219                           
  9220                           ;prog.c: 424: temp %= 24;
  9221  1598  3018               	movlw	24
  9222  1599  00A0               	movwf	?___almod^(0+128)
  9223  159A  01A1               	clrf	(?___almod+1)^(0+128)
  9224  159B  01A2               	clrf	(?___almod+2)^(0+128)
  9225  159C  01A3               	clrf	(?___almod+3)^(0+128)
  9226  159D  083F               	movf	(ReIndTimeEdit@temp+3)^(0+128),w
  9227  159E  00A7               	movwf	((?___almod+3)^(0+128)+4)
  9228  159F  083E               	movf	(ReIndTimeEdit@temp+2)^(0+128),w
  9229  15A0  00A6               	movwf	((?___almod+2)^(0+128)+4)
  9230  15A1  083D               	movf	(ReIndTimeEdit@temp+1)^(0+128),w
  9231  15A2  00A5               	movwf	((?___almod+1)^(0+128)+4)
  9232  15A3  083C               	movf	ReIndTimeEdit@temp^(0+128),w
  9233  15A4  00A4               	movwf	(?___almod^(0+128)+4)
  9234  15A5  2727  160A  118A   	fcall	___almod
  9235  15A8  0823               	movf	(?___almod+3)^(0+128),w
  9236  15A9  00BF               	movwf	(ReIndTimeEdit@temp+3)^(0+128)
  9237  15AA  0822               	movf	(?___almod+2)^(0+128),w
  9238  15AB  00BE               	movwf	(ReIndTimeEdit@temp+2)^(0+128)
  9239  15AC  0821               	movf	(?___almod+1)^(0+128),w
  9240  15AD  00BD               	movwf	(ReIndTimeEdit@temp+1)^(0+128)
  9241  15AE  0820               	movf	?___almod^(0+128),w
  9242  15AF  00BC               	movwf	ReIndTimeEdit@temp^(0+128)
  9243                           
  9244                           ;prog.c: 425: setDigit(0, 4, 35);
  9245  15B0  3004               	movlw	4
  9246  15B1  00AE               	movwf	?_setDigit^(0+128)
  9247  15B2  3023               	movlw	35
  9248  15B3  00AF               	movwf	(?_setDigit^(0+128)+1)
  9249  15B4  3000               	movlw	0
  9250  15B5  265C  160A  118A   	fcall	_setDigit
  9251                           
  9252                           ;prog.c: 426: setDigit(0, 5, temp%10);
  9253  15B8  3005               	movlw	5
  9254  15B9  00AE               	movwf	?_setDigit^(0+128)
  9255  15BA  300A               	movlw	10
  9256  15BB  00A0               	movwf	?___almod^(0+128)
  9257  15BC  01A1               	clrf	(?___almod+1)^(0+128)
  9258  15BD  01A2               	clrf	(?___almod+2)^(0+128)
  9259  15BE  01A3               	clrf	(?___almod+3)^(0+128)
  9260  15BF  083F               	movf	(ReIndTimeEdit@temp+3)^(0+128),w
  9261  15C0  00A7               	movwf	((?___almod+3)^(0+128)+4)
  9262  15C1  083E               	movf	(ReIndTimeEdit@temp+2)^(0+128),w
  9263  15C2  00A6               	movwf	((?___almod+2)^(0+128)+4)
  9264  15C3  083D               	movf	(ReIndTimeEdit@temp+1)^(0+128),w
  9265  15C4  00A5               	movwf	((?___almod+1)^(0+128)+4)
  9266  15C5  083C               	movf	ReIndTimeEdit@temp^(0+128),w
  9267  15C6  00A4               	movwf	(?___almod^(0+128)+4)
  9268  15C7  2727  160A  118A   	fcall	___almod
  9269  15CA  0820               	movf	?___almod^(0+128),w
  9270  15CB  00AF               	movwf	(?_setDigit^(0+128)+1)
  9271  15CC  3000               	movlw	0
  9272  15CD  265C  160A  118A   	fcall	_setDigit
  9273                           
  9274                           ;prog.c: 427: setDigit(0, 6, temp/10);
  9275  15D0  3006               	movlw	6
  9276  15D1  00AE               	movwf	?_setDigit^(0+128)
  9277  15D2  300A               	movlw	10
  9278  15D3  00A0               	movwf	?___aldiv^(0+128)
  9279  15D4  01A1               	clrf	(?___aldiv+1)^(0+128)
  9280  15D5  01A2               	clrf	(?___aldiv+2)^(0+128)
  9281  15D6  01A3               	clrf	(?___aldiv+3)^(0+128)
  9282  15D7  083F               	movf	(ReIndTimeEdit@temp+3)^(0+128),w
  9283  15D8  00A7               	movwf	((?___aldiv+3)^(0+128)+4)
  9284  15D9  083E               	movf	(ReIndTimeEdit@temp+2)^(0+128),w
  9285  15DA  00A6               	movwf	((?___aldiv+2)^(0+128)+4)
  9286  15DB  083D               	movf	(ReIndTimeEdit@temp+1)^(0+128),w
  9287  15DC  00A5               	movwf	((?___aldiv+1)^(0+128)+4)
  9288  15DD  083C               	movf	ReIndTimeEdit@temp^(0+128),w
  9289  15DE  00A4               	movwf	(?___aldiv^(0+128)+4)
  9290  15DF  26B2  160A  118A   	fcall	___aldiv
  9291  15E2  0820               	movf	?___aldiv^(0+128),w
  9292  15E3  00AF               	movwf	(?_setDigit^(0+128)+1)
  9293  15E4  3000               	movlw	0
  9294  15E5  265C  160A  118A   	fcall	_setDigit
  9295                           
  9296                           ;prog.c: 428: setDigit(0, 8, 1 + n/1440);
  9297  15E8  3008               	movlw	8
  9298  15E9  00AE               	movwf	?_setDigit^(0+128)
  9299  15EA  3005               	movlw	5
  9300  15EB  01A3               	clrf	(?___aldiv+3)^(0+128)
  9301  15EC  01A2               	clrf	(?___aldiv+2)^(0+128)
  9302  15ED  00A1               	movwf	(?___aldiv+1)^(0+128)
  9303  15EE  30A0               	movlw	160
  9304  15EF  00A0               	movwf	?___aldiv^(0+128)
  9305  15F0  083B               	movf	(ReIndTimeEdit@n+3)^(0+128),w
  9306  15F1  00A7               	movwf	((?___aldiv+3)^(0+128)+4)
  9307  15F2  083A               	movf	(ReIndTimeEdit@n+2)^(0+128),w
  9308  15F3  00A6               	movwf	((?___aldiv+2)^(0+128)+4)
  9309  15F4  0839               	movf	(ReIndTimeEdit@n+1)^(0+128),w
  9310  15F5  00A5               	movwf	((?___aldiv+1)^(0+128)+4)
  9311  15F6  0838               	movf	ReIndTimeEdit@n^(0+128),w
  9312  15F7  00A4               	movwf	(?___aldiv^(0+128)+4)
  9313  15F8  26B2  160A  118A   	fcall	___aldiv
  9314  15FB  0A20               	incf	?___aldiv^(0+128),w
  9315  15FC  00AF               	movwf	(?_setDigit^(0+128)+1)
  9316  15FD  3000               	movlw	0
  9317  15FE  265C  160A  118A   	fcall	_setDigit
  9318  1601  3006               	movlw	6
  9319                           
  9320                           ;prog.c: 431: setDigit(1, 1, cYears%16);
  9321  1602  01AE               	clrf	?_setDigit^(0+128)
  9322  1603  0AAE               	incf	?_setDigit^(0+128),f
  9323  1604  00AF               	movwf	(?_setDigit^(0+128)+1)
  9324  1605  3001               	movlw	1
  9325  1606  265C  160A  118A   	fcall	_setDigit
  9326                           
  9327                           ;prog.c: 432: setDigit(1, 2, cYears/16);
  9328  1609  3002               	movlw	2
  9329  160A  00AE               	movwf	?_setDigit^(0+128)
  9330  160B  3001               	movlw	1
  9331  160C  01AF               	clrf	(?_setDigit^(0+128)+1)
  9332  160D  0AAF               	incf	(?_setDigit^(0+128)+1),f
  9333  160E  265C  160A  118A   	fcall	_setDigit
  9334                           
  9335                           ;prog.c: 433: setDigit(1, 3, 0);
  9336  1611  3003               	movlw	3
  9337  1612  00AE               	movwf	?_setDigit^(0+128)
  9338  1613  3001               	movlw	1
  9339  1614  01AF               	clrf	(?_setDigit^(0+128)+1)
  9340  1615  265C  160A  118A   	fcall	_setDigit
  9341                           
  9342                           ;prog.c: 434: setDigit(1, 4, 2);
  9343  1618  3004               	movlw	4
  9344  1619  00AE               	movwf	?_setDigit^(0+128)
  9345  161A  3002               	movlw	2
  9346  161B  00AF               	movwf	(?_setDigit^(0+128)+1)
  9347  161C  3001               	movlw	1
  9348  161D  265C  160A  118A   	fcall	_setDigit
  9349                           
  9350                           ;prog.c: 435: setDigit(1, 5, 86);
  9351  1620  3005               	movlw	5
  9352  1621  00AE               	movwf	?_setDigit^(0+128)
  9353  1622  3056               	movlw	86
  9354  1623  00AF               	movwf	(?_setDigit^(0+128)+1)
  9355  1624  3001               	movlw	1
  9356  1625  265C  160A  118A   	fcall	_setDigit
  9357                           
  9358                           ;prog.c: 436: setDigit(1, 6, cMonths%16);
  9359  1628  1283               	bcf	3,5	;RP0=0, select bank0
  9360  1629  0864               	movf	_cMonths,w
  9361  162A  1683               	bsf	3,5	;RP0=1, select bank1
  9362  162B  00AF               	movwf	(?_setDigit^(0+128)+1)
  9363  162C  300F               	movlw	15
  9364  162D  05AF               	andwf	(?_setDigit^(0+128)+1),f
  9365  162E  3006               	movlw	6
  9366  162F  00AE               	movwf	?_setDigit^(0+128)
  9367  1630  3001               	movlw	1
  9368  1631  265C  160A  118A   	fcall	_setDigit
  9369                           
  9370                           ;prog.c: 437: setDigit(1, 7, cMonths/16);
  9371  1634  3007               	movlw	7
  9372  1635  00AE               	movwf	?_setDigit^(0+128)
  9373  1636  1283               	bcf	3,5	;RP0=0, select bank0
  9374  1637  0E64               	swapf	_cMonths,w
  9375  1638  390F               	andlw	15
  9376  1639  1683               	bsf	3,5	;RP0=1, select bank1
  9377  163A  00AF               	movwf	(?_setDigit^(0+128)+1)
  9378  163B  3001               	movlw	1
  9379  163C  265C  160A  118A   	fcall	_setDigit
  9380                           
  9381                           ;prog.c: 438: setDigit(1, 8, 86);
  9382  163F  3008               	movlw	8
  9383  1640  00AE               	movwf	?_setDigit^(0+128)
  9384  1641  3056               	movlw	86
  9385  1642  00AF               	movwf	(?_setDigit^(0+128)+1)
  9386  1643  3001               	movlw	1
  9387  1644  265C  160A  118A   	fcall	_setDigit
  9388                           
  9389                           ;prog.c: 439: setDigit(1, 9, cDays%16);
  9390  1647  1283               	bcf	3,5	;RP0=0, select bank0
  9391  1648  0863               	movf	_cDays,w
  9392  1649  1683               	bsf	3,5	;RP0=1, select bank1
  9393  164A  00AF               	movwf	(?_setDigit^(0+128)+1)
  9394  164B  300F               	movlw	15
  9395  164C  05AF               	andwf	(?_setDigit^(0+128)+1),f
  9396  164D  3009               	movlw	9
  9397  164E  00AE               	movwf	?_setDigit^(0+128)
  9398  164F  3001               	movlw	1
  9399  1650  265C  160A  118A   	fcall	_setDigit
  9400                           
  9401                           ;prog.c: 440: setDigit(1,10, cDays/16);
  9402  1653  300A               	movlw	10
  9403  1654  00AE               	movwf	?_setDigit^(0+128)
  9404  1655  1283               	bcf	3,5	;RP0=0, select bank0
  9405  1656  0E63               	swapf	_cDays,w
  9406  1657  390F               	andlw	15
  9407  1658  1683               	bsf	3,5	;RP0=1, select bank1
  9408  1659  00AF               	movwf	(?_setDigit^(0+128)+1)
  9409  165A  3001               	movlw	1
  9410  165B  2E5C               	ljmp	_setDigit
  9411  165C                     __end_of_ReIndTimeEdit:	
  9412  165C                     __ptext2291:	
  9413 ;; =============== function _setBlink ends ============
  9414                           
  9415                           
  9416 ;; *************** function _setDigit *****************
  9417 ;; Defined at:
  9418 ;;		line 93 in file "prog.c"
  9419 ;; Parameters:    Size  Location     Type
  9420 ;;  line            1    wreg     unsigned char 
  9421 ;;  symbol          1   14[BANK1 ] unsigned char 
  9422 ;;  data            1   15[BANK1 ] unsigned char 
  9423 ;; Auto vars:     Size  Location     Type
  9424 ;;  line            1   23[BANK1 ] unsigned char 
  9425 ;;  value0          1   22[BANK1 ] unsigned char 
  9426 ;;  value           1   21[BANK1 ] unsigned char 
  9427 ;;  e0              1   19[BANK1 ] unsigned char 
  9428 ;; Return value:  Size  Location     Type
  9429 ;;		None               void
  9430 ;; Registers used:
  9431 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9432 ;; Tracked objects:
  9433 ;;		On entry : 20/160
  9434 ;;		On exit  : 160/120
  9435 ;;		Unchanged: FFE9F/0
  9436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9437 ;;      Params:         0       0       2       0       0
  9438 ;;      Locals:         0       0       5       0       0
  9439 ;;      Temps:          0       0       3       0       0
  9440 ;;      Totals:         0       0      10       0       0
  9441 ;;Total ram usage:       10 bytes
  9442 ;; Hardware stack levels used:    1
  9443 ;; Hardware stack levels required when called:    4
  9444 ;; This function calls:
  9445 ;;		Nothing
  9446 ;; This function is called by:
  9447 ;;		_NumericToIndicator
  9448 ;;		_TimeToInd
  9449 ;;		_ReIndTimeEdit
  9450 ;;		_TimeEdit
  9451 ;;		_SendArrayToLCD
  9452 ;;		_RefreshSchedulerIndicator
  9453 ;;		_TimesToIndicator
  9454 ;;		_ItemsToIndicator
  9455 ;;		_EditSchedule
  9456 ;; This function uses a non-reentrant model
  9457 ;;
  9458  165C                     _setDigit:	
  9459                           
  9460                           ; Regs used in _setDigit: [wreg-fsr0h+status,2+status,0]
  9461                           ;setDigit@line stored from wreg
  9462  165C  1303               	bcf	3,6	;RP1=0, select bank1
  9463  165D  00B7               	movwf	setDigit@line^(0+128)
  9464                           
  9465                           ;prog.c: 94: unsigned char value = data & 0b01111111;
  9466  165E  082F               	movf	setDigit@data^(0+128),w
  9467  165F  00B5               	movwf	setDigit@value^(0+128)
  9468  1660  13B5               	bcf	setDigit@value^(0+128),7
  9469                           
  9470                           ;prog.c: 95: unsigned char value0 = digits[line][symbol-1];
  9471  1661  0837               	movf	setDigit@line^(0+128),w
  9472  1662  00B0               	movwf	??_setDigit^(0+128)
  9473  1663  0E30               	swapf	??_setDigit^(0+128),w
  9474  1664  39F0               	andlw	240
  9475  1665  00B0               	movwf	??_setDigit^(0+128)
  9476  1666  3E0F               	addlw	(_digits+255)& (0+255)
  9477  1667  00B1               	movwf	(??_setDigit+1)^(0+128)
  9478  1668  082E               	movf	setDigit@symbol^(0+128),w
  9479  1669  0731               	addwf	(??_setDigit+1)^(0+128),w
  9480  166A  00B2               	movwf	(??_setDigit+2)^(0+128)
  9481  166B  0084               	movwf	4
  9482  166C  1783               	bsf	3,7	;select IRP bank2
  9483  166D  0800               	movf	0,w
  9484  166E  00B6               	movwf	setDigit@value0^(0+128)
  9485                           
  9486                           ;prog.c: 96: unsigned char e0 = value0 & 0b10000000;
  9487  166F  00B3               	movwf	setDigit@e0^(0+128)
  9488  1670  3080               	movlw	128
  9489  1671  05B3               	andwf	setDigit@e0^(0+128),f
  9490                           
  9491                           ;prog.c: 97: value0 &= 0b01111111;
  9492  1672  13B6               	bcf	setDigit@value0^(0+128),7
  9493                           
  9494                           ;prog.c: 98: modifide_digits[line][symbol-1] = modifide_digits[line][symbol-1]>0 || (val
      +                          ue != value0);
  9495  1673  01B4               	clrf	_setDigit$1257^(0+128)
  9496  1674  0AB4               	incf	_setDigit$1257^(0+128),f
  9497  1675  0837               	movf	setDigit@line^(0+128),w
  9498  1676  00B0               	movwf	??_setDigit^(0+128)
  9499  1677  0E30               	swapf	??_setDigit^(0+128),w
  9500  1678  39F0               	andlw	240
  9501  1679  00B0               	movwf	??_setDigit^(0+128)
  9502  167A  3E2F               	addlw	(_modifide_digits+255)& (0+255)
  9503  167B  00B1               	movwf	(??_setDigit+1)^(0+128)
  9504  167C  082E               	movf	setDigit@symbol^(0+128),w
  9505  167D  0731               	addwf	(??_setDigit+1)^(0+128),w
  9506  167E  00B2               	movwf	(??_setDigit+2)^(0+128)
  9507  167F  0084               	movwf	4
  9508  1680  0880               	movf	0,f
  9509  1681  1D03               	skipz
  9510  1682  2E88               	goto	l9633
  9511  1683  0835               	movf	setDigit@value^(0+128),w
  9512  1684  0636               	xorwf	setDigit@value0^(0+128),w
  9513  1685  1D03               	skipz
  9514  1686  2E88               	goto	l9633
  9515  1687  01B4               	clrf	_setDigit$1257^(0+128)
  9516  1688                     l9633:	
  9517  1688  0837               	movf	setDigit@line^(0+128),w
  9518  1689  00B0               	movwf	??_setDigit^(0+128)
  9519  168A  0E30               	swapf	??_setDigit^(0+128),w
  9520  168B  39F0               	andlw	240
  9521  168C  00B0               	movwf	??_setDigit^(0+128)
  9522  168D  3E2F               	addlw	(_modifide_digits+255)& (0+255)
  9523  168E  00B1               	movwf	(??_setDigit+1)^(0+128)
  9524  168F  082E               	movf	setDigit@symbol^(0+128),w
  9525  1690  0731               	addwf	(??_setDigit+1)^(0+128),w
  9526  1691  00B2               	movwf	(??_setDigit+2)^(0+128)
  9527  1692  0084               	movwf	4
  9528  1693  0834               	movf	_setDigit$1257^(0+128),w
  9529  1694  0080               	movwf	0
  9530                           
  9531                           ;prog.c: 99: IsLCDModified = IsLCDModified || (value != value0);
  9532  1695  1283               	bcf	3,5	;RP0=0, select bank0
  9533  1696  18DD               	btfsc	_IsLCDModified/(0+8),_IsLCDModified& (0+7)
  9534  1697  2EA0               	goto	l731
  9535  1698  1683               	bsf	3,5	;RP0=1, select bank1
  9536  1699  0835               	movf	setDigit@value^(0+128),w
  9537  169A  0636               	xorwf	setDigit@value0^(0+128),w
  9538  169B  1D03               	skipz
  9539  169C  2EA0               	goto	l731
  9540  169D  1283               	bcf	3,5	;RP0=0, select bank0
  9541  169E  10DD               	bcf	_IsLCDModified/(0+8),_IsLCDModified& (0+7)
  9542  169F  2EA2               	goto	l9641
  9543  16A0                     l731:	
  9544  16A0  1283               	bcf	3,5	;RP0=0, select bank0
  9545  16A1  14DD               	bsf	_IsLCDModified/(0+8),_IsLCDModified& (0+7)
  9546  16A2                     l9641:	
  9547                           
  9548                           ;prog.c: 100: digits[line][symbol-1] = value | e0;
  9549  16A2  1683               	bsf	3,5	;RP0=1, select bank1
  9550  16A3  0837               	movf	setDigit@line^(0+128),w
  9551  16A4  00B0               	movwf	??_setDigit^(0+128)
  9552  16A5  0E30               	swapf	??_setDigit^(0+128),w
  9553  16A6  39F0               	andlw	240
  9554  16A7  00B0               	movwf	??_setDigit^(0+128)
  9555  16A8  3E0F               	addlw	(_digits+255)& (0+255)
  9556  16A9  00B1               	movwf	(??_setDigit+1)^(0+128)
  9557  16AA  082E               	movf	setDigit@symbol^(0+128),w
  9558  16AB  0731               	addwf	(??_setDigit+1)^(0+128),w
  9559  16AC  00B2               	movwf	(??_setDigit+2)^(0+128)
  9560  16AD  0084               	movwf	4
  9561  16AE  0835               	movf	setDigit@value^(0+128),w
  9562  16AF  0433               	iorwf	setDigit@e0^(0+128),w
  9563  16B0  0080               	movwf	0
  9564  16B1  0008               	return
  9565  16B2                     __end_of_setDigit:	
  9566  16B2                     __ptext2268:	
  9567 ;; =============== function _NumericToIndicator ends ============
  9568                           
  9569                           
  9570 ;; *************** function ___aldiv *****************
  9571 ;; Defined at:
  9572 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\aldiv.c"
  9573 ;; Parameters:    Size  Location     Type
  9574 ;;  divisor         4    0[BANK1 ] long 
  9575 ;;  dividend        4    4[BANK1 ] long 
  9576 ;; Auto vars:     Size  Location     Type
  9577 ;;  quotient        4   10[BANK1 ] long 
  9578 ;;  sign            1    9[BANK1 ] unsigned char 
  9579 ;;  counter         1    8[BANK1 ] unsigned char 
  9580 ;; Return value:  Size  Location     Type
  9581 ;;                  4    0[BANK1 ] long 
  9582 ;; Registers used:
  9583 ;;		wreg, status,2, status,0
  9584 ;; Tracked objects:
  9585 ;;		On entry : 60/120
  9586 ;;		On exit  : 60/120
  9587 ;;		Unchanged: FFF9F/0
  9588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9589 ;;      Params:         0       0       8       0       0
  9590 ;;      Locals:         0       0       6       0       0
  9591 ;;      Temps:          0       0       0       0       0
  9592 ;;      Totals:         0       0      14       0       0
  9593 ;;Total ram usage:       14 bytes
  9594 ;; Hardware stack levels used:    1
  9595 ;; Hardware stack levels required when called:    4
  9596 ;; This function calls:
  9597 ;;		Nothing
  9598 ;; This function is called by:
  9599 ;;		_TimeToInd
  9600 ;;		_ReIndTimeEdit
  9601 ;;		_TimeEdit
  9602 ;;		_ParseTime
  9603 ;; This function uses a non-reentrant model
  9604 ;;
  9605  16B2                     ___aldiv:	
  9606                           
  9607                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9608  16B2  01A9               	clrf	___aldiv@sign^(0+128)
  9609  16B3  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  9610  16B4  2EC2               	goto	l2230
  9611  16B5  09A0               	comf	___aldiv@divisor^(0+128),f
  9612  16B6  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  9613  16B7  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  9614  16B8  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  9615  16B9  0AA0               	incf	___aldiv@divisor^(0+128),f
  9616  16BA  1903               	skipnz
  9617  16BB  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  9618  16BC  1903               	skipnz
  9619  16BD  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  9620  16BE  1903               	skipnz
  9621  16BF  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  9622  16C0  01A9               	clrf	___aldiv@sign^(0+128)
  9623  16C1  0AA9               	incf	___aldiv@sign^(0+128),f
  9624  16C2                     l2230:	
  9625  16C2  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  9626  16C3  2ED1               	goto	l10051
  9627  16C4  09A4               	comf	___aldiv@dividend^(0+128),f
  9628  16C5  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  9629  16C6  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  9630  16C7  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  9631  16C8  0AA4               	incf	___aldiv@dividend^(0+128),f
  9632  16C9  1903               	skipnz
  9633  16CA  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  9634  16CB  1903               	skipnz
  9635  16CC  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  9636  16CD  1903               	skipnz
  9637  16CE  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  9638  16CF  3001               	movlw	1
  9639  16D0  06A9               	xorwf	___aldiv@sign^(0+128),f
  9640  16D1                     l10051:	
  9641  16D1  01AA               	clrf	___aldiv@quotient^(0+128)
  9642  16D2  01AB               	clrf	(___aldiv@quotient+1)^(0+128)
  9643  16D3  01AC               	clrf	(___aldiv@quotient+2)^(0+128)
  9644  16D4  01AD               	clrf	(___aldiv@quotient+3)^(0+128)
  9645  16D5  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  9646  16D6  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  9647  16D7  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  9648  16D8  0420               	iorwf	___aldiv@divisor^(0+128),w
  9649  16D9  1903               	skipnz
  9650  16DA  2F10               	goto	l10073
  9651  16DB  01A8               	clrf	___aldiv@counter^(0+128)
  9652  16DC                     L23:	
  9653  16DC  0AA8               	incf	___aldiv@counter^(0+128),f
  9654  16DD  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  9655  16DE  2EE5               	goto	l10061
  9656  16DF  1003               	clrc
  9657  16E0  0DA0               	rlf	___aldiv@divisor^(0+128),f
  9658  16E1  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  9659  16E2  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  9660  16E3  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  9661  16E4  2EDC               	goto	L23
  9662  16E5                     l10061:	
  9663  16E5  1003               	clrc
  9664  16E6  0DAA               	rlf	___aldiv@quotient^(0+128),f
  9665  16E7  0DAB               	rlf	(___aldiv@quotient+1)^(0+128),f
  9666  16E8  0DAC               	rlf	(___aldiv@quotient+2)^(0+128),f
  9667  16E9  0DAD               	rlf	(___aldiv@quotient+3)^(0+128),f
  9668  16EA  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  9669  16EB  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  9670  16EC  1D03               	skipz
  9671  16ED  2EF8               	goto	u7585
  9672  16EE  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  9673  16EF  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  9674  16F0  1D03               	skipz
  9675  16F1  2EF8               	goto	u7585
  9676  16F2  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  9677  16F3  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  9678  16F4  1D03               	skipz
  9679  16F5  2EF8               	goto	u7585
  9680  16F6  0820               	movf	___aldiv@divisor^(0+128),w
  9681  16F7  0224               	subwf	___aldiv@dividend^(0+128),w
  9682  16F8                     u7585:	
  9683  16F8  1C03               	skipc
  9684  16F9  2F0A               	goto	L24
  9685  16FA  0820               	movf	___aldiv@divisor^(0+128),w
  9686  16FB  02A4               	subwf	___aldiv@dividend^(0+128),f
  9687  16FC  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  9688  16FD  1C03               	skipc
  9689  16FE  0F21               	incfsz	(___aldiv@divisor+1)^(0+128),w
  9690  16FF  02A5               	subwf	(___aldiv@dividend+1)^(0+128),f
  9691  1700  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  9692  1701  1C03               	skipc
  9693  1702  0F22               	incfsz	(___aldiv@divisor+2)^(0+128),w
  9694  1703  02A6               	subwf	(___aldiv@dividend+2)^(0+128),f
  9695  1704  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  9696  1705  1C03               	skipc
  9697  1706  0F23               	incfsz	(___aldiv@divisor+3)^(0+128),w
  9698  1707  02A7               	subwf	(___aldiv@dividend+3)^(0+128),f
  9699  1708  142A               	bsf	___aldiv@quotient^(0+128),0
  9700  1709  1003               	clrc
  9701  170A                     L24:	
  9702  170A  0CA3               	rrf	(___aldiv@divisor+3)^(0+128),f
  9703  170B  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  9704  170C  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  9705  170D  0CA0               	rrf	___aldiv@divisor^(0+128),f
  9706  170E  0BA8               	decfsz	___aldiv@counter^(0+128),f
  9707  170F  2EE5               	goto	l10061
  9708  1710                     l10073:	
  9709  1710  0829               	movf	___aldiv@sign^(0+128),w
  9710  1711  1903               	btfsc	3,2
  9711  1712  2F1E               	goto	l10077
  9712  1713  09AA               	comf	___aldiv@quotient^(0+128),f
  9713  1714  09AB               	comf	(___aldiv@quotient+1)^(0+128),f
  9714  1715  09AC               	comf	(___aldiv@quotient+2)^(0+128),f
  9715  1716  09AD               	comf	(___aldiv@quotient+3)^(0+128),f
  9716  1717  0AAA               	incf	___aldiv@quotient^(0+128),f
  9717  1718  1903               	skipnz
  9718  1719  0AAB               	incf	(___aldiv@quotient+1)^(0+128),f
  9719  171A  1903               	skipnz
  9720  171B  0AAC               	incf	(___aldiv@quotient+2)^(0+128),f
  9721  171C  1903               	skipnz
  9722  171D  0AAD               	incf	(___aldiv@quotient+3)^(0+128),f
  9723  171E                     l10077:	
  9724  171E  082D               	movf	(___aldiv@quotient+3)^(0+128),w
  9725  171F  00A3               	movwf	(?___aldiv+3)^(0+128)
  9726  1720  082C               	movf	(___aldiv@quotient+2)^(0+128),w
  9727  1721  00A2               	movwf	(?___aldiv+2)^(0+128)
  9728  1722  082B               	movf	(___aldiv@quotient+1)^(0+128),w
  9729  1723  00A1               	movwf	(?___aldiv+1)^(0+128)
  9730  1724  082A               	movf	___aldiv@quotient^(0+128),w
  9731  1725  00A0               	movwf	?___aldiv^(0+128)
  9732  1726  0008               	return
  9733  1727                     __end_of___aldiv:	
  9734  1727                     __ptext2269:	
  9735 ;; =============== function ___aldiv ends ============
  9736                           
  9737                           
  9738 ;; *************** function ___almod *****************
  9739 ;; Defined at:
  9740 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\almod.c"
  9741 ;; Parameters:    Size  Location     Type
  9742 ;;  divisor         4    0[BANK1 ] long 
  9743 ;;  dividend        4    4[BANK1 ] long 
  9744 ;; Auto vars:     Size  Location     Type
  9745 ;;  sign            1    9[BANK1 ] unsigned char 
  9746 ;;  counter         1    8[BANK1 ] unsigned char 
  9747 ;; Return value:  Size  Location     Type
  9748 ;;                  4    0[BANK1 ] long 
  9749 ;; Registers used:
  9750 ;;		wreg, status,2, status,0
  9751 ;; Tracked objects:
  9752 ;;		On entry : 160/120
  9753 ;;		On exit  : 160/120
  9754 ;;		Unchanged: FFE9F/0
  9755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9756 ;;      Params:         0       0       8       0       0
  9757 ;;      Locals:         0       0       2       0       0
  9758 ;;      Temps:          0       0       0       0       0
  9759 ;;      Totals:         0       0      10       0       0
  9760 ;;Total ram usage:       10 bytes
  9761 ;; Hardware stack levels used:    1
  9762 ;; Hardware stack levels required when called:    4
  9763 ;; This function calls:
  9764 ;;		Nothing
  9765 ;; This function is called by:
  9766 ;;		_TimeToInd
  9767 ;;		_ReIndTimeEdit
  9768 ;; This function uses a non-reentrant model
  9769 ;;
  9770  1727                     ___almod:	
  9771                           
  9772                           ; Regs used in ___almod: [wreg+status,2+status,0]
  9773  1727  01A9               	clrf	___almod@sign^(0+128)
  9774  1728  1FA7               	btfss	(___almod@dividend+3)^(0+128),7
  9775  1729  2F37               	goto	l2217
  9776  172A  09A4               	comf	___almod@dividend^(0+128),f
  9777  172B  09A5               	comf	(___almod@dividend+1)^(0+128),f
  9778  172C  09A6               	comf	(___almod@dividend+2)^(0+128),f
  9779  172D  09A7               	comf	(___almod@dividend+3)^(0+128),f
  9780  172E  0AA4               	incf	___almod@dividend^(0+128),f
  9781  172F  1903               	skipnz
  9782  1730  0AA5               	incf	(___almod@dividend+1)^(0+128),f
  9783  1731  1903               	skipnz
  9784  1732  0AA6               	incf	(___almod@dividend+2)^(0+128),f
  9785  1733  1903               	skipnz
  9786  1734  0AA7               	incf	(___almod@dividend+3)^(0+128),f
  9787  1735  01A9               	clrf	___almod@sign^(0+128)
  9788  1736  0AA9               	incf	___almod@sign^(0+128),f
  9789  1737                     l2217:	
  9790  1737  1FA3               	btfss	(___almod@divisor+3)^(0+128),7
  9791  1738  2F44               	goto	l10017
  9792  1739  09A0               	comf	___almod@divisor^(0+128),f
  9793  173A  09A1               	comf	(___almod@divisor+1)^(0+128),f
  9794  173B  09A2               	comf	(___almod@divisor+2)^(0+128),f
  9795  173C  09A3               	comf	(___almod@divisor+3)^(0+128),f
  9796  173D  0AA0               	incf	___almod@divisor^(0+128),f
  9797  173E  1903               	skipnz
  9798  173F  0AA1               	incf	(___almod@divisor+1)^(0+128),f
  9799  1740  1903               	skipnz
  9800  1741  0AA2               	incf	(___almod@divisor+2)^(0+128),f
  9801  1742  1903               	skipnz
  9802  1743  0AA3               	incf	(___almod@divisor+3)^(0+128),f
  9803  1744                     l10017:	
  9804  1744  0823               	movf	(___almod@divisor+3)^(0+128),w
  9805  1745  0422               	iorwf	(___almod@divisor+2)^(0+128),w
  9806  1746  0421               	iorwf	(___almod@divisor+1)^(0+128),w
  9807  1747  0420               	iorwf	___almod@divisor^(0+128),w
  9808  1748  1903               	skipnz
  9809  1749  2F79               	goto	l10033
  9810  174A  01A8               	clrf	___almod@counter^(0+128)
  9811  174B                     L25:	
  9812  174B  0AA8               	incf	___almod@counter^(0+128),f
  9813  174C  1BA3               	btfsc	(___almod@divisor+3)^(0+128),7
  9814  174D  2F54               	goto	l10025
  9815  174E  1003               	clrc
  9816  174F  0DA0               	rlf	___almod@divisor^(0+128),f
  9817  1750  0DA1               	rlf	(___almod@divisor+1)^(0+128),f
  9818  1751  0DA2               	rlf	(___almod@divisor+2)^(0+128),f
  9819  1752  0DA3               	rlf	(___almod@divisor+3)^(0+128),f
  9820  1753  2F4B               	goto	L25
  9821  1754                     l10025:	
  9822  1754  0823               	movf	(___almod@divisor+3)^(0+128),w
  9823  1755  0227               	subwf	(___almod@dividend+3)^(0+128),w
  9824  1756  1D03               	skipz
  9825  1757  2F62               	goto	u7515
  9826  1758  0822               	movf	(___almod@divisor+2)^(0+128),w
  9827  1759  0226               	subwf	(___almod@dividend+2)^(0+128),w
  9828  175A  1D03               	skipz
  9829  175B  2F62               	goto	u7515
  9830  175C  0821               	movf	(___almod@divisor+1)^(0+128),w
  9831  175D  0225               	subwf	(___almod@dividend+1)^(0+128),w
  9832  175E  1D03               	skipz
  9833  175F  2F62               	goto	u7515
  9834  1760  0820               	movf	___almod@divisor^(0+128),w
  9835  1761  0224               	subwf	___almod@dividend^(0+128),w
  9836  1762                     u7515:	
  9837  1762  1C03               	skipc
  9838  1763  2F73               	goto	L26
  9839  1764  0820               	movf	___almod@divisor^(0+128),w
  9840  1765  02A4               	subwf	___almod@dividend^(0+128),f
  9841  1766  0821               	movf	(___almod@divisor+1)^(0+128),w
  9842  1767  1C03               	skipc
  9843  1768  0F21               	incfsz	(___almod@divisor+1)^(0+128),w
  9844  1769  02A5               	subwf	(___almod@dividend+1)^(0+128),f
  9845  176A  0822               	movf	(___almod@divisor+2)^(0+128),w
  9846  176B  1C03               	skipc
  9847  176C  0F22               	incfsz	(___almod@divisor+2)^(0+128),w
  9848  176D  02A6               	subwf	(___almod@dividend+2)^(0+128),f
  9849  176E  0823               	movf	(___almod@divisor+3)^(0+128),w
  9850  176F  1C03               	skipc
  9851  1770  0F23               	incfsz	(___almod@divisor+3)^(0+128),w
  9852  1771  02A7               	subwf	(___almod@dividend+3)^(0+128),f
  9853  1772  1003               	clrc
  9854  1773                     L26:	
  9855  1773  0CA3               	rrf	(___almod@divisor+3)^(0+128),f
  9856  1774  0CA2               	rrf	(___almod@divisor+2)^(0+128),f
  9857  1775  0CA1               	rrf	(___almod@divisor+1)^(0+128),f
  9858  1776  0CA0               	rrf	___almod@divisor^(0+128),f
  9859  1777  0BA8               	decfsz	___almod@counter^(0+128),f
  9860  1778  2F54               	goto	l10025
  9861  1779                     l10033:	
  9862  1779  0829               	movf	___almod@sign^(0+128),w
  9863  177A  1903               	btfsc	3,2
  9864  177B  2F87               	goto	l10037
  9865  177C  09A4               	comf	___almod@dividend^(0+128),f
  9866  177D  09A5               	comf	(___almod@dividend+1)^(0+128),f
  9867  177E  09A6               	comf	(___almod@dividend+2)^(0+128),f
  9868  177F  09A7               	comf	(___almod@dividend+3)^(0+128),f
  9869  1780  0AA4               	incf	___almod@dividend^(0+128),f
  9870  1781  1903               	skipnz
  9871  1782  0AA5               	incf	(___almod@dividend+1)^(0+128),f
  9872  1783  1903               	skipnz
  9873  1784  0AA6               	incf	(___almod@dividend+2)^(0+128),f
  9874  1785  1903               	skipnz
  9875  1786  0AA7               	incf	(___almod@dividend+3)^(0+128),f
  9876  1787                     l10037:	
  9877  1787  0827               	movf	(___almod@dividend+3)^(0+128),w
  9878  1788  00A3               	movwf	(?___almod+3)^(0+128)
  9879  1789  0826               	movf	(___almod@dividend+2)^(0+128),w
  9880  178A  00A2               	movwf	(?___almod+2)^(0+128)
  9881  178B  0825               	movf	(___almod@dividend+1)^(0+128),w
  9882  178C  00A1               	movwf	(?___almod+1)^(0+128)
  9883  178D  0824               	movf	___almod@dividend^(0+128),w
  9884  178E  00A0               	movwf	?___almod^(0+128)
  9885  178F  0008               	return
  9886  1790                     __end_of___almod:	
  9887  1790                     __ptext2274:	
  9888 ;; =============== function ___lbdiv ends ============
  9889                           
  9890                           
  9891 ;; *************** function ___lwmod *****************
  9892 ;; Defined at:
  9893 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lwmod.c"
  9894 ;; Parameters:    Size  Location     Type
  9895 ;;  divisor         2    0[BANK1 ] unsigned int 
  9896 ;;  dividend        2    2[BANK1 ] unsigned int 
  9897 ;; Auto vars:     Size  Location     Type
  9898 ;;  counter         1    4[BANK1 ] unsigned char 
  9899 ;; Return value:  Size  Location     Type
  9900 ;;                  2    0[BANK1 ] unsigned int 
  9901 ;; Registers used:
  9902 ;;		wreg, status,2, status,0
  9903 ;; Tracked objects:
  9904 ;;		On entry : 60/120
  9905 ;;		On exit  : 60/120
  9906 ;;		Unchanged: FFF9F/0
  9907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9908 ;;      Params:         0       0       4       0       0
  9909 ;;      Locals:         0       0       1       0       0
  9910 ;;      Temps:          0       0       0       0       0
  9911 ;;      Totals:         0       0       5       0       0
  9912 ;;Total ram usage:        5 bytes
  9913 ;; Hardware stack levels used:    1
  9914 ;; Hardware stack levels required when called:    4
  9915 ;; This function calls:
  9916 ;;		Nothing
  9917 ;; This function is called by:
  9918 ;;		_TimeToInd
  9919 ;;		_TimesToIndicator
  9920 ;;		_ParseTime
  9921 ;; This function uses a non-reentrant model
  9922 ;;
  9923  1790                     ___lwmod:	
  9924                           
  9925 ;; hardware stack exceeded
  9926                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  9927  1790  0821               	movf	(___lwmod@divisor+1)^(0+128),w
  9928  1791  0420               	iorwf	___lwmod@divisor^(0+128),w
  9929  1792  1903               	skipnz
  9930  1793  2FAF               	goto	l9923
  9931  1794  01A4               	clrf	___lwmod@counter^(0+128)
  9932  1795                     L32:	
  9933  1795  0AA4               	incf	___lwmod@counter^(0+128),f
  9934  1796  1BA1               	btfsc	(___lwmod@divisor+1)^(0+128),7
  9935  1797  2F9C               	goto	l9915
  9936  1798  1003               	clrc
  9937  1799  0DA0               	rlf	___lwmod@divisor^(0+128),f
  9938  179A  0DA1               	rlf	(___lwmod@divisor+1)^(0+128),f
  9939  179B  2F95               	goto	L32
  9940  179C                     l9915:	
  9941  179C  0821               	movf	(___lwmod@divisor+1)^(0+128),w
  9942  179D  0223               	subwf	(___lwmod@dividend+1)^(0+128),w
  9943  179E  1D03               	skipz
  9944  179F  2FA2               	goto	u7305
  9945  17A0  0820               	movf	___lwmod@divisor^(0+128),w
  9946  17A1  0222               	subwf	___lwmod@dividend^(0+128),w
  9947  17A2                     u7305:	
  9948  17A2  1C03               	skipc
  9949  17A3  2FAB               	goto	L33
  9950  17A4  0820               	movf	___lwmod@divisor^(0+128),w
  9951  17A5  02A2               	subwf	___lwmod@dividend^(0+128),f
  9952  17A6  0821               	movf	(___lwmod@divisor+1)^(0+128),w
  9953  17A7  1C03               	skipc
  9954  17A8  03A3               	decf	(___lwmod@dividend+1)^(0+128),f
  9955  17A9  02A3               	subwf	(___lwmod@dividend+1)^(0+128),f
  9956  17AA  1003               	clrc
  9957  17AB                     L33:	
  9958  17AB  0CA1               	rrf	(___lwmod@divisor+1)^(0+128),f
  9959  17AC  0CA0               	rrf	___lwmod@divisor^(0+128),f
  9960  17AD  0BA4               	decfsz	___lwmod@counter^(0+128),f
  9961  17AE  2F9C               	goto	l9915
  9962  17AF                     l9923:	
  9963  17AF  0823               	movf	(___lwmod@dividend+1)^(0+128),w
  9964  17B0  00A1               	movwf	(?___lwmod+1)^(0+128)
  9965  17B1  0822               	movf	___lwmod@dividend^(0+128),w
  9966  17B2  00A0               	movwf	?___lwmod^(0+128)
  9967  17B3  0008               	return
  9968  17B4                     __end_of___lwmod:	
  9969  17B4                     __ptext2275:	
  9970 ;; =============== function ___lwmod ends ============
  9971                           
  9972                           
  9973 ;; *************** function ___lwdiv *****************
  9974 ;; Defined at:
  9975 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lwdiv.c"
  9976 ;; Parameters:    Size  Location     Type
  9977 ;;  divisor         2    0[BANK1 ] unsigned int 
  9978 ;;  dividend        2    2[BANK1 ] unsigned int 
  9979 ;; Auto vars:     Size  Location     Type
  9980 ;;  quotient        2    5[BANK1 ] unsigned int 
  9981 ;;  counter         1    4[BANK1 ] unsigned char 
  9982 ;; Return value:  Size  Location     Type
  9983 ;;                  2    0[BANK1 ] unsigned int 
  9984 ;; Registers used:
  9985 ;;		wreg, status,2, status,0
  9986 ;; Tracked objects:
  9987 ;;		On entry : 160/120
  9988 ;;		On exit  : 160/120
  9989 ;;		Unchanged: FFE9F/0
  9990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9991 ;;      Params:         0       0       4       0       0
  9992 ;;      Locals:         0       0       3       0       0
  9993 ;;      Temps:          0       0       0       0       0
  9994 ;;      Totals:         0       0       7       0       0
  9995 ;;Total ram usage:        7 bytes
  9996 ;; Hardware stack levels used:    1
  9997 ;; Hardware stack levels required when called:    4
  9998 ;; This function calls:
  9999 ;;		Nothing
 10000 ;; This function is called by:
 10001 ;;		_TimeToInd
 10002 ;;		_TimesToIndicator
 10003 ;;		_ParseTime
 10004 ;; This function uses a non-reentrant model
 10005 ;;
 10006  17B4                     ___lwdiv:	
 10007                           
 10008 ;; hardware stack exceeded
 10009                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10010  17B4  01A5               	clrf	___lwdiv@quotient^(0+128)
 10011  17B5  01A6               	clrf	(___lwdiv@quotient+1)^(0+128)
 10012  17B6  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
 10013  17B7  0420               	iorwf	___lwdiv@divisor^(0+128),w
 10014  17B8  1903               	skipnz
 10015  17B9  2FD9               	goto	l9903
 10016  17BA  01A4               	clrf	___lwdiv@counter^(0+128)
 10017  17BB                     L34:	
 10018  17BB  0AA4               	incf	___lwdiv@counter^(0+128),f
 10019  17BC  1BA1               	btfsc	(___lwdiv@divisor+1)^(0+128),7
 10020  17BD  2FC2               	goto	l9891
 10021  17BE  1003               	clrc
 10022  17BF  0DA0               	rlf	___lwdiv@divisor^(0+128),f
 10023  17C0  0DA1               	rlf	(___lwdiv@divisor+1)^(0+128),f
 10024  17C1  2FBB               	goto	L34
 10025  17C2                     l9891:	
 10026  17C2  1003               	clrc
 10027  17C3  0DA5               	rlf	___lwdiv@quotient^(0+128),f
 10028  17C4  0DA6               	rlf	(___lwdiv@quotient+1)^(0+128),f
 10029  17C5  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
 10030  17C6  0223               	subwf	(___lwdiv@dividend+1)^(0+128),w
 10031  17C7  1D03               	skipz
 10032  17C8  2FCB               	goto	u7265
 10033  17C9  0820               	movf	___lwdiv@divisor^(0+128),w
 10034  17CA  0222               	subwf	___lwdiv@dividend^(0+128),w
 10035  17CB                     u7265:	
 10036  17CB  1C03               	skipc
 10037  17CC  2FD5               	goto	L35
 10038  17CD  0820               	movf	___lwdiv@divisor^(0+128),w
 10039  17CE  02A2               	subwf	___lwdiv@dividend^(0+128),f
 10040  17CF  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
 10041  17D0  1C03               	skipc
 10042  17D1  03A3               	decf	(___lwdiv@dividend+1)^(0+128),f
 10043  17D2  02A3               	subwf	(___lwdiv@dividend+1)^(0+128),f
 10044  17D3  1425               	bsf	___lwdiv@quotient^(0+128),0
 10045  17D4  1003               	clrc
 10046  17D5                     L35:	
 10047  17D5  0CA1               	rrf	(___lwdiv@divisor+1)^(0+128),f
 10048  17D6  0CA0               	rrf	___lwdiv@divisor^(0+128),f
 10049  17D7  0BA4               	decfsz	___lwdiv@counter^(0+128),f
 10050  17D8  2FC2               	goto	l9891
 10051  17D9                     l9903:	
 10052  17D9  0826               	movf	(___lwdiv@quotient+1)^(0+128),w
 10053  17DA  00A1               	movwf	(?___lwdiv+1)^(0+128)
 10054  17DB  0825               	movf	___lwdiv@quotient^(0+128),w
 10055  17DC  00A0               	movwf	?___lwdiv^(0+128)
 10056  17DD  0008               	return
 10057  17DE                     __end_of___lwdiv:	
 10058  17DE                     __ptext2266:	
 10059 ;; =============== function _ReadFourBytesEE ends ============
 10060                           
 10061                           
 10062 ;; *************** function _SendArrayToLCD *****************
 10063 ;; Defined at:
 10064 ;;		line 653 in file "prog.c"
 10065 ;; Parameters:    Size  Location     Type
 10066 ;;  Symb            1    wreg     PTR unsigned char 
 10067 ;;		 -> TimeToInd@DataArray(17), TimeToInd@D(4), GetDayOfWeek@array(3), 
 10068 ;;  line            1   24[BANK1 ] unsigned char 
 10069 ;;  position        1   25[BANK1 ] unsigned char 
 10070 ;; Auto vars:     Size  Location     Type
 10071 ;;  Symb            1   27[BANK1 ] PTR unsigned char 
 10072 ;;		 -> TimeToInd@DataArray(17), TimeToInd@D(4), GetDayOfWeek@array(3), 
 10073 ;;  i               2   28[BANK1 ] unsigned int 
 10074 ;; Return value:  Size  Location     Type
 10075 ;;		None               void
 10076 ;; Registers used:
 10077 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10078 ;; Tracked objects:
 10079 ;;		On entry : 20/120
 10080 ;;		On exit  : 160/120
 10081 ;;		Unchanged: FFE9F/0
 10082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10083 ;;      Params:         0       0       2       0       0
 10084 ;;      Locals:         0       0       3       0       0
 10085 ;;      Temps:          0       0       1       0       0
 10086 ;;      Totals:         0       0       6       0       0
 10087 ;;Total ram usage:        6 bytes
 10088 ;; Hardware stack levels used:    1
 10089 ;; Hardware stack levels required when called:    5
 10090 ;; This function calls:
 10091 ;;		_setDigit
 10092 ;; This function is called by:
 10093 ;;		_TimeToInd
 10094 ;; This function uses a non-reentrant model
 10095 ;;
 10096  17DE                     _SendArrayToLCD:	
 10097                           
 10098                           ; Regs used in _SendArrayToLCD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10099                           ;SendArrayToLCD@Symb stored from wreg
 10100  17DE  1303               	bcf	3,6	;RP1=0, select bank1
 10101  17DF  00BB               	movwf	SendArrayToLCD@Symb^(0+128)
 10102                           
 10103                           ;prog.c: 654: unsigned int i = 0;
 10104  17E0  01BC               	clrf	SendArrayToLCD@i^(0+128)
 10105  17E1  01BD               	clrf	(SendArrayToLCD@i+1)^(0+128)
 10106  17E2                     l10103:	
 10107                           ;prog.c: 655: while(Symb[i]!=255 && position<17){
 10108                           
 10109  17E2  083C               	movf	SendArrayToLCD@i^(0+128),w
 10110  17E3  073B               	addwf	SendArrayToLCD@Symb^(0+128),w
 10111  17E4  00BA               	movwf	??_SendArrayToLCD^(0+128)
 10112  17E5  0084               	movwf	4
 10113  17E6  1783               	bsf	3,7	;select IRP bank2
 10114  17E7  0800               	movf	0,w
 10115  17E8  3AFF               	xorlw	255
 10116  17E9  1903               	skipnz
 10117  17EA  0008               	return
 10118  17EB  3011               	movlw	17
 10119  17EC  0239               	subwf	SendArrayToLCD@position^(0+128),w
 10120  17ED  1803               	btfsc	3,0
 10121  17EE  0008               	return
 10122                           
 10123                           ;prog.c: 656: setDigit(line, position, Symb[i]);
 10124  17EF  0839               	movf	SendArrayToLCD@position^(0+128),w
 10125  17F0  00AE               	movwf	?_setDigit^(0+128)
 10126  17F1  083C               	movf	SendArrayToLCD@i^(0+128),w
 10127  17F2  073B               	addwf	SendArrayToLCD@Symb^(0+128),w
 10128  17F3  00BA               	movwf	??_SendArrayToLCD^(0+128)
 10129  17F4  0084               	movwf	4
 10130  17F5  0800               	movf	0,w
 10131  17F6  00AF               	movwf	(?_setDigit^(0+128)+1)
 10132  17F7  0838               	movf	SendArrayToLCD@line^(0+128),w
 10133  17F8  265C  160A  118A   	fcall	_setDigit
 10134                           
 10135                           ;prog.c: 657: i++;
 10136  17FB  0ABC               	incf	SendArrayToLCD@i^(0+128),f
 10137  17FC  1903               	skipnz
 10138  17FD  0ABD               	incf	(SendArrayToLCD@i+1)^(0+128),f
 10139                           
 10140                           ;prog.c: 658: position++;
 10141  17FE  0AB9               	incf	SendArrayToLCD@position^(0+128),f
 10142  17FF  2FE2               	goto	l10103
 10143  1800                     __end_of_SendArrayToLCD:	
 10144                           
 10145                           	psect	text2259
 10146  19A6                     __ptext2259:	
 10147 ;; =============== function _TimesToIndicator ends ============
 10148                           
 10149                           
 10150 ;; *************** function _FindCell *****************
 10151 ;; Defined at:
 10152 ;;		line 764 in file "prog.c"
 10153 ;; Parameters:    Size  Location     Type
 10154 ;;  adressStart     1    wreg     unsigned char 
 10155 ;;  New             1    3[BANK1 ] unsigned char 
 10156 ;;  previous        1    4[BANK1 ] unsigned char 
 10157 ;; Auto vars:     Size  Location     Type
 10158 ;;  adressStart     1    9[BANK1 ] unsigned char 
 10159 ;;  D               1    8[BANK1 ] unsigned char 
 10160 ;;  adress          1   10[BANK1 ] unsigned char 
 10161 ;;  adressNew       1    7[BANK1 ] unsigned char 
 10162 ;; Return value:  Size  Location     Type
 10163 ;;                  1    wreg      unsigned char 
 10164 ;; Registers used:
 10165 ;;		wreg, status,2, status,0, pclath, cstack
 10166 ;; Tracked objects:
 10167 ;;		On entry : 20/160
 10168 ;;		On exit  : 60/20
 10169 ;;		Unchanged: FFE00/0
 10170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10171 ;;      Params:         0       0       2       0       0
 10172 ;;      Locals:         0       0       6       0       0
 10173 ;;      Temps:          0       0       0       0       0
 10174 ;;      Totals:         0       0       8       0       0
 10175 ;;Total ram usage:        8 bytes
 10176 ;; Hardware stack levels used:    1
 10177 ;; Hardware stack levels required when called:    5
 10178 ;; This function calls:
 10179 ;;		_EERD
 10180 ;; This function is called by:
 10181 ;;		_RefreshSchedulerIndicator
 10182 ;;		_Scheduler
 10183 ;; This function uses a non-reentrant model
 10184 ;;
 10185  19A6                     _FindCell:	
 10186                           
 10187 ;; hardware stack exceeded
 10188                           ; Regs used in _FindCell: [wreg+status,2+status,0+pclath+cstack]
 10189                           ;FindCell@adressStart stored from wreg
 10190  19A6  1303               	bcf	3,6	;RP1=0, select bank1
 10191  19A7  00A9               	movwf	FindCell@adressStart^(0+128)
 10192                           
 10193                           ;prog.c: 765: if(adressStart==240)adressStart=236;
 10194  19A8  3AF0               	xorlw	240
 10195  19A9  1D03               	skipz
 10196  19AA  29AD               	goto	l1062
 10197  19AB  30EC               	movlw	236
 10198  19AC  00A9               	movwf	FindCell@adressStart^(0+128)
 10199  19AD                     l1062:	
 10200                           
 10201                           ;prog.c: 766: unsigned char adress = adressStart;
 10202  19AD  0829               	movf	FindCell@adressStart^(0+128),w
 10203  19AE  00AA               	movwf	FindCell@adress^(0+128)
 10204                           
 10205                           ;prog.c: 767: unsigned char adressNew = 240;
 10206  19AF  30F0               	movlw	240
 10207  19B0  00A7               	movwf	FindCell@adressNew^(0+128)
 10208  19B1                     l10223:	
 10209                           
 10210                           ;prog.c: 769: if(!previous){
 10211  19B1  08A4               	movf	FindCell@previous^(0+128),f
 10212  19B2  1D03               	skipz
 10213  19B3  29BD               	goto	l10231
 10214                           
 10215                           ;prog.c: 770: adress==236 ? adress=0 : adress+=4;
 10216  19B4  082A               	movf	FindCell@adress^(0+128),w
 10217  19B5  3AEC               	xorlw	236
 10218  19B6  1D03               	skipz
 10219  19B7  29BA               	goto	l10229
 10220  19B8  01AA               	clrf	FindCell@adress^(0+128)
 10221  19B9  29C5               	goto	l10237
 10222  19BA                     l10229:	
 10223  19BA  3004               	movlw	4
 10224  19BB  07AA               	addwf	FindCell@adress^(0+128),f
 10225  19BC  29C5               	goto	l10237
 10226  19BD                     l10231:	
 10227                           
 10228                           ;prog.c: 772: adress==0 ? adress=236 : adress-=4;
 10229  19BD  08AA               	movf	FindCell@adress^(0+128),f
 10230  19BE  1D03               	skipz
 10231  19BF  29C3               	goto	l10235
 10232  19C0  30EC               	movlw	236
 10233  19C1  00AA               	movwf	FindCell@adress^(0+128)
 10234  19C2  29C5               	goto	l10237
 10235  19C3                     l10235:	
 10236  19C3  3004               	movlw	4
 10237  19C4  02AA               	subwf	FindCell@adress^(0+128),f
 10238  19C5                     l10237:	
 10239                           
 10240                           ;prog.c: 773: }
 10241                           ;prog.c: 774: unsigned char D = EERD(adress+2);
 10242  19C5  082A               	movf	FindCell@adress^(0+128),w
 10243  19C6  3E02               	addlw	2
 10244  19C7  120A  118A  27E5   	fcall	_EERD
      +       160A  158A         
 10245  19CC  00A8               	movwf	FindCell@D^(0+128)
 10246                           
 10247                           ;prog.c: 775: if(New!=1 ? D!=0xFF : D==0xFF){
 10248  19CD  0B23               	decfsz	FindCell@New^(0+128),w
 10249  19CE  29D7               	goto	l10243
 10250  19CF  0828               	movf	FindCell@D^(0+128),w
 10251  19D0  3AFF               	xorlw	255
 10252  19D1  3000               	movlw	0
 10253  19D2  1903               	skipnz
 10254  19D3  3001               	movlw	1
 10255  19D4  00A5               	movwf	_FindCell$1365^(0+128)
 10256  19D5  01A6               	clrf	(_FindCell$1365+1)^(0+128)
 10257  19D6  29DE               	goto	l1078
 10258  19D7                     l10243:	
 10259  19D7  0828               	movf	FindCell@D^(0+128),w
 10260  19D8  3AFF               	xorlw	255
 10261  19D9  3000               	movlw	0
 10262  19DA  1D03               	skipz
 10263  19DB  3001               	movlw	1
 10264  19DC  00A5               	movwf	_FindCell$1365^(0+128)
 10265  19DD  01A6               	clrf	(_FindCell$1365+1)^(0+128)
 10266  19DE                     l1078:	
 10267  19DE  0826               	movf	(_FindCell$1365+1)^(0+128),w
 10268  19DF  0425               	iorwf	_FindCell$1365^(0+128),w
 10269  19E0  1903               	skipnz
 10270  19E1  29E5               	goto	l10247
 10271                           
 10272                           ;prog.c: 776: adressNew = adress;
 10273  19E2  082A               	movf	FindCell@adress^(0+128),w
 10274  19E3  00A7               	movwf	FindCell@adressNew^(0+128)
 10275                           
 10276                           ;prog.c: 777: break;
 10277  19E4  29E9               	goto	l10249
 10278  19E5                     l10247:	
 10279                           
 10280                           ;prog.c: 778: }
 10281                           ;prog.c: 779: }while(adress!=adressStart);
 10282  19E5  082A               	movf	FindCell@adress^(0+128),w
 10283  19E6  0629               	xorwf	FindCell@adressStart^(0+128),w
 10284  19E7  1D03               	skipz
 10285  19E8  29B1               	goto	l10223
 10286  19E9                     l10249:	
 10287                           
 10288                           ;prog.c: 780: return adressNew;
 10289  19E9  0827               	movf	FindCell@adressNew^(0+128),w
 10290  19EA  0008               	return
 10291  19EB                     __end_of_FindCell:	
 10292                           
 10293                           	psect	text2262
 10294  1B1D                     __ptext2262:	
 10295 ;; =============== function _WriteFourBytesEE ends ============
 10296                           
 10297                           
 10298 ;; *************** function _WriteTime *****************
 10299 ;; Defined at:
 10300 ;;		line 1413 in file "prog.c"
 10301 ;; Parameters:    Size  Location     Type
 10302 ;;  Minutes         1    wreg     unsigned char 
 10303 ;;  Hours           1   12[BANK1 ] unsigned char 
 10304 ;;  DayOfWeek       1   13[BANK1 ] unsigned char 
 10305 ;; Auto vars:     Size  Location     Type
 10306 ;;  Minutes         1   26[BANK1 ] unsigned char 
 10307 ;;  INTCON_BUP      1   27[BANK1 ] volatile unsigned char 
 10308 ;; Return value:  Size  Location     Type
 10309 ;;		None               void
 10310 ;; Registers used:
 10311 ;;		wreg, status,2, status,0, pclath, cstack
 10312 ;; Tracked objects:
 10313 ;;		On entry : 160/120
 10314 ;;		On exit  : 60/20
 10315 ;;		Unchanged: FFE00/0
 10316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10317 ;;      Params:         0       0       2       0       0
 10318 ;;      Locals:         0       0       2       0       0
 10319 ;;      Temps:          0       0      12       0       0
 10320 ;;      Totals:         0       0      16       0       0
 10321 ;;Total ram usage:       16 bytes
 10322 ;; Hardware stack levels used:    1
 10323 ;; Hardware stack levels required when called:    5
 10324 ;; This function calls:
 10325 ;;		_I2CInit
 10326 ;;		_I2CStart
 10327 ;;		_I2CSend
 10328 ;;		_I2CStop
 10329 ;;		___lmul
 10330 ;; This function is called by:
 10331 ;;		_TimeEdit
 10332 ;; This function uses a non-reentrant model
 10333 ;;
 10334  1B1D                     _WriteTime:	
 10335                           
 10336                           ; Regs used in _WriteTime: [wreg+status,2+status,0+pclath+cstack]
 10337                           ;WriteTime@Minutes stored from wreg
 10338  1B1D  00BA               	movwf	WriteTime@Minutes^(0+128)
 10339                           
 10340                           ;prog.c: 1415: volatile unsigned char INTCON_BUP = INTCON;
 10341  1B1E  080B               	movf	11,w	;volatile
 10342  1B1F  00BB               	movwf	WriteTime@INTCON_BUP^(0+128)	;volatile
 10343                           
 10344                           ;prog.c: 1416: GIE = 0;
 10345  1B20  138B               	bcf	11,7
 10346  1B21  0064               	clrwdt	;#
 10347                           
 10348                           ;prog.c: 1419: I2CInit();
 10349  1B22  23F7  160A  158A   	fcall	_I2CInit
 10350                           
 10351                           ;prog.c: 1420: I2CStart();
 10352  1B25  2403  160A  158A   	fcall	_I2CStart
 10353                           
 10354                           ;prog.c: 1421: I2CSend(0xD0);
 10355  1B28  30D0               	movlw	208
 10356  1B29  23E8  160A  158A   	fcall	_I2CSend
 10357                           
 10358                           ;prog.c: 1422: I2CSend(0x00);
 10359  1B2C  3000               	movlw	0
 10360  1B2D  23E8  160A  158A   	fcall	_I2CSend
 10361                           
 10362                           ;prog.c: 1424: I2CSend(0x00);
 10363  1B30  3000               	movlw	0
 10364  1B31  23E8  160A  158A   	fcall	_I2CSend
 10365                           
 10366                           ;prog.c: 1425: I2CSend(Minutes);
 10367  1B34  083A               	movf	WriteTime@Minutes^(0+128),w
 10368  1B35  23E8  160A  158A   	fcall	_I2CSend
 10369                           
 10370                           ;prog.c: 1426: I2CSend(Hours);
 10371  1B38  082C               	movf	WriteTime@Hours^(0+128),w
 10372  1B39  23E8  160A  158A   	fcall	_I2CSend
 10373                           
 10374                           ;prog.c: 1427: I2CSend(DayOfWeek);
 10375  1B3C  082D               	movf	WriteTime@DayOfWeek^(0+128),w
 10376  1B3D  23E8  160A  158A   	fcall	_I2CSend
 10377                           
 10378                           ;prog.c: 1428: I2CSend(cDays);
 10379  1B40  1283               	bcf	3,5	;RP0=0, select bank0
 10380  1B41  0863               	movf	_cDays,w
 10381  1B42  23E8  160A  158A   	fcall	_I2CSend
 10382                           
 10383                           ;prog.c: 1429: I2CSend(cMonths);
 10384  1B45  1283               	bcf	3,5	;RP0=0, select bank0
 10385  1B46  0864               	movf	_cMonths,w
 10386  1B47  23E8  160A  158A   	fcall	_I2CSend
 10387                           
 10388                           ;prog.c: 1430: I2CSend(cYears);
 10389  1B4A  3016               	movlw	22
 10390  1B4B  23E8  160A  158A   	fcall	_I2CSend
 10391                           
 10392                           ;prog.c: 1431: I2CSend(0b00010000);
 10393  1B4E  3010               	movlw	16
 10394  1B4F  23E8  160A  158A   	fcall	_I2CSend
 10395                           
 10396                           ;prog.c: 1433: I2CStop();
 10397  1B52  2407               	fcall	_I2CStop
 10398                           
 10399                           ;prog.c: 1435: Clock = ( (long int)Minutes * 60
 10400                           ;prog.c: 1436: + (long int)Hours * 3600
 10401                           ;prog.c: 1437: + ((long int)DayOfWeek - 1) * 86400) * 100;
 10402  1B53  3080               	movlw	128
 10403  1B54  00AE               	movwf	??_WriteTime^(0+128)
 10404  1B55  30AE               	movlw	174
 10405  1B56  00AF               	movwf	(??_WriteTime^(0+128)+1)
 10406  1B57  30FE               	movlw	254
 10407  1B58  00B0               	movwf	(??_WriteTime^(0+128)+2)
 10408  1B59  30FF               	movlw	255
 10409  1B5A  00B1               	movwf	(??_WriteTime^(0+128)+3)
 10410  1B5B  082C               	movf	WriteTime@Hours^(0+128),w
 10411  1B5C  00A0               	movwf	?___lmul^(0+128)
 10412  1B5D  300E               	movlw	14
 10413  1B5E  01A1               	clrf	(?___lmul+1)^(0+128)
 10414  1B5F  01A2               	clrf	(?___lmul+2)^(0+128)
 10415  1B60  01A3               	clrf	(?___lmul+3)^(0+128)
 10416  1B61  01A7               	clrf	((?___lmul+3)^(0+128)+4)
 10417  1B62  01A6               	clrf	((?___lmul+2)^(0+128)+4)
 10418  1B63  00A5               	movwf	((?___lmul+1)^(0+128)+4)
 10419  1B64  3010               	movlw	16
 10420  1B65  00A4               	movwf	(?___lmul^(0+128)+4)
 10421  1B66  160A  158A  26AC   	fcall	___lmul
      +       160A  158A         
 10422  1B6B  0820               	movf	?___lmul^(0+128),w
 10423  1B6C  00B2               	movwf	(??_WriteTime+4)^(0+128)
 10424  1B6D  0821               	movf	(?___lmul+1)^(0+128),w
 10425  1B6E  00B3               	movwf	((??_WriteTime+4)^(0+128)+1)
 10426  1B6F  0822               	movf	(?___lmul+2)^(0+128),w
 10427  1B70  00B4               	movwf	((??_WriteTime+4)^(0+128)+2)
 10428  1B71  0823               	movf	(?___lmul+3)^(0+128),w
 10429  1B72  00B5               	movwf	((??_WriteTime+4)^(0+128)+3)
 10430  1B73  082D               	movf	WriteTime@DayOfWeek^(0+128),w
 10431  1B74  00A0               	movwf	?___lmul^(0+128)
 10432  1B75  3001               	movlw	1
 10433  1B76  01A1               	clrf	(?___lmul+1)^(0+128)
 10434  1B77  01A2               	clrf	(?___lmul+2)^(0+128)
 10435  1B78  01A3               	clrf	(?___lmul+3)^(0+128)
 10436  1B79  01A7               	clrf	((?___lmul+3)^(0+128)+4)
 10437  1B7A  00A6               	movwf	((?___lmul+2)^(0+128)+4)
 10438  1B7B  3051               	movlw	81
 10439  1B7C  00A5               	movwf	((?___lmul+1)^(0+128)+4)
 10440  1B7D  3080               	movlw	128
 10441  1B7E  00A4               	movwf	(?___lmul^(0+128)+4)
 10442  1B7F  160A  158A  26AC   	fcall	___lmul
      +       160A  158A         
 10443  1B84  0820               	movf	?___lmul^(0+128),w
 10444  1B85  00B6               	movwf	(??_WriteTime+8)^(0+128)
 10445  1B86  0821               	movf	(?___lmul+1)^(0+128),w
 10446  1B87  00B7               	movwf	((??_WriteTime+8)^(0+128)+1)
 10447  1B88  0822               	movf	(?___lmul+2)^(0+128),w
 10448  1B89  00B8               	movwf	((??_WriteTime+8)^(0+128)+2)
 10449  1B8A  0823               	movf	(?___lmul+3)^(0+128),w
 10450  1B8B  00B9               	movwf	((??_WriteTime+8)^(0+128)+3)
 10451  1B8C  083A               	movf	WriteTime@Minutes^(0+128),w
 10452  1B8D  00A0               	movwf	?___lmul^(0+128)
 10453  1B8E  303C               	movlw	60
 10454  1B8F  01A1               	clrf	(?___lmul+1)^(0+128)
 10455  1B90  01A2               	clrf	(?___lmul+2)^(0+128)
 10456  1B91  01A3               	clrf	(?___lmul+3)^(0+128)
 10457  1B92  00A4               	movwf	(?___lmul^(0+128)+4)
 10458  1B93  01A5               	clrf	((?___lmul+1)^(0+128)+4)
 10459  1B94  01A6               	clrf	((?___lmul+2)^(0+128)+4)
 10460  1B95  01A7               	clrf	((?___lmul+3)^(0+128)+4)
 10461  1B96  160A  158A  26AC   	fcall	___lmul
      +       160A  158A         
 10462  1B9B  0820               	movf	?___lmul^(0+128),w
 10463  1B9C  07B6               	addwf	(??_WriteTime+8)^(0+128),f
 10464  1B9D  0821               	movf	(?___lmul+1)^(0+128),w
 10465  1B9E  1803               	skipnc
 10466  1B9F  0F21               	incfsz	(?___lmul+1)^(0+128),w
 10467  1BA0  07B7               	addwf	((??_WriteTime+8)^(0+128)+1),f
 10468  1BA1  0822               	movf	(?___lmul+2)^(0+128),w
 10469  1BA2  1803               	skipnc
 10470  1BA3  0F22               	incfsz	(?___lmul+2)^(0+128),w
 10471  1BA4  07B8               	addwf	((??_WriteTime+8)^(0+128)+2),f
 10472  1BA5  0823               	movf	(?___lmul+3)^(0+128),w
 10473  1BA6  1803               	skipnc
 10474  1BA7  0A23               	incf	(?___lmul+3)^(0+128),w
 10475  1BA8  07B9               	addwf	((??_WriteTime+8)^(0+128)+3),f
 10476  1BA9  0836               	movf	(??_WriteTime+8)^(0+128),w
 10477  1BAA  07B2               	addwf	(??_WriteTime+4)^(0+128),f
 10478  1BAB  0837               	movf	(??_WriteTime+9)^(0+128),w
 10479  1BAC  1803               	skipnc
 10480  1BAD  0F37               	incfsz	(??_WriteTime+9)^(0+128),w
 10481  1BAE  07B3               	addwf	((??_WriteTime+4)^(0+128)+1),f
 10482  1BAF  0838               	movf	(??_WriteTime+10)^(0+128),w
 10483  1BB0  1803               	skipnc
 10484  1BB1  0F38               	incfsz	(??_WriteTime+10)^(0+128),w
 10485  1BB2  07B4               	addwf	((??_WriteTime+4)^(0+128)+2),f
 10486  1BB3  0839               	movf	(??_WriteTime+11)^(0+128),w
 10487  1BB4  1803               	skipnc
 10488  1BB5  0A39               	incf	(??_WriteTime+11)^(0+128),w
 10489  1BB6  07B5               	addwf	((??_WriteTime+4)^(0+128)+3),f
 10490  1BB7  0832               	movf	(??_WriteTime+4)^(0+128),w
 10491  1BB8  07AE               	addwf	??_WriteTime^(0+128),f
 10492  1BB9  0833               	movf	(??_WriteTime+5)^(0+128),w
 10493  1BBA  1803               	skipnc
 10494  1BBB  0F33               	incfsz	(??_WriteTime+5)^(0+128),w
 10495  1BBC  07AF               	addwf	(??_WriteTime^(0+128)+1),f
 10496  1BBD  0834               	movf	(??_WriteTime+6)^(0+128),w
 10497  1BBE  1803               	skipnc
 10498  1BBF  0F34               	incfsz	(??_WriteTime+6)^(0+128),w
 10499  1BC0  07B0               	addwf	(??_WriteTime^(0+128)+2),f
 10500  1BC1  0835               	movf	(??_WriteTime+7)^(0+128),w
 10501  1BC2  1803               	skipnc
 10502  1BC3  0A35               	incf	(??_WriteTime+7)^(0+128),w
 10503  1BC4  07B1               	addwf	(??_WriteTime^(0+128)+3),f
 10504  1BC5  0831               	movf	(??_WriteTime+3)^(0+128),w
 10505  1BC6  00A3               	movwf	(?___lmul+3)^(0+128)
 10506  1BC7  0830               	movf	(??_WriteTime+2)^(0+128),w
 10507  1BC8  00A2               	movwf	(?___lmul+2)^(0+128)
 10508  1BC9  082F               	movf	(??_WriteTime+1)^(0+128),w
 10509  1BCA  00A1               	movwf	(?___lmul+1)^(0+128)
 10510  1BCB  082E               	movf	??_WriteTime^(0+128),w
 10511  1BCC  00A0               	movwf	?___lmul^(0+128)
 10512  1BCD  3064               	movlw	100
 10513  1BCE  00A4               	movwf	(?___lmul^(0+128)+4)
 10514  1BCF  01A5               	clrf	((?___lmul+1)^(0+128)+4)
 10515  1BD0  01A6               	clrf	((?___lmul+2)^(0+128)+4)
 10516  1BD1  01A7               	clrf	((?___lmul+3)^(0+128)+4)
 10517  1BD2  160A  158A  26AC   	fcall	___lmul
 10518  1BD5  0823               	movf	(?___lmul+3)^(0+128),w
 10519  1BD6  1703               	bsf	3,6	;RP1=1, select bank3
 10520  1BD7  00DD               	movwf	(_Clock+3)^(0+384)
 10521  1BD8  1303               	bcf	3,6	;RP1=0, select bank1
 10522  1BD9  0822               	movf	(?___lmul+2)^(0+128),w
 10523  1BDA  1703               	bsf	3,6	;RP1=1, select bank3
 10524  1BDB  00DC               	movwf	(_Clock+2)^(0+384)
 10525  1BDC  1303               	bcf	3,6	;RP1=0, select bank1
 10526  1BDD  0821               	movf	(?___lmul+1)^(0+128),w
 10527  1BDE  1703               	bsf	3,6	;RP1=1, select bank3
 10528  1BDF  00DB               	movwf	(_Clock+1)^(0+384)
 10529  1BE0  1303               	bcf	3,6	;RP1=0, select bank1
 10530  1BE1  0820               	movf	?___lmul^(0+128),w
 10531  1BE2  1703               	bsf	3,6	;RP1=1, select bank3
 10532  1BE3  00DA               	movwf	_Clock^(0+384)
 10533                           
 10534                           ;prog.c: 1439: INTCON = INTCON_BUP;
 10535  1BE4  1303               	bcf	3,6	;RP1=0, select bank1
 10536  1BE5  083B               	movf	WriteTime@INTCON_BUP^(0+128),w	;volatile
 10537  1BE6  008B               	movwf	11	;volatile
 10538  1BE7  0008               	return
 10539  1BE8                     __end_of_WriteTime:	
 10540  1BE8                     __ptext2278:	
 10541 ;; =============== function _I2CStop ends ============
 10542                           
 10543                           
 10544 ;; *************** function _I2CSend *****************
 10545 ;; Defined at:
 10546 ;;		line 1472 in file "prog.c"
 10547 ;; Parameters:    Size  Location     Type
 10548 ;;  dat             1    wreg     unsigned char 
 10549 ;; Auto vars:     Size  Location     Type
 10550 ;;  dat             1    0[BANK1 ] unsigned char 
 10551 ;; Return value:  Size  Location     Type
 10552 ;;		None               void
 10553 ;; Registers used:
 10554 ;;		wreg, status,2
 10555 ;; Tracked objects:
 10556 ;;		On entry : 40/120
 10557 ;;		On exit  : 60/120
 10558 ;;		Unchanged: FFF9F/0
 10559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10560 ;;      Params:         0       0       0       0       0
 10561 ;;      Locals:         0       0       1       0       0
 10562 ;;      Temps:          0       0       0       0       0
 10563 ;;      Totals:         0       0       1       0       0
 10564 ;;Total ram usage:        1 bytes
 10565 ;; Hardware stack levels used:    1
 10566 ;; Hardware stack levels required when called:    4
 10567 ;; This function calls:
 10568 ;;		Nothing
 10569 ;; This function is called by:
 10570 ;;		_WriteTime
 10571 ;; This function uses a non-reentrant model
 10572 ;;
 10573  1BE8                     _I2CSend:	
 10574                           
 10575                           ; Regs used in _I2CSend: [wreg+status,2]
 10576                           ;I2CSend@dat stored from wreg
 10577  1BE8  1683               	bsf	3,5	;RP0=1, select bank1
 10578  1BE9  00A0               	movwf	I2CSend@dat^(0+128)
 10579                           
 10580                           ;prog.c: 1473: SSPBUF = dat;
 10581  1BEA  0820               	movf	I2CSend@dat^(0+128),w
 10582  1BEB  1283               	bcf	3,5	;RP0=0, select bank0
 10583  1BEC  0093               	movwf	19	;volatile
 10584  1BED                     l1401:	
 10585                           ;prog.c: 1474: while(BF);
 10586                           
 10587  1BED  1683               	bsf	3,5	;RP0=1, select bank1
 10588  1BEE  1814               	btfsc	20,0
 10589  1BEF  2BED               	goto	l1401
 10590  1BF0                     l9859:	
 10591  1BF0  0811               	movf	17,w
 10592  1BF1  391F               	andlw	31
 10593  1BF2  1D03               	btfss	3,2
 10594  1BF3  2BF0               	goto	l9859
 10595  1BF4  1D14               	btfss	20,2
 10596  1BF5  0008               	return
 10597  1BF6  2BF0               	goto	l9859
 10598  1BF7                     __end_of_I2CSend:	
 10599  1BF7                     __ptext2280:	
 10600 ;; =============== function _I2CStart ends ============
 10601                           
 10602                           
 10603 ;; *************** function _I2CInit *****************
 10604 ;; Defined at:
 10605 ;;		line 1441 in file "prog.c"
 10606 ;; Parameters:    Size  Location     Type
 10607 ;;		None
 10608 ;; Auto vars:     Size  Location     Type
 10609 ;;		None
 10610 ;; Return value:  Size  Location     Type
 10611 ;;		None               void
 10612 ;; Registers used:
 10613 ;;		wreg
 10614 ;; Tracked objects:
 10615 ;;		On entry : 0/120
 10616 ;;		On exit  : 60/120
 10617 ;;		Unchanged: FFF9F/0
 10618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10619 ;;      Params:         0       0       0       0       0
 10620 ;;      Locals:         0       0       0       0       0
 10621 ;;      Temps:          0       0       0       0       0
 10622 ;;      Totals:         0       0       0       0       0
 10623 ;;Total ram usage:        0 bytes
 10624 ;; Hardware stack levels used:    1
 10625 ;; Hardware stack levels required when called:    4
 10626 ;; This function calls:
 10627 ;;		Nothing
 10628 ;; This function is called by:
 10629 ;;		_WriteTime
 10630 ;; This function uses a non-reentrant model
 10631 ;;
 10632  1BF7                     _I2CInit:	
 10633                           
 10634                           ;prog.c: 1442: TRISC3 = 1;
 10635                           
 10636                           ; Regs used in _I2CInit: [wreg]
 10637  1BF7  1683               	bsf	3,5	;RP0=1, select bank1
 10638  1BF8  1303               	bcf	3,6	;RP1=0, select bank1
 10639  1BF9  1587               	bsf	7,3
 10640                           
 10641                           ;prog.c: 1443: TRISC4 = 1;
 10642  1BFA  1607               	bsf	7,4
 10643                           
 10644                           ;prog.c: 1444: SSPSTAT |= 0x80;
 10645  1BFB  1794               	bsf	20,7	;volatile
 10646                           
 10647                           ;prog.c: 1445: SSPCON = 0x28;
 10648  1BFC  3028               	movlw	40
 10649  1BFD  1283               	bcf	3,5	;RP0=0, select bank0
 10650  1BFE  0094               	movwf	20	;volatile
 10651                           
 10652                           ;prog.c: 1446: SSPADD = 0x27;
 10653  1BFF  3027               	movlw	39
 10654  1C00  1683               	bsf	3,5	;RP0=1, select bank1
 10655  1C01  0093               	movwf	19	;volatile
 10656  1C02  0008               	return
 10657  1C03                     __end_of_I2CInit:	
 10658  1C03                     __ptext2279:	
 10659 ;; =============== function _I2CSend ends ============
 10660                           
 10661                           
 10662 ;; *************** function _I2CStart *****************
 10663 ;; Defined at:
 10664 ;;		line 1448 in file "prog.c"
 10665 ;; Parameters:    Size  Location     Type
 10666 ;;		None
 10667 ;; Auto vars:     Size  Location     Type
 10668 ;;		None
 10669 ;; Return value:  Size  Location     Type
 10670 ;;		None               void
 10671 ;; Registers used:
 10672 ;;		None
 10673 ;; Tracked objects:
 10674 ;;		On entry : 60/120
 10675 ;;		On exit  : 60/120
 10676 ;;		Unchanged: FFF9F/0
 10677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10678 ;;      Params:         0       0       0       0       0
 10679 ;;      Locals:         0       0       0       0       0
 10680 ;;      Temps:          0       0       0       0       0
 10681 ;;      Totals:         0       0       0       0       0
 10682 ;;Total ram usage:        0 bytes
 10683 ;; Hardware stack levels used:    1
 10684 ;; Hardware stack levels required when called:    4
 10685 ;; This function calls:
 10686 ;;		Nothing
 10687 ;; This function is called by:
 10688 ;;		_WriteTime
 10689 ;; This function uses a non-reentrant model
 10690 ;;
 10691  1C03                     _I2CStart:	
 10692                           
 10693                           ;prog.c: 1449: SEN = 1;
 10694                           
 10695                           ; Regs used in _I2CStart: []
 10696  1C03  1411               	bsf	17,0
 10697  1C04                     l1371:	
 10698                           ;prog.c: 1450: while(SEN);
 10699                           
 10700  1C04  1C11               	btfss	17,0
 10701  1C05  0008               	return
 10702  1C06  2C04               	goto	l1371
 10703  1C07                     __end_of_I2CStart:	
 10704  1C07                     __ptext2277:	
 10705 ;; =============== function ___wmul ends ============
 10706                           
 10707                           
 10708 ;; *************** function _I2CStop *****************
 10709 ;; Defined at:
 10710 ;;		line 1453 in file "prog.c"
 10711 ;; Parameters:    Size  Location     Type
 10712 ;;		None
 10713 ;; Auto vars:     Size  Location     Type
 10714 ;;		None
 10715 ;; Return value:  Size  Location     Type
 10716 ;;		None               void
 10717 ;; Registers used:
 10718 ;;		None
 10719 ;; Tracked objects:
 10720 ;;		On entry : 60/120
 10721 ;;		On exit  : 60/120
 10722 ;;		Unchanged: FFF9F/0
 10723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10724 ;;      Params:         0       0       0       0       0
 10725 ;;      Locals:         0       0       0       0       0
 10726 ;;      Temps:          0       0       0       0       0
 10727 ;;      Totals:         0       0       0       0       0
 10728 ;;Total ram usage:        0 bytes
 10729 ;; Hardware stack levels used:    1
 10730 ;; Hardware stack levels required when called:    4
 10731 ;; This function calls:
 10732 ;;		Nothing
 10733 ;; This function is called by:
 10734 ;;		_WriteTime
 10735 ;; This function uses a non-reentrant model
 10736 ;;
 10737  1C07                     _I2CStop:	
 10738                           
 10739                           ;prog.c: 1454: PEN = 1;
 10740                           
 10741                           ; Regs used in _I2CStop: []
 10742  1C07  1511               	bsf	17,2
 10743  1C08                     l1377:	
 10744                           ;prog.c: 1455: while(PEN);
 10745                           
 10746  1C08  1D11               	btfss	17,2
 10747  1C09  0008               	return
 10748  1C0A  2C08               	goto	l1377
 10749  1C0B                     __end_of_I2CStop:	
 10750                           
 10751                           	psect	text2264
 10752  18E0                     __ptext2264:	
 10753 ;; =============== function _ReIndTimeEdit ends ============
 10754                           
 10755                           
 10756 ;; *************** function _ParseTime *****************
 10757 ;; Defined at:
 10758 ;;		line 1082 in file "prog.c"
 10759 ;; Parameters:    Size  Location     Type
 10760 ;;  TimeValue       4   14[BANK1 ] long 
 10761 ;;  Time            1   18[BANK1 ] PTR unsigned int 
 10762 ;;		 -> TimeToInd@Time(2), 
 10763 ;;  Day             1   19[BANK1 ] PTR unsigned char 
 10764 ;;		 -> TimeToInd@Day(1), 
 10765 ;; Auto vars:     Size  Location     Type
 10766 ;;  DayTime         2   22[BANK1 ] unsigned int 
 10767 ;; Return value:  Size  Location     Type
 10768 ;;		None               void
 10769 ;; Registers used:
 10770 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10771 ;; Tracked objects:
 10772 ;;		On entry : 60/120
 10773 ;;		On exit  : 160/120
 10774 ;;		Unchanged: FFE9F/0
 10775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10776 ;;      Params:         0       0       6       0       0
 10777 ;;      Locals:         0       0       2       0       0
 10778 ;;      Temps:          0       0       2       0       0
 10779 ;;      Totals:         0       0      10       0       0
 10780 ;;Total ram usage:       10 bytes
 10781 ;; Hardware stack levels used:    1
 10782 ;; Hardware stack levels required when called:    5
 10783 ;; This function calls:
 10784 ;;		___aldiv
 10785 ;;		___lwmod
 10786 ;;		___lwdiv
 10787 ;; This function is called by:
 10788 ;;		_TimeToInd
 10789 ;; This function uses a non-reentrant model
 10790 ;;
 10791  18E0                     _ParseTime:	
 10792                           
 10793                           ;prog.c: 1083: unsigned int DayTime = (unsigned int)(TimeValue/6000);
 10794                           
 10795                           ; Regs used in _ParseTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10796  18E0  3017               	movlw	23
 10797  18E1  01A3               	clrf	(?___aldiv+3)^(0+128)
 10798  18E2  01A2               	clrf	(?___aldiv+2)^(0+128)
 10799  18E3  00A1               	movwf	(?___aldiv+1)^(0+128)
 10800  18E4  3070               	movlw	112
 10801  18E5  00A0               	movwf	?___aldiv^(0+128)
 10802  18E6  0831               	movf	(ParseTime@TimeValue+3)^(0+128),w
 10803  18E7  00A7               	movwf	((?___aldiv+3)^(0+128)+4)
 10804  18E8  0830               	movf	(ParseTime@TimeValue+2)^(0+128),w
 10805  18E9  00A6               	movwf	((?___aldiv+2)^(0+128)+4)
 10806  18EA  082F               	movf	(ParseTime@TimeValue+1)^(0+128),w
 10807  18EB  00A5               	movwf	((?___aldiv+1)^(0+128)+4)
 10808  18EC  082E               	movf	ParseTime@TimeValue^(0+128),w
 10809  18ED  00A4               	movwf	(?___aldiv^(0+128)+4)
 10810  18EE  160A  118A  26B2   	fcall	___aldiv
      +       160A  158A         
 10811  18F3  0821               	movf	(?___aldiv^(0+128)+1),w
 10812  18F4  00B7               	movwf	(ParseTime@DayTime+1)^(0+128)
 10813  18F5  0820               	movf	?___aldiv^(0+128),w
 10814  18F6  00B6               	movwf	ParseTime@DayTime^(0+128)
 10815                           
 10816                           ;prog.c: 1084: *Time = DayTime%1440;
 10817  18F7  30A0               	movlw	160
 10818  18F8  00A0               	movwf	?___lwmod^(0+128)
 10819  18F9  3005               	movlw	5
 10820  18FA  00A1               	movwf	(?___lwmod^(0+128)+1)
 10821  18FB  0837               	movf	(ParseTime@DayTime+1)^(0+128),w
 10822  18FC  00A3               	movwf	((?___lwmod+1)^(0+128)+2)
 10823  18FD  0836               	movf	ParseTime@DayTime^(0+128),w
 10824  18FE  00A2               	movwf	(?___lwmod^(0+128)+2)
 10825  18FF  160A  118A  2790   	fcall	___lwmod
      +       160A  158A         
 10826  1904  0832               	movf	ParseTime@Time^(0+128),w
 10827  1905  0084               	movwf	4
 10828  1906  0820               	movf	?___lwmod^(0+128),w
 10829  1907  1783               	bsf	3,7	;select IRP bank2
 10830  1908  0080               	movwf	0
 10831  1909  0A84               	incf	4,f
 10832  190A  0821               	movf	(?___lwmod+1)^(0+128),w
 10833  190B  0080               	movwf	0
 10834                           
 10835                           ;prog.c: 1085: *Day = DayTime/1440 + 1;
 10836  190C  0833               	movf	ParseTime@Day^(0+128),w
 10837  190D  0084               	movwf	4
 10838  190E  30A0               	movlw	160
 10839  190F  00A0               	movwf	?___lwdiv^(0+128)
 10840  1910  3005               	movlw	5
 10841  1911  00A1               	movwf	(?___lwdiv^(0+128)+1)
 10842  1912  0837               	movf	(ParseTime@DayTime+1)^(0+128),w
 10843  1913  00A3               	movwf	((?___lwdiv+1)^(0+128)+2)
 10844  1914  0836               	movf	ParseTime@DayTime^(0+128),w
 10845  1915  00A2               	movwf	(?___lwdiv^(0+128)+2)
 10846  1916  160A  118A  27B4   	fcall	___lwdiv
 10847  1919  0820               	movf	?___lwdiv^(0+128),w
 10848  191A  00B4               	movwf	??_ParseTime^(0+128)
 10849  191B  0821               	movf	(?___lwdiv+1)^(0+128),w
 10850  191C  00B5               	movwf	(??_ParseTime^(0+128)+1)
 10851  191D  0A34               	incf	??_ParseTime^(0+128),w
 10852  191E  0080               	movwf	0
 10853  191F  0008               	return
 10854  1920                     __end_of_ParseTime:	
 10855                           
 10856                           	psect	text2267
 10857  1A54                     __ptext2267:	
 10858 ;; =============== function _SendArrayToLCD ends ============
 10859                           
 10860                           
 10861 ;; *************** function _NumericToIndicator *****************
 10862 ;; Defined at:
 10863 ;;		line 231 in file "prog.c"
 10864 ;; Parameters:    Size  Location     Type
 10865 ;;  n               4   24[BANK1 ] unsigned long 
 10866 ;;  displacement    1   28[BANK1 ] unsigned char 
 10867 ;; Auto vars:     Size  Location     Type
 10868 ;;		None
 10869 ;; Return value:  Size  Location     Type
 10870 ;;		None               void
 10871 ;; Registers used:
 10872 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10873 ;; Tracked objects:
 10874 ;;		On entry : 60/120
 10875 ;;		On exit  : 160/120
 10876 ;;		Unchanged: FFE9F/0
 10877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10878 ;;      Params:         0       0       5       0       0
 10879 ;;      Locals:         0       0       0       0       0
 10880 ;;      Temps:          0       0       0       0       0
 10881 ;;      Totals:         0       0       5       0       0
 10882 ;;Total ram usage:        5 bytes
 10883 ;; Hardware stack levels used:    1
 10884 ;; Hardware stack levels required when called:    5
 10885 ;; This function calls:
 10886 ;;		_clrInd
 10887 ;;		___llmod
 10888 ;;		_setDigit
 10889 ;;		___lldiv
 10890 ;; This function is called by:
 10891 ;;		_RefreshSchedulerIndicator
 10892 ;; This function uses a non-reentrant model
 10893 ;;
 10894  1A54                     _NumericToIndicator:	
 10895                           
 10896                           ;prog.c: 232: clrInd();
 10897                           
 10898 ;; hardware stack exceeded
 10899                           ; Regs used in _NumericToIndicator: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10900  1A54  120A  118A  2690   	fcall	_clrInd
      +       160A  158A         
 10901                           
 10902                           ;prog.c: 233: displacement++;
 10903  1A59  1683               	bsf	3,5	;RP0=1, select bank1
 10904  1A5A  0ABC               	incf	NumericToIndicator@displacement^(0+128),f
 10905  1A5B                     l10085:	
 10906                           
 10907                           ;prog.c: 235: setDigit(0,displacement, n%10);
 10908  1A5B  083C               	movf	NumericToIndicator@displacement^(0+128),w
 10909  1A5C  00AE               	movwf	?_setDigit^(0+128)
 10910  1A5D  300A               	movlw	10
 10911  1A5E  00A0               	movwf	?___llmod^(0+128)
 10912  1A5F  01A1               	clrf	(?___llmod+1)^(0+128)
 10913  1A60  01A2               	clrf	(?___llmod+2)^(0+128)
 10914  1A61  01A3               	clrf	(?___llmod+3)^(0+128)
 10915  1A62  083B               	movf	(NumericToIndicator@n+3)^(0+128),w
 10916  1A63  00A7               	movwf	((?___llmod+3)^(0+128)+4)
 10917  1A64  083A               	movf	(NumericToIndicator@n+2)^(0+128),w
 10918  1A65  00A6               	movwf	((?___llmod+2)^(0+128)+4)
 10919  1A66  0839               	movf	(NumericToIndicator@n+1)^(0+128),w
 10920  1A67  00A5               	movwf	((?___llmod+1)^(0+128)+4)
 10921  1A68  0838               	movf	NumericToIndicator@n^(0+128),w
 10922  1A69  00A4               	movwf	(?___llmod^(0+128)+4)
 10923  1A6A  2297               	fcall	___llmod
 10924  1A6B  0820               	movf	?___llmod^(0+128),w
 10925  1A6C  00AF               	movwf	(?_setDigit^(0+128)+1)
 10926  1A6D  3000               	movlw	0
 10927  1A6E  160A  118A  265C   	fcall	_setDigit
      +       160A  158A         
 10928                           
 10929                           ;prog.c: 236: n /=10;
 10930  1A73  300A               	movlw	10
 10931  1A74  00A0               	movwf	?___lldiv^(0+128)
 10932  1A75  01A1               	clrf	(?___lldiv+1)^(0+128)
 10933  1A76  01A2               	clrf	(?___lldiv+2)^(0+128)
 10934  1A77  01A3               	clrf	(?___lldiv+3)^(0+128)
 10935  1A78  083B               	movf	(NumericToIndicator@n+3)^(0+128),w
 10936  1A79  00A7               	movwf	((?___lldiv+3)^(0+128)+4)
 10937  1A7A  083A               	movf	(NumericToIndicator@n+2)^(0+128),w
 10938  1A7B  00A6               	movwf	((?___lldiv+2)^(0+128)+4)
 10939  1A7C  0839               	movf	(NumericToIndicator@n+1)^(0+128),w
 10940  1A7D  00A5               	movwf	((?___lldiv+1)^(0+128)+4)
 10941  1A7E  0838               	movf	NumericToIndicator@n^(0+128),w
 10942  1A7F  00A4               	movwf	(?___lldiv^(0+128)+4)
 10943  1A80  22D5  160A  158A   	fcall	___lldiv
 10944  1A83  0823               	movf	(?___lldiv+3)^(0+128),w
 10945  1A84  00BB               	movwf	(NumericToIndicator@n+3)^(0+128)
 10946  1A85  0822               	movf	(?___lldiv+2)^(0+128),w
 10947  1A86  00BA               	movwf	(NumericToIndicator@n+2)^(0+128)
 10948  1A87  0821               	movf	(?___lldiv+1)^(0+128),w
 10949  1A88  00B9               	movwf	(NumericToIndicator@n+1)^(0+128)
 10950  1A89  0820               	movf	?___lldiv^(0+128),w
 10951  1A8A  00B8               	movwf	NumericToIndicator@n^(0+128)
 10952  1A8B  300A               	movlw	10
 10953                           
 10954                           ;prog.c: 237: displacement++;
 10955  1A8C  0ABC               	incf	NumericToIndicator@displacement^(0+128),f
 10956                           
 10957                           ;prog.c: 238: }while((displacement<10)&(n>0));
 10958  1A8D  023C               	subwf	NumericToIndicator@displacement^(0+128),w
 10959  1A8E  1803               	skipnc
 10960  1A8F  0008               	return
 10961  1A90  083B               	movf	(NumericToIndicator@n+3)^(0+128),w
 10962  1A91  043A               	iorwf	(NumericToIndicator@n+2)^(0+128),w
 10963  1A92  0439               	iorwf	(NumericToIndicator@n+1)^(0+128),w
 10964  1A93  0438               	iorwf	NumericToIndicator@n^(0+128),w
 10965  1A94  1903               	btfsc	3,2
 10966  1A95  0008               	return
 10967  1A96  2A5B               	goto	l10085
 10968  1A97                     __end_of_NumericToIndicator:	
 10969  1A97                     __ptext2271:	
 10970 ;; =============== function ___lldiv ends ============
 10971                           
 10972                           
 10973 ;; *************** function ___llmod *****************
 10974 ;; Defined at:
 10975 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\llmod.c"
 10976 ;; Parameters:    Size  Location     Type
 10977 ;;  divisor         4    0[BANK1 ] unsigned long 
 10978 ;;  dividend        4    4[BANK1 ] unsigned long 
 10979 ;; Auto vars:     Size  Location     Type
 10980 ;;  counter         1    8[BANK1 ] unsigned char 
 10981 ;; Return value:  Size  Location     Type
 10982 ;;                  4    0[BANK1 ] unsigned long 
 10983 ;; Registers used:
 10984 ;;		wreg, status,2, status,0
 10985 ;; Tracked objects:
 10986 ;;		On entry : 60/120
 10987 ;;		On exit  : 160/120
 10988 ;;		Unchanged: FFE9F/0
 10989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10990 ;;      Params:         0       0       8       0       0
 10991 ;;      Locals:         0       0       1       0       0
 10992 ;;      Temps:          0       0       0       0       0
 10993 ;;      Totals:         0       0       9       0       0
 10994 ;;Total ram usage:        9 bytes
 10995 ;; Hardware stack levels used:    1
 10996 ;; Hardware stack levels required when called:    4
 10997 ;; This function calls:
 10998 ;;		Nothing
 10999 ;; This function is called by:
 11000 ;;		_NumericToIndicator
 11001 ;; This function uses a non-reentrant model
 11002 ;;
 11003  1A97                     ___llmod:	
 11004                           
 11005 ;; hardware stack exceeded
 11006                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 11007  1A97  0823               	movf	(___llmod@divisor+3)^(0+128),w
 11008  1A98  0422               	iorwf	(___llmod@divisor+2)^(0+128),w
 11009  1A99  0421               	iorwf	(___llmod@divisor+1)^(0+128),w
 11010  1A9A  0420               	iorwf	___llmod@divisor^(0+128),w
 11011  1A9B  1903               	skipnz
 11012  1A9C  2ACC               	goto	l9979
 11013  1A9D  01A8               	clrf	___llmod@counter^(0+128)
 11014  1A9E                     L29:	
 11015  1A9E  0AA8               	incf	___llmod@counter^(0+128),f
 11016  1A9F  1BA3               	btfsc	(___llmod@divisor+3)^(0+128),7
 11017  1AA0  2AA7               	goto	l9971
 11018  1AA1  1003               	clrc
 11019  1AA2  0DA0               	rlf	___llmod@divisor^(0+128),f
 11020  1AA3  0DA1               	rlf	(___llmod@divisor+1)^(0+128),f
 11021  1AA4  0DA2               	rlf	(___llmod@divisor+2)^(0+128),f
 11022  1AA5  0DA3               	rlf	(___llmod@divisor+3)^(0+128),f
 11023  1AA6  2A9E               	goto	L29
 11024  1AA7                     l9971:	
 11025  1AA7  0823               	movf	(___llmod@divisor+3)^(0+128),w
 11026  1AA8  0227               	subwf	(___llmod@dividend+3)^(0+128),w
 11027  1AA9  1D03               	skipz
 11028  1AAA  2AB5               	goto	u7415
 11029  1AAB  0822               	movf	(___llmod@divisor+2)^(0+128),w
 11030  1AAC  0226               	subwf	(___llmod@dividend+2)^(0+128),w
 11031  1AAD  1D03               	skipz
 11032  1AAE  2AB5               	goto	u7415
 11033  1AAF  0821               	movf	(___llmod@divisor+1)^(0+128),w
 11034  1AB0  0225               	subwf	(___llmod@dividend+1)^(0+128),w
 11035  1AB1  1D03               	skipz
 11036  1AB2  2AB5               	goto	u7415
 11037  1AB3  0820               	movf	___llmod@divisor^(0+128),w
 11038  1AB4  0224               	subwf	___llmod@dividend^(0+128),w
 11039  1AB5                     u7415:	
 11040  1AB5  1C03               	skipc
 11041  1AB6  2AC6               	goto	L30
 11042  1AB7  0820               	movf	___llmod@divisor^(0+128),w
 11043  1AB8  02A4               	subwf	___llmod@dividend^(0+128),f
 11044  1AB9  0821               	movf	(___llmod@divisor+1)^(0+128),w
 11045  1ABA  1C03               	skipc
 11046  1ABB  0F21               	incfsz	(___llmod@divisor+1)^(0+128),w
 11047  1ABC  02A5               	subwf	(___llmod@dividend+1)^(0+128),f
 11048  1ABD  0822               	movf	(___llmod@divisor+2)^(0+128),w
 11049  1ABE  1C03               	skipc
 11050  1ABF  0F22               	incfsz	(___llmod@divisor+2)^(0+128),w
 11051  1AC0  02A6               	subwf	(___llmod@dividend+2)^(0+128),f
 11052  1AC1  0823               	movf	(___llmod@divisor+3)^(0+128),w
 11053  1AC2  1C03               	skipc
 11054  1AC3  0F23               	incfsz	(___llmod@divisor+3)^(0+128),w
 11055  1AC4  02A7               	subwf	(___llmod@dividend+3)^(0+128),f
 11056  1AC5  1003               	clrc
 11057  1AC6                     L30:	
 11058  1AC6  0CA3               	rrf	(___llmod@divisor+3)^(0+128),f
 11059  1AC7  0CA2               	rrf	(___llmod@divisor+2)^(0+128),f
 11060  1AC8  0CA1               	rrf	(___llmod@divisor+1)^(0+128),f
 11061  1AC9  0CA0               	rrf	___llmod@divisor^(0+128),f
 11062  1ACA  0BA8               	decfsz	___llmod@counter^(0+128),f
 11063  1ACB  2AA7               	goto	l9971
 11064  1ACC                     l9979:	
 11065  1ACC  0827               	movf	(___llmod@dividend+3)^(0+128),w
 11066  1ACD  00A3               	movwf	(?___llmod+3)^(0+128)
 11067  1ACE  0826               	movf	(___llmod@dividend+2)^(0+128),w
 11068  1ACF  00A2               	movwf	(?___llmod+2)^(0+128)
 11069  1AD0  0825               	movf	(___llmod@dividend+1)^(0+128),w
 11070  1AD1  00A1               	movwf	(?___llmod+1)^(0+128)
 11071  1AD2  0824               	movf	___llmod@dividend^(0+128),w
 11072  1AD3  00A0               	movwf	?___llmod^(0+128)
 11073  1AD4  0008               	return
 11074  1AD5                     __end_of___llmod:	
 11075  1AD5                     __ptext2270:	
 11076 ;; =============== function ___almod ends ============
 11077                           
 11078                           
 11079 ;; *************** function ___lldiv *****************
 11080 ;; Defined at:
 11081 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lldiv.c"
 11082 ;; Parameters:    Size  Location     Type
 11083 ;;  divisor         4    0[BANK1 ] unsigned long 
 11084 ;;  dividend        4    4[BANK1 ] unsigned long 
 11085 ;; Auto vars:     Size  Location     Type
 11086 ;;  quotient        4    8[BANK1 ] unsigned long 
 11087 ;;  counter         1   12[BANK1 ] unsigned char 
 11088 ;; Return value:  Size  Location     Type
 11089 ;;                  4    0[BANK1 ] unsigned long 
 11090 ;; Registers used:
 11091 ;;		wreg, status,2, status,0
 11092 ;; Tracked objects:
 11093 ;;		On entry : 160/120
 11094 ;;		On exit  : 160/120
 11095 ;;		Unchanged: FFE9F/0
 11096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11097 ;;      Params:         0       0       8       0       0
 11098 ;;      Locals:         0       0       5       0       0
 11099 ;;      Temps:          0       0       0       0       0
 11100 ;;      Totals:         0       0      13       0       0
 11101 ;;Total ram usage:       13 bytes
 11102 ;; Hardware stack levels used:    1
 11103 ;; Hardware stack levels required when called:    4
 11104 ;; This function calls:
 11105 ;;		Nothing
 11106 ;; This function is called by:
 11107 ;;		_NumericToIndicator
 11108 ;; This function uses a non-reentrant model
 11109 ;;
 11110  1AD5                     ___lldiv:	
 11111                           
 11112 ;; hardware stack exceeded
 11113                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 11114  1AD5  01A8               	clrf	___lldiv@quotient^(0+128)
 11115  1AD6  01A9               	clrf	(___lldiv@quotient+1)^(0+128)
 11116  1AD7  01AA               	clrf	(___lldiv@quotient+2)^(0+128)
 11117  1AD8  01AB               	clrf	(___lldiv@quotient+3)^(0+128)
 11118  1AD9  0823               	movf	(___lldiv@divisor+3)^(0+128),w
 11119  1ADA  0422               	iorwf	(___lldiv@divisor+2)^(0+128),w
 11120  1ADB  0421               	iorwf	(___lldiv@divisor+1)^(0+128),w
 11121  1ADC  0420               	iorwf	___lldiv@divisor^(0+128),w
 11122  1ADD  1903               	skipnz
 11123  1ADE  2B14               	goto	l10005
 11124  1ADF  01AC               	clrf	___lldiv@counter^(0+128)
 11125  1AE0                     L27:	
 11126  1AE0  0AAC               	incf	___lldiv@counter^(0+128),f
 11127  1AE1  1BA3               	btfsc	(___lldiv@divisor+3)^(0+128),7
 11128  1AE2  2AE9               	goto	l9993
 11129  1AE3  1003               	clrc
 11130  1AE4  0DA0               	rlf	___lldiv@divisor^(0+128),f
 11131  1AE5  0DA1               	rlf	(___lldiv@divisor+1)^(0+128),f
 11132  1AE6  0DA2               	rlf	(___lldiv@divisor+2)^(0+128),f
 11133  1AE7  0DA3               	rlf	(___lldiv@divisor+3)^(0+128),f
 11134  1AE8  2AE0               	goto	L27
 11135  1AE9                     l9993:	
 11136  1AE9  1003               	clrc
 11137  1AEA  0DA8               	rlf	___lldiv@quotient^(0+128),f
 11138  1AEB  0DA9               	rlf	(___lldiv@quotient+1)^(0+128),f
 11139  1AEC  0DAA               	rlf	(___lldiv@quotient+2)^(0+128),f
 11140  1AED  0DAB               	rlf	(___lldiv@quotient+3)^(0+128),f
 11141  1AEE  0823               	movf	(___lldiv@divisor+3)^(0+128),w
 11142  1AEF  0227               	subwf	(___lldiv@dividend+3)^(0+128),w
 11143  1AF0  1D03               	skipz
 11144  1AF1  2AFC               	goto	u7455
 11145  1AF2  0822               	movf	(___lldiv@divisor+2)^(0+128),w
 11146  1AF3  0226               	subwf	(___lldiv@dividend+2)^(0+128),w
 11147  1AF4  1D03               	skipz
 11148  1AF5  2AFC               	goto	u7455
 11149  1AF6  0821               	movf	(___lldiv@divisor+1)^(0+128),w
 11150  1AF7  0225               	subwf	(___lldiv@dividend+1)^(0+128),w
 11151  1AF8  1D03               	skipz
 11152  1AF9  2AFC               	goto	u7455
 11153  1AFA  0820               	movf	___lldiv@divisor^(0+128),w
 11154  1AFB  0224               	subwf	___lldiv@dividend^(0+128),w
 11155  1AFC                     u7455:	
 11156  1AFC  1C03               	skipc
 11157  1AFD  2B0E               	goto	L28
 11158  1AFE  0820               	movf	___lldiv@divisor^(0+128),w
 11159  1AFF  02A4               	subwf	___lldiv@dividend^(0+128),f
 11160  1B00  0821               	movf	(___lldiv@divisor+1)^(0+128),w
 11161  1B01  1C03               	skipc
 11162  1B02  0F21               	incfsz	(___lldiv@divisor+1)^(0+128),w
 11163  1B03  02A5               	subwf	(___lldiv@dividend+1)^(0+128),f
 11164  1B04  0822               	movf	(___lldiv@divisor+2)^(0+128),w
 11165  1B05  1C03               	skipc
 11166  1B06  0F22               	incfsz	(___lldiv@divisor+2)^(0+128),w
 11167  1B07  02A6               	subwf	(___lldiv@dividend+2)^(0+128),f
 11168  1B08  0823               	movf	(___lldiv@divisor+3)^(0+128),w
 11169  1B09  1C03               	skipc
 11170  1B0A  0F23               	incfsz	(___lldiv@divisor+3)^(0+128),w
 11171  1B0B  02A7               	subwf	(___lldiv@dividend+3)^(0+128),f
 11172  1B0C  1428               	bsf	___lldiv@quotient^(0+128),0
 11173  1B0D  1003               	clrc
 11174  1B0E                     L28:	
 11175  1B0E  0CA3               	rrf	(___lldiv@divisor+3)^(0+128),f
 11176  1B0F  0CA2               	rrf	(___lldiv@divisor+2)^(0+128),f
 11177  1B10  0CA1               	rrf	(___lldiv@divisor+1)^(0+128),f
 11178  1B11  0CA0               	rrf	___lldiv@divisor^(0+128),f
 11179  1B12  0BAC               	decfsz	___lldiv@counter^(0+128),f
 11180  1B13  2AE9               	goto	l9993
 11181  1B14                     l10005:	
 11182  1B14  082B               	movf	(___lldiv@quotient+3)^(0+128),w
 11183  1B15  00A3               	movwf	(?___lldiv+3)^(0+128)
 11184  1B16  082A               	movf	(___lldiv@quotient+2)^(0+128),w
 11185  1B17  00A2               	movwf	(?___lldiv+2)^(0+128)
 11186  1B18  0829               	movf	(___lldiv@quotient+1)^(0+128),w
 11187  1B19  00A1               	movwf	(?___lldiv+1)^(0+128)
 11188  1B1A  0828               	movf	___lldiv@quotient^(0+128),w
 11189  1B1B  00A0               	movwf	?___lldiv^(0+128)
 11190  1B1C  0008               	return
 11191  1B1D                     __end_of___lldiv:	
 11192                           
 11193                           	psect	swtext2
 11194  1000                     __pswtext2:	
 11195  1000                     S11379:	
 11196  1000  120A  118A  2ED5   	ljmp	l9811
 11197  1003  120A  118A  2ED6   	ljmp	l9815
 11198  1006  120A  118A  2ED7   	ljmp	l9819
 11199  1009  120A  118A  2ED8   	ljmp	l9823
 11200  100C  120A  118A  2ED9   	ljmp	l9827
 11201  100F  120A  118A  2EDA   	ljmp	l9831
 11202  1012  120A  118A  2EDB   	ljmp	l9835
 11203                           
 11204                           	psect	text2287
 11205  18A2                     __ptext2287:	
 11206 ;; =============== function _ParseDataRecord ends ============
 11207                           
 11208                           
 11209 ;; *************** function _GetDayOfWeek *****************
 11210 ;; Defined at:
 11211 ;;		line 240 in file "prog.c"
 11212 ;; Parameters:    Size  Location     Type
 11213 ;;  day             1    wreg     unsigned char 
 11214 ;; Auto vars:     Size  Location     Type
 11215 ;;  day             1    0[BANK1 ] unsigned char 
 11216 ;; Return value:  Size  Location     Type
 11217 ;;                  1    wreg      PTR unsigned char 
 11218 ;; Registers used:
 11219 ;;		wreg
 11220 ;; Tracked objects:
 11221 ;;		On entry : 60/160
 11222 ;;		On exit  : 60/160
 11223 ;;		Unchanged: FFF9F/0
 11224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11225 ;;      Params:         0       0       0       0       0
 11226 ;;      Locals:         0       0       1       0       0
 11227 ;;      Temps:          0       0       0       0       0
 11228 ;;      Totals:         0       0       1       0       0
 11229 ;;Total ram usage:        1 bytes
 11230 ;; Hardware stack levels used:    1
 11231 ;; Hardware stack levels required when called:    4
 11232 ;; This function calls:
 11233 ;;		Nothing
 11234 ;; This function is called by:
 11235 ;;		_TimeToInd
 11236 ;; This function uses a non-reentrant model
 11237 ;;
 11238  18A2                     _GetDayOfWeek:	
 11239                           
 11240                           ; Regs used in _GetDayOfWeek: [wreg]
 11241                           ;GetDayOfWeek@day stored from wreg
 11242  18A2  1303               	bcf	3,6	;RP1=0, select bank1
 11243  18A3  00A0               	movwf	GetDayOfWeek@day^(0+128)
 11244                           
 11245                           ;prog.c: 241: static unsigned char array[3] = {0,0,255};
 11246                           ;prog.c: 242: if(day==1){array[1] = 57; array[0] = 55;}
 11247  18A4  0B20               	decfsz	GetDayOfWeek@day^(0+128),w
 11248  18A5  28AB               	goto	l9707
 11249  18A6  3039               	movlw	57
 11250  18A7  1703               	bsf	3,6	;RP1=1, select bank3
 11251  18A8  00D8               	movwf	(GetDayOfWeek@array^(0+384)+1)
 11252  18A9  3037               	movlw	55
 11253  18AA  28DE               	goto	L37
 11254  18AB                     l9707:	
 11255                           
 11256                           ;prog.c: 243: else if(day==2){array[1] = 43; array[0] = 60;}
 11257  18AB  0820               	movf	GetDayOfWeek@day^(0+128),w
 11258  18AC  3A02               	xorlw	2
 11259  18AD  1D03               	skipz
 11260  18AE  28B1               	goto	l9711
 11261  18AF  302B               	movlw	43
 11262  18B0  28C5               	goto	L39
 11263  18B1                     l9711:	
 11264                           
 11265                           ;prog.c: 244: else if(day==3){array[1] = 59; array[0] = 58;}
 11266  18B1  0820               	movf	GetDayOfWeek@day^(0+128),w
 11267  18B2  3A03               	xorlw	3
 11268  18B3  1D03               	skipz
 11269  18B4  28BA               	goto	l9715
 11270  18B5  303B               	movlw	59
 11271  18B6  1703               	bsf	3,6	;RP1=1, select bank3
 11272  18B7  00D8               	movwf	(GetDayOfWeek@array^(0+384)+1)
 11273  18B8  303A               	movlw	58
 11274  18B9  28DE               	goto	L37
 11275  18BA                     l9715:	
 11276                           
 11277                           ;prog.c: 245: else if(day==4){array[1] = 65; array[0] = 60;}
 11278  18BA  0820               	movf	GetDayOfWeek@day^(0+128),w
 11279  18BB  3A04               	xorlw	4
 11280  18BC  1D03               	skipz
 11281  18BD  28C0               	goto	l9719
 11282  18BE  3041               	movlw	65
 11283  18BF  28C5               	goto	L39
 11284  18C0                     l9719:	
 11285                           
 11286                           ;prog.c: 246: else if(day==5){array[1] = 57; array[0] = 60;}
 11287  18C0  0820               	movf	GetDayOfWeek@day^(0+128),w
 11288  18C1  3A05               	xorlw	5
 11289  18C2  1D03               	skipz
 11290  18C3  28C9               	goto	l9723
 11291  18C4  3039               	movlw	57
 11292  18C5                     L39:	
 11293  18C5  1703               	bsf	3,6	;RP1=1, select bank3
 11294  18C6  00D8               	movwf	(GetDayOfWeek@array^(0+384)+1)
 11295  18C7  303C               	movlw	60
 11296  18C8  28DE               	goto	L37
 11297  18C9                     l9723:	
 11298                           
 11299                           ;prog.c: 247: else if(day==6){array[1] = 59; array[0] = 42;}
 11300  18C9  0820               	movf	GetDayOfWeek@day^(0+128),w
 11301  18CA  3A06               	xorlw	6
 11302  18CB  1D03               	skipz
 11303  18CC  28D2               	goto	l9727
 11304  18CD  303B               	movlw	59
 11305  18CE  1703               	bsf	3,6	;RP1=1, select bank3
 11306  18CF  00D8               	movwf	(GetDayOfWeek@array^(0+384)+1)
 11307  18D0  302A               	movlw	42
 11308  18D1  28DE               	goto	L37
 11309  18D2                     l9727:	
 11310                           
 11311                           ;prog.c: 248: else if(day==7){array[1] = 43; array[0] = 59;}
 11312  18D2  0820               	movf	GetDayOfWeek@day^(0+128),w
 11313  18D3  3A07               	xorlw	7
 11314  18D4  1D03               	skipz
 11315  18D5  28DB               	goto	l9731
 11316  18D6  302B               	movlw	43
 11317  18D7  1703               	bsf	3,6	;RP1=1, select bank3
 11318  18D8  00D8               	movwf	(GetDayOfWeek@array^(0+384)+1)
 11319  18D9  303B               	movlw	59
 11320  18DA  28DE               	goto	L37
 11321  18DB                     l9731:	
 11322                           
 11323                           ;prog.c: 249: else{array[1] = 34; array[0] = 34;}
 11324  18DB  3022               	movlw	34
 11325  18DC  1703               	bsf	3,6	;RP1=1, select bank3
 11326  18DD  00D8               	movwf	(GetDayOfWeek@array^(0+384)+1)
 11327  18DE                     L37:	
 11328  18DE  00D7               	movwf	GetDayOfWeek@array^(0+384)
 11329                           
 11330                           ;prog.c: 250: return array;
 11331  18DF  34D7               	retlw	GetDayOfWeek@array& (0+255)
 11332  18E0                     __end_of_GetDayOfWeek:	
 11333                           
 11334                           	psect	text2293
 11335  0808                     __ptext2293:	
 11336 ;; =============== function _getDigit ends ============
 11337                           
 11338                           
 11339 ;; *************** function _F *****************
 11340 ;; Defined at:
 11341 ;;		line 1192 in file "prog.c"
 11342 ;; Parameters:    Size  Location     Type
 11343 ;;		None
 11344 ;; Auto vars:     Size  Location     Type
 11345 ;;  digit           1   46[BANK0 ] unsigned char 
 11346 ;;  DigitValue      1   45[BANK0 ] unsigned char 
 11347 ;;  symbol          2   47[BANK0 ] int 
 11348 ;;  line            1   49[BANK0 ] unsigned char 
 11349 ;;  MinuteAgo       1   44[BANK0 ] unsigned char 
 11350 ;; Return value:  Size  Location     Type
 11351 ;;		None               void
 11352 ;; Registers used:
 11353 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 11354 ;; Tracked objects:
 11355 ;;		On entry : 0/0
 11356 ;;		On exit  : 60/0
 11357 ;;		Unchanged: 0/0
 11358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11359 ;;      Params:         0       0       0       0       0
 11360 ;;      Locals:         0       6       0       0       0
 11361 ;;      Temps:          0       8       0       0       0
 11362 ;;      Totals:         0      14       0       0       0
 11363 ;;Total ram usage:       14 bytes
 11364 ;; Hardware stack levels used:    1
 11365 ;; Hardware stack levels required when called:    3
 11366 ;; This function calls:
 11367 ;;		_SignalsOnOff
 11368 ;;		i1_FillMinutes
 11369 ;;		i1_lcd_send_byte
 11370 ;;		_convDig_LCD
 11371 ;;		_SendSymbolToLCD
 11372 ;;		_ReadTime
 11373 ;;		_ConvKeyNum
 11374 ;; This function is called by:
 11375 ;;		Interrupt level 1
 11376 ;; This function uses a non-reentrant model
 11377 ;;
 11378  0808                     _F:	
 11379  0808  0064               	clrwdt	;#
 11380                           
 11381                           ;prog.c: 1194: if(TMR1IF){
 11382  0809  1283               	bcf	3,5	;RP0=0, select bank0
 11383  080A  1303               	bcf	3,6	;RP1=0, select bank0
 11384  080B  1C0C               	btfss	12,0
 11385  080C  290F               	goto	i1l1311
 11386  080D  30C8               	movlw	200
 11387                           
 11388                           ;prog.c: 1195: TMR1IF = 0;
 11389  080E  100C               	bcf	12,0
 11390                           
 11391                           ;prog.c: 1196: TMR1 += 51200;
 11392  080F  078F               	addwf	15,f	;volatile
 11393                           
 11394                           ;prog.c: 1197: SignalsOnOff();
 11395  0810  260A  120A  158A   	fcall	_SignalsOnOff
 11396                           
 11397                           ;prog.c: 1198: char MinuteAgo = (Clock - Minutes > 6000);
 11398  0813  0852               	movf	_Minutes,w
 11399  0814  1683               	bsf	3,5	;RP0=1, select bank3
 11400  0815  1703               	bsf	3,6	;RP1=1, select bank3
 11401  0816  025A               	subwf	_Clock^(0+384),w
 11402  0817  1283               	bcf	3,5	;RP0=0, select bank0
 11403  0818  1303               	bcf	3,6	;RP1=0, select bank0
 11404  0819  00C4               	movwf	??_F
 11405  081A  1683               	bsf	3,5	;RP0=1, select bank3
 11406  081B  1703               	bsf	3,6	;RP1=1, select bank3
 11407  081C  085B               	movf	(_Clock+1)^(0+384),w
 11408  081D  1283               	bcf	3,5	;RP0=0, select bank0
 11409  081E  1303               	bcf	3,6	;RP1=0, select bank0
 11410  081F  00C5               	movwf	??_F+1
 11411  0820  0853               	movf	_Minutes+1,w
 11412  0821  1C03               	skipc
 11413  0822  0F53               	incfsz	_Minutes+1,w
 11414  0823  02C5               	subwf	??_F+1,f
 11415  0824  1683               	bsf	3,5	;RP0=1, select bank3
 11416  0825  1703               	bsf	3,6	;RP1=1, select bank3
 11417  0826  085C               	movf	(_Clock+2)^(0+384),w
 11418  0827  1283               	bcf	3,5	;RP0=0, select bank0
 11419  0828  1303               	bcf	3,6	;RP1=0, select bank0
 11420  0829  00C6               	movwf	??_F+2
 11421  082A  0854               	movf	_Minutes+2,w
 11422  082B  1C03               	skipc
 11423  082C  0F54               	incfsz	_Minutes+2,w
 11424  082D  02C6               	subwf	??_F+2,f
 11425  082E  1683               	bsf	3,5	;RP0=1, select bank3
 11426  082F  1703               	bsf	3,6	;RP1=1, select bank3
 11427  0830  085D               	movf	(_Clock+3)^(0+384),w
 11428  0831  1283               	bcf	3,5	;RP0=0, select bank0
 11429  0832  1303               	bcf	3,6	;RP1=0, select bank0
 11430  0833  00C7               	movwf	??_F+3
 11431  0834  0855               	movf	_Minutes+3,w
 11432  0835  1C03               	skipc
 11433  0836  0F55               	incfsz	_Minutes+3,w
 11434  0837  02C7               	subwf	??_F+3,f
 11435  0838  0847               	movf	??_F+3,w
 11436  0839  3A80               	xorlw	128
 11437  083A  00FF               	movwf	127
 11438  083B  3080               	movlw	128
 11439  083C  027F               	subwf	127,w
 11440  083D  3000               	movlw	0
 11441  083E  1D03               	skipz
 11442  083F  284A               	goto	L40
 11443  0840  0246               	subwf	??_F+2,w
 11444  0841  1D03               	skipz
 11445  0842  2849               	goto	u411_23
 11446  0843  3017               	movlw	23
 11447  0844  0245               	subwf	??_F+1,w
 11448  0845  1D03               	skipz
 11449  0846  2849               	goto	u411_23
 11450  0847  3071               	movlw	113
 11451  0848  0244               	subwf	??_F,w
 11452  0849                     u411_23:	
 11453  0849  3000               	movlw	0
 11454  084A                     L40:	
 11455  084A  1803               	skipnc
 11456  084B  3001               	movlw	1
 11457  084C  00CC               	movwf	F@MinuteAgo
 11458                           
 11459                           ;prog.c: 1199: if(MinuteAgo > 0){
 11460  084D  084C               	movf	F@MinuteAgo,w
 11461  084E  1903               	btfsc	3,2
 11462  084F  2854               	goto	i1l7525
 11463                           
 11464                           ;prog.c: 1200: FillMinutes();
 11465  0850  22B0  120A  158A   	fcall	i1_FillMinutes
 11466                           
 11467                           ;prog.c: 1201: RelevanceOfNextStartCell = 0;
 11468  0853  135D               	bcf	_RelevanceOfNextStartCell/(0+8),_RelevanceOfNextStartCell& (0+7)
 11469  0854                     i1l7525:	
 11470                           
 11471                           ;prog.c: 1202: }
 11472                           ;prog.c: 1204: if(LCD_Power_On && (GlobalBlinkCycleTime==100 || IsLCDModified)){
 11473  0854  1DDD               	btfss	_LCD_Power_On/(0+8),_LCD_Power_On& (0+7)
 11474  0855  28CA               	goto	i1l7575
 11475  0856  0862               	movf	_GlobalBlinkCycleTime,w
 11476  0857  3A64               	xorlw	100
 11477  0858  1903               	skipnz
 11478  0859  285C               	goto	i1l7531
 11479  085A  1CDD               	btfss	_IsLCDModified/(0+8),_IsLCDModified& (0+7)
 11480  085B  28CA               	goto	i1l7575
 11481  085C                     i1l7531:	
 11482                           
 11483                           ;prog.c: 1205: for(char line = 0; line<2; line++){
 11484  085C  01D1               	clrf	F@line
 11485  085D                     i1l7537:	
 11486                           
 11487                           ;prog.c: 1206: for(int symbol = 0; symbol<16; symbol++){
 11488  085D  01CF               	clrf	F@symbol
 11489  085E  01D0               	clrf	F@symbol+1
 11490  085F                     i1l7543:	
 11491                           
 11492                           ;prog.c: 1207: if(GlobalBlinkCycleTime==100 || modifide_digits[line][symbol]>0){
 11493  085F  1283               	bcf	3,5	;RP0=0, select bank0
 11494  0860  1303               	bcf	3,6	;RP1=0, select bank0
 11495  0861  0862               	movf	_GlobalBlinkCycleTime,w
 11496  0862  3A64               	xorlw	100
 11497  0863  1903               	skipnz
 11498  0864  2874               	goto	i1l7547
 11499  0865  0851               	movf	F@line,w
 11500  0866  00C4               	movwf	??_F
 11501  0867  0E44               	swapf	??_F,w
 11502  0868  39F0               	andlw	240
 11503  0869  00C4               	movwf	??_F
 11504  086A  3E30               	addlw	_modifide_digits& (0+255)
 11505  086B  00C5               	movwf	??_F+1
 11506  086C  084F               	movf	F@symbol,w
 11507  086D  0745               	addwf	??_F+1,w
 11508  086E  00C6               	movwf	??_F+2
 11509  086F  0084               	movwf	4
 11510  0870  1783               	bsf	3,7	;select IRP bank2
 11511  0871  0880               	movf	0,f
 11512  0872  1903               	skipnz
 11513  0873  28B4               	goto	i1l7567
 11514  0874                     i1l7547:	
 11515                           
 11516                           ;prog.c: 1208: unsigned char digit = digits[line][symbol];
 11517  0874  0851               	movf	F@line,w
 11518  0875  00C4               	movwf	??_F
 11519  0876  0E44               	swapf	??_F,w
 11520  0877  39F0               	andlw	240
 11521  0878  00C4               	movwf	??_F
 11522  0879  3E10               	addlw	_digits& (0+255)
 11523  087A  00C5               	movwf	??_F+1
 11524  087B  084F               	movf	F@symbol,w
 11525  087C  0745               	addwf	??_F+1,w
 11526  087D  00C6               	movwf	??_F+2
 11527  087E  0084               	movwf	4
 11528  087F  1783               	bsf	3,7	;select IRP bank2
 11529  0880  0800               	movf	0,w
 11530  0881  00CE               	movwf	F@digit
 11531                           
 11532                           ;prog.c: 1209: lcd_send_byte((line * 0x40 + 15 - symbol) | 0b10000000);
 11533  0882  0851               	movf	F@line,w
 11534  0883  00C4               	movwf	??_F
 11535  0884  3006               	movlw	6
 11536  0885                     u418_25:	
 11537  0885  1003               	clrc
 11538  0886  0DC4               	rlf	??_F,f
 11539  0887  3EFF               	addlw	-1
 11540  0888  1D03               	skipz
 11541  0889  2885               	goto	u418_25
 11542  088A  084F               	movf	F@symbol,w
 11543  088B  0244               	subwf	??_F,w
 11544  088C  3E0F               	addlw	15
 11545  088D  3880               	iorlw	128
 11546  088E  2354  120A  158A   	fcall	i1_lcd_send_byte
 11547                           
 11548                           ;prog.c: 1210: unsigned char DigitValue;
 11549                           ;prog.c: 1211: if(((digit & 0b10000000) == 0) || (((digit & 0b10000000) != 0) && GlobalB
      +                          link)){
 11550  0891  1283               	bcf	3,5	;RP0=0, select bank0
 11551  0892  1303               	bcf	3,6	;RP1=0, select bank0
 11552  0893  1FCE               	btfss	F@digit,7
 11553  0894  2898               	goto	i1l7557
 11554  0895  1BCE               	btfsc	F@digit,7
 11555  0896  1C5D               	btfss	_GlobalBlink/(0+8),_GlobalBlink& (0+7)
 11556  0897  289C               	goto	i1l7561
 11557  0898                     i1l7557:	
 11558                           
 11559                           ;prog.c: 1212: DigitValue = digit & 0b01111111;
 11560  0898  084E               	movf	F@digit,w
 11561  0899  00CD               	movwf	F@DigitValue
 11562  089A  13CD               	bcf	F@DigitValue,7
 11563                           
 11564                           ;prog.c: 1213: }else{
 11565  089B  289E               	goto	i1l7563
 11566  089C                     i1l7561:	
 11567                           
 11568                           ;prog.c: 1214: DigitValue = 34;
 11569  089C  3022               	movlw	34
 11570  089D  00CD               	movwf	F@DigitValue
 11571  089E                     i1l7563:	
 11572                           
 11573                           ;prog.c: 1215: }
 11574                           ;prog.c: 1216: SendSymbolToLCD(convDig_LCD(DigitValue));
 11575  089E  084D               	movf	F@DigitValue,w
 11576  089F  211B  120A  158A   	fcall	_convDig_LCD
 11577  08A2  22D4  120A  158A   	fcall	_SendSymbolToLCD
 11578                           
 11579                           ;prog.c: 1217: modifide_digits[line][symbol] = 0;
 11580  08A5  1283               	bcf	3,5	;RP0=0, select bank0
 11581  08A6  1303               	bcf	3,6	;RP1=0, select bank0
 11582  08A7  0851               	movf	F@line,w
 11583  08A8  00C4               	movwf	??_F
 11584  08A9  0E44               	swapf	??_F,w
 11585  08AA  39F0               	andlw	240
 11586  08AB  00C4               	movwf	??_F
 11587  08AC  3E30               	addlw	_modifide_digits& (0+255)
 11588  08AD  00C5               	movwf	??_F+1
 11589  08AE  084F               	movf	F@symbol,w
 11590  08AF  0745               	addwf	??_F+1,w
 11591  08B0  00C6               	movwf	??_F+2
 11592  08B1  0084               	movwf	4
 11593  08B2  1783               	bsf	3,7	;select IRP bank2
 11594  08B3  0180               	clrf	0
 11595  08B4                     i1l7567:	
 11596  08B4  0ACF               	incf	F@symbol,f
 11597  08B5  1903               	skipnz
 11598  08B6  0AD0               	incf	F@symbol+1,f
 11599  08B7  0850               	movf	F@symbol+1,w
 11600  08B8  3A80               	xorlw	128
 11601  08B9  00FF               	movwf	127
 11602  08BA  3080               	movlw	128
 11603  08BB  027F               	subwf	127,w
 11604  08BC  1D03               	skipz
 11605  08BD  28C0               	goto	u422_25
 11606  08BE  3010               	movlw	16
 11607  08BF  024F               	subwf	F@symbol,w
 11608  08C0                     u422_25:	
 11609  08C0  1C03               	skipc
 11610  08C1  285F               	goto	i1l7543
 11611  08C2  1283               	bcf	3,5	;RP0=0, select bank0
 11612  08C3  1303               	bcf	3,6	;RP1=0, select bank0
 11613  08C4  3002               	movlw	2
 11614  08C5  0AD1               	incf	F@line,f
 11615  08C6  0251               	subwf	F@line,w
 11616  08C7  1C03               	skipc
 11617  08C8  285D               	goto	i1l7537
 11618                           
 11619                           ;prog.c: 1218: }
 11620                           ;prog.c: 1219: }
 11621                           ;prog.c: 1220: }
 11622                           ;prog.c: 1221: IsLCDModified = 0;
 11623  08C9  10DD               	bcf	_IsLCDModified/(0+8),_IsLCDModified& (0+7)
 11624  08CA                     i1l7575:	
 11625                           
 11626                           ;prog.c: 1223: }
 11627                           ;prog.c: 1225: if(GlobalBlinkCycleTime>0){
 11628  08CA  0862               	movf	_GlobalBlinkCycleTime,w
 11629  08CB  1903               	btfsc	3,2
 11630  08CC  28CF               	goto	i1l1295
 11631                           
 11632                           ;prog.c: 1226: GlobalBlinkCycleTime--;
 11633  08CD  03E2               	decf	_GlobalBlinkCycleTime,f
 11634                           
 11635                           ;prog.c: 1227: }else{
 11636  08CE  28D7               	goto	i1l7583
 11637  08CF                     i1l1295:	
 11638  08CF  3064               	movlw	100
 11639                           
 11640                           ;prog.c: 1228: IsLCDModified = 1;
 11641  08D0  14DD               	bsf	_IsLCDModified/(0+8),_IsLCDModified& (0+7)
 11642                           
 11643                           ;prog.c: 1229: GlobalBlinkCycleTime = 100;
 11644  08D1  00E2               	movwf	_GlobalBlinkCycleTime
 11645                           
 11646                           ;prog.c: 1230: GlobalBlink = !GlobalBlink;
 11647  08D2  3001               	movlw	(0+1) shl (_GlobalBlink& (0+7))
 11648  08D3  06DD               	xorwf	_GlobalBlink/(0+8),f
 11649                           
 11650                           ;prog.c: 1232: ReadTime();
 11651  08D4  239E  120A  158A   	fcall	_ReadTime
 11652  08D7                     i1l7583:	
 11653                           
 11654                           ;prog.c: 1233: }
 11655                           ;prog.c: 1235: static unsigned char ButtonPressTimeOut;
 11656                           ;prog.c: 1237: static unsigned char KeyIndex;
 11657                           ;prog.c: 1238: static unsigned char PressedKeyIndex = 0xFF;
 11658                           ;prog.c: 1240: if(ButtonPressTimeOut>0){
 11659  08D7  1283               	bcf	3,5	;RP0=0, select bank0
 11660  08D8  1303               	bcf	3,6	;RP1=0, select bank0
 11661  08D9  0856               	movf	F@ButtonPressTimeOut,w
 11662  08DA  1903               	btfsc	3,2
 11663  08DB  28DE               	goto	i1l7587
 11664                           
 11665                           ;prog.c: 1241: ButtonPressTimeOut--;
 11666  08DC  03D6               	decf	F@ButtonPressTimeOut,f
 11667                           
 11668                           ;prog.c: 1242: }else{
 11669  08DD  290F               	goto	i1l1311
 11670  08DE                     i1l7587:	
 11671                           
 11672                           ;prog.c: 1243: KeyCode = 0;
 11673  08DE  1683               	bsf	3,5	;RP0=1, select bank1
 11674  08DF  01EF               	clrf	_KeyCode^(0+128)	;volatile
 11675                           
 11676                           ;prog.c: 1244: if(RB0){
 11677  08E0  1283               	bcf	3,5	;RP0=0, select bank0
 11678  08E1  1C06               	btfss	6,0
 11679  08E2  28FF               	goto	i1l7601
 11680                           
 11681                           ;prog.c: 1245: if(KeyIndex==0x0F){
 11682  08E3  0857               	movf	F@KeyIndex,w
 11683  08E4  3A0F               	xorlw	15
 11684  08E5  1D03               	skipz
 11685  08E6  28E9               	goto	i1l7595
 11686                           
 11687                           ;prog.c: 1246: KeyIndex = 0;
 11688  08E7  01D7               	clrf	F@KeyIndex
 11689                           
 11690                           ;prog.c: 1247: }else{
 11691  08E8  28EA               	goto	i1l7597
 11692  08E9                     i1l7595:	
 11693                           
 11694                           ;prog.c: 1248: KeyIndex++;
 11695  08E9  0AD7               	incf	F@KeyIndex,f
 11696  08EA                     i1l7597:	
 11697                           
 11698                           ;prog.c: 1249: }
 11699                           ;prog.c: 1250: PORTB = (PORTB & 0b11100000) | (KeyIndex*2);
 11700  08EA  0857               	movf	F@KeyIndex,w
 11701  08EB  00C4               	movwf	??_F
 11702  08EC  1003               	clrc
 11703  08ED  0DC4               	rlf	??_F,f
 11704  08EE  0806               	movf	6,w
 11705  08EF  39E0               	andlw	224
 11706  08F0  0444               	iorwf	??_F,w
 11707  08F1  0086               	movwf	6	;volatile
 11708                           
 11709                           ;prog.c: 1251: PressedKeyIndex = 0xFF;
 11710  08F2  30FF               	movlw	255
 11711  08F3  00E1               	movwf	F@PressedKeyIndex
 11712                           
 11713                           ;prog.c: 1252: if(LCD_ON_TIMEOUT>0){
 11714  08F4  0860               	movf	_LCD_ON_TIMEOUT+1,w
 11715  08F5  045F               	iorwf	_LCD_ON_TIMEOUT,w
 11716  08F6  1903               	skipnz
 11717  08F7  290F               	goto	i1l1311
 11718                           
 11719                           ;prog.c: 1253: LCD_ON_TIMEOUT--;
 11720  08F8  3001               	movlw	1
 11721  08F9  02DF               	subwf	_LCD_ON_TIMEOUT,f
 11722  08FA  3000               	movlw	0
 11723  08FB  1C03               	skipc
 11724  08FC  03E0               	decf	_LCD_ON_TIMEOUT+1,f
 11725  08FD  02E0               	subwf	_LCD_ON_TIMEOUT+1,f
 11726  08FE  290F               	goto	i1l1311
 11727  08FF                     i1l7601:	
 11728                           
 11729                           ;prog.c: 1256: if(PressedKeyIndex==0xFF){
 11730  08FF  0861               	movf	F@PressedKeyIndex,w
 11731  0900  3AFF               	xorlw	255
 11732  0901  1D03               	skipz
 11733  0902  290F               	goto	i1l1311
 11734                           
 11735                           ;prog.c: 1257: PressedKeyIndex = KeyIndex;
 11736  0903  0857               	movf	F@KeyIndex,w
 11737  0904  00E1               	movwf	F@PressedKeyIndex
 11738                           
 11739                           ;prog.c: 1258: ButtonPressTimeOut = 30;
 11740  0905  301E               	movlw	30
 11741  0906  00D6               	movwf	F@ButtonPressTimeOut
 11742                           
 11743                           ;prog.c: 1259: LCD_ON_TIMEOUT = 60000;
 11744  0907  3060               	movlw	96
 11745  0908  00DF               	movwf	_LCD_ON_TIMEOUT
 11746  0909  30EA               	movlw	234
 11747  090A  00E0               	movwf	_LCD_ON_TIMEOUT+1
 11748                           
 11749                           ;prog.c: 1260: KeyCode = ConvKeyNum(PressedKeyIndex);
 11750  090B  0861               	movf	F@PressedKeyIndex,w
 11751  090C  2290               	fcall	_ConvKeyNum
 11752  090D  1683               	bsf	3,5	;RP0=1, select bank1
 11753  090E  00EF               	movwf	_KeyCode^(0+128)	;volatile
 11754  090F                     i1l1311:	
 11755  090F  1283               	bcf	3,5	;RP0=0, select bank0
 11756  0910  084B               	movf	??_F+7,w
 11757  0911  00FF               	movwf	127
 11758  0912  084A               	movf	??_F+6,w
 11759  0913  008A               	movwf	10
 11760  0914  0849               	movf	??_F+5,w
 11761  0915  0084               	movwf	4
 11762  0916  0E48               	swapf	(??_F+4)^0,w
 11763  0917  0083               	movwf	3
 11764  0918  0EFE               	swapf	126,f
 11765  0919  0E7E               	swapf	126,w
 11766  091A  0009               	retfie
 11767  091B                     __end_of_F:	
 11768  091B                     __ptext2321:	
 11769 ;; =============== function _delay ends ============
 11770                           
 11771                           
 11772 ;; *************** function _convDig_LCD *****************
 11773 ;; Defined at:
 11774 ;;		line 123 in file "prog.c"
 11775 ;; Parameters:    Size  Location     Type
 11776 ;;  dig             1    wreg     unsigned char 
 11777 ;; Auto vars:     Size  Location     Type
 11778 ;;  dig             1    0[COMMON] unsigned char 
 11779 ;; Return value:  Size  Location     Type
 11780 ;;                  1    wreg      unsigned char 
 11781 ;; Registers used:
 11782 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11783 ;; Tracked objects:
 11784 ;;		On entry : 60/100
 11785 ;;		On exit  : 60/100
 11786 ;;		Unchanged: FFF9F/0
 11787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11788 ;;      Params:         0       0       0       0       0
 11789 ;;      Locals:         1       0       0       0       0
 11790 ;;      Temps:          0       0       0       0       0
 11791 ;;      Totals:         1       0       0       0       0
 11792 ;;Total ram usage:        1 bytes
 11793 ;; Hardware stack levels used:    1
 11794 ;; This function calls:
 11795 ;;		Nothing
 11796 ;; This function is called by:
 11797 ;;		_F
 11798 ;; This function uses a non-reentrant model
 11799 ;;
 11800  091B                     _convDig_LCD:	
 11801                           
 11802                           ; Regs used in _convDig_LCD: [wreg-fsr0h+status,2+status,0]
 11803                           ;convDig_LCD@dig stored from wreg
 11804  091B  00F0               	movwf	convDig_LCD@dig
 11805                           
 11806                           ;prog.c: 124: switch (dig){
 11807  091C  2973               	goto	i1l7119
 11808  091D                     i1l6737:	
 11809  091D  3430               	retlw	48
 11810  091E                     i1l6741:	
 11811  091E  3431               	retlw	49
 11812  091F                     i1l6745:	
 11813  091F  3432               	retlw	50
 11814  0920                     i1l6749:	
 11815  0920  3433               	retlw	51
 11816  0921                     i1l6753:	
 11817  0921  3434               	retlw	52
 11818  0922                     i1l6757:	
 11819  0922  3435               	retlw	53
 11820  0923                     i1l6761:	
 11821  0923  3436               	retlw	54
 11822  0924                     i1l6765:	
 11823  0924  3437               	retlw	55
 11824  0925                     i1l6769:	
 11825  0925  3438               	retlw	56
 11826  0926                     i1l6773:	
 11827  0926  3439               	retlw	57
 11828  0927                     i1l6777:	
 11829  0927  3461               	retlw	97
 11830  0928                     i1l6781:	
 11831  0928  3462               	retlw	98
 11832  0929                     i1l6785:	
 11833  0929  3463               	retlw	99
 11834  092A                     i1l6789:	
 11835  092A  3464               	retlw	100
 11836  092B                     i1l6793:	
 11837  092B  3465               	retlw	101
 11838  092C                     i1l6797:	
 11839  092C  3466               	retlw	102
 11840  092D                     i1l6801:	
 11841  092D  3467               	retlw	103
 11842  092E                     i1l6805:	
 11843  092E  3468               	retlw	104
 11844  092F                     i1l6809:	
 11845  092F  3469               	retlw	105
 11846  0930                     i1l6813:	
 11847  0930  346A               	retlw	106
 11848  0931                     i1l6817:	
 11849  0931  346C               	retlw	108
 11850  0932                     i1l6821:	
 11851  0932  346E               	retlw	110
 11852  0933                     i1l6825:	
 11853  0933  346F               	retlw	111
 11854  0934                     i1l6829:	
 11855  0934  3470               	retlw	112
 11856  0935                     i1l6833:	
 11857  0935  3472               	retlw	114
 11858  0936                     i1l6837:	
 11859  0936  3473               	retlw	115
 11860  0937                     i1l6841:	
 11861  0937  3474               	retlw	116
 11862  0938                     i1l6845:	
 11863  0938  3475               	retlw	117
 11864  0939                     i1l6849:	
 11865  0939  3476               	retlw	118
 11866  093A                     i1l6853:	
 11867  093A  3479               	retlw	121
 11868  093B                     i1l6857:	
 11869  093B  347A               	retlw	122
 11870  093C                     i1l6861:	
 11871  093C  34B0               	retlw	176
 11872  093D                     i1l6865:	
 11873  093D  342D               	retlw	45
 11874  093E                     i1l6869:	
 11875  093E  345F               	retlw	95
 11876  093F                     i1l6873:	
 11877  093F  3420               	retlw	32
 11878  0940                     i1l6877:	
 11879  0940  343A               	retlw	58
 11880  0941                     i1l6881:	
 11881  0941  3477               	retlw	119
 11882  0942                     i1l6885:	
 11883  0942  346D               	retlw	109
 11884  0943                     i1l6889:	
 11885  0943  346B               	retlw	107
 11886  0944                     i1l6893:	
 11887  0944  3478               	retlw	120
 11888  0945                     i1l6897:	
 11889  0945  3471               	retlw	113
 11890  0946                     i1l6905:	
 11891  0946  34B2               	retlw	178
 11892  0947                     i1l6909:	
 11893  0947  34B3               	retlw	179
 11894  0948                     i1l6913:	
 11895  0948  34B4               	retlw	180
 11896  0949                     i1l6917:	
 11897  0949  34E3               	retlw	227
 11898  094A                     i1l6925:	
 11899  094A  34B5               	retlw	181
 11900  094B                     i1l6929:	
 11901  094B  34B6               	retlw	182
 11902  094C                     i1l6933:	
 11903  094C  34B7               	retlw	183
 11904  094D                     i1l6937:	
 11905  094D  34B8               	retlw	184
 11906  094E                     i1l6941:	
 11907  094E  34B9               	retlw	185
 11908  094F                     i1l6945:	
 11909  094F  34BA               	retlw	186
 11910  0950                     i1l6949:	
 11911  0950  34BB               	retlw	187
 11912  0951                     i1l6953:	
 11913  0951  34BC               	retlw	188
 11914  0952                     i1l6957:	
 11915  0952  34BD               	retlw	189
 11916  0953                     i1l6965:	
 11917  0953  34BE               	retlw	190
 11918  0954                     i1l6977:	
 11919  0954  34BF               	retlw	191
 11920  0955                     i1l6985:	
 11921  0955  34E4               	retlw	228
 11922  0956                     i1l6993:	
 11923  0956  34E5               	retlw	229
 11924  0957                     i1l6997:	
 11925  0957  34C0               	retlw	192
 11926  0958                     i1l7001:	
 11927  0958  34C1               	retlw	193
 11928  0959                     i1l7005:	
 11929  0959  34E6               	retlw	230
 11930  095A                     i1l7009:	
 11931  095A  34C2               	retlw	194
 11932  095B                     i1l7013:	
 11933  095B  34C3               	retlw	195
 11934  095C                     i1l7017:	
 11935  095C  34C4               	retlw	196
 11936  095D                     i1l7021:	
 11937  095D  34C5               	retlw	197
 11938  095E                     i1l7025:	
 11939  095E  34C6               	retlw	198
 11940  095F                     i1l7029:	
 11941  095F  34C7               	retlw	199
 11942  0960                     i1l7033:	
 11943  0960  3421               	retlw	33
 11944  0961                     i1l7037:	
 11945  0961  3422               	retlw	34
 11946  0962                     i1l7041:	
 11947  0962  34CC               	retlw	204
 11948  0963                     i1l7045:	
 11949  0963  343B               	retlw	59
 11950  0964                     i1l7049:	
 11951  0964  3425               	retlw	37
 11952  0965                     i1l7053:	
 11953  0965  343F               	retlw	63
 11954  0966                     i1l7057:	
 11955  0966  342A               	retlw	42
 11956  0967                     i1l7061:	
 11957  0967  3428               	retlw	40
 11958  0968                     i1l7065:	
 11959  0968  3429               	retlw	41
 11960  0969                     i1l7069:	
 11961  0969  342B               	retlw	43
 11962  096A                     i1l7073:	
 11963  096A  345E               	retlw	94
 11964  096B                     i1l7077:	
 11965  096B  342C               	retlw	44
 11966  096C                     i1l7081:	
 11967  096C  342E               	retlw	46
 11968  096D                     i1l7085:	
 11969  096D  342F               	retlw	47
 11970  096E                     i1l7089:	
 11971  096E  345C               	retlw	92
 11972  096F                     i1l7093:	
 11973  096F  347C               	retlw	124
 11974  0970                     i1l7097:	
 11975  0970  34ED               	retlw	237
 11976  0971                     i1l7101:	
 11977  0971  34D9               	retlw	217
 11978  0972                     i1l7105:	
 11979  0972  34DA               	retlw	218
 11980  0973                     i1l7119:	
 11981  0973  0870               	movf	convDig_LCD@dig,w
 11982                           
 11983                           ; Switch size 1, requested type "speed"
 11984                           ; Number of cases is 94, Range of values is 0 to 93
 11985                           ; switch strategies available:
 11986                           ; Name         Instructions Cycles
 11987                           ; simple_byte          283   142 (average)
 11988                           ; jumptable            260     6 (fixed)
 11989                           ; rangetable            98     6 (fixed)
 11990                           ; spacedrange          194     9 (fixed)
 11991                           ; locatedrange          94     3 (fixed)
 11992                           ;	Chosen strategy is simple_byte
 11993  0974  3A00               	xorlw	0	; case 0
 11994  0975  1903               	skipnz
 11995  0976  291D               	goto	i1l6737
 11996  0977  3A01               	xorlw	1	; case 1
 11997  0978  1903               	skipnz
 11998  0979  291E               	goto	i1l6741
 11999  097A  3A03               	xorlw	3	; case 2
 12000  097B  1903               	skipnz
 12001  097C  291F               	goto	i1l6745
 12002  097D  3A01               	xorlw	1	; case 3
 12003  097E  1903               	skipnz
 12004  097F  2920               	goto	i1l6749
 12005  0980  3A07               	xorlw	7	; case 4
 12006  0981  1903               	skipnz
 12007  0982  2921               	goto	i1l6753
 12008  0983  3A01               	xorlw	1	; case 5
 12009  0984  1903               	skipnz
 12010  0985  2922               	goto	i1l6757
 12011  0986  3A03               	xorlw	3	; case 6
 12012  0987  1903               	skipnz
 12013  0988  2923               	goto	i1l6761
 12014  0989  3A01               	xorlw	1	; case 7
 12015  098A  1903               	skipnz
 12016  098B  2924               	goto	i1l6765
 12017  098C  3A0F               	xorlw	15	; case 8
 12018  098D  1903               	skipnz
 12019  098E  2925               	goto	i1l6769
 12020  098F  3A01               	xorlw	1	; case 9
 12021  0990  1903               	skipnz
 12022  0991  2926               	goto	i1l6773
 12023  0992  3A03               	xorlw	3	; case 10
 12024  0993  1903               	skipnz
 12025  0994  2927               	goto	i1l6777
 12026  0995  3A01               	xorlw	1	; case 11
 12027  0996  1903               	skipnz
 12028  0997  2928               	goto	i1l6781
 12029  0998  3A07               	xorlw	7	; case 12
 12030  0999  1903               	skipnz
 12031  099A  2929               	goto	i1l6785
 12032  099B  3A01               	xorlw	1	; case 13
 12033  099C  1903               	skipnz
 12034  099D  292A               	goto	i1l6789
 12035  099E  3A03               	xorlw	3	; case 14
 12036  099F  1903               	skipnz
 12037  09A0  292B               	goto	i1l6793
 12038  09A1  3A01               	xorlw	1	; case 15
 12039  09A2  1903               	skipnz
 12040  09A3  292C               	goto	i1l6797
 12041  09A4  3A1F               	xorlw	31	; case 16
 12042  09A5  1903               	skipnz
 12043  09A6  292D               	goto	i1l6801
 12044  09A7  3A01               	xorlw	1	; case 17
 12045  09A8  1903               	skipnz
 12046  09A9  292E               	goto	i1l6805
 12047  09AA  3A03               	xorlw	3	; case 18
 12048  09AB  1903               	skipnz
 12049  09AC  292F               	goto	i1l6809
 12050  09AD  3A01               	xorlw	1	; case 19
 12051  09AE  1903               	skipnz
 12052  09AF  2930               	goto	i1l6813
 12053  09B0  3A07               	xorlw	7	; case 20
 12054  09B1  1903               	skipnz
 12055  09B2  2931               	goto	i1l6817
 12056  09B3  3A01               	xorlw	1	; case 21
 12057  09B4  1903               	skipnz
 12058  09B5  2932               	goto	i1l6821
 12059  09B6  3A03               	xorlw	3	; case 22
 12060  09B7  1903               	skipnz
 12061  09B8  2933               	goto	i1l6825
 12062  09B9  3A01               	xorlw	1	; case 23
 12063  09BA  1903               	skipnz
 12064  09BB  2934               	goto	i1l6829
 12065  09BC  3A0F               	xorlw	15	; case 24
 12066  09BD  1903               	skipnz
 12067  09BE  2935               	goto	i1l6833
 12068  09BF  3A01               	xorlw	1	; case 25
 12069  09C0  1903               	skipnz
 12070  09C1  2936               	goto	i1l6837
 12071  09C2  3A03               	xorlw	3	; case 26
 12072  09C3  1903               	skipnz
 12073  09C4  2937               	goto	i1l6841
 12074  09C5  3A01               	xorlw	1	; case 27
 12075  09C6  1903               	skipnz
 12076  09C7  2938               	goto	i1l6845
 12077  09C8  3A07               	xorlw	7	; case 28
 12078  09C9  1903               	skipnz
 12079  09CA  2939               	goto	i1l6849
 12080  09CB  3A01               	xorlw	1	; case 29
 12081  09CC  1903               	skipnz
 12082  09CD  293A               	goto	i1l6853
 12083  09CE  3A03               	xorlw	3	; case 30
 12084  09CF  1903               	skipnz
 12085  09D0  293B               	goto	i1l6857
 12086  09D1  3A01               	xorlw	1	; case 31
 12087  09D2  1903               	skipnz
 12088  09D3  293C               	goto	i1l6861
 12089  09D4  3A3F               	xorlw	63	; case 32
 12090  09D5  1903               	skipnz
 12091  09D6  293D               	goto	i1l6865
 12092  09D7  3A01               	xorlw	1	; case 33
 12093  09D8  1903               	skipnz
 12094  09D9  293E               	goto	i1l6869
 12095  09DA  3A03               	xorlw	3	; case 34
 12096  09DB  1903               	skipnz
 12097  09DC  293F               	goto	i1l6873
 12098  09DD  3A01               	xorlw	1	; case 35
 12099  09DE  1903               	skipnz
 12100  09DF  2940               	goto	i1l6877
 12101  09E0  3A07               	xorlw	7	; case 36
 12102  09E1  1903               	skipnz
 12103  09E2  2941               	goto	i1l6881
 12104  09E3  3A01               	xorlw	1	; case 37
 12105  09E4  1903               	skipnz
 12106  09E5  2942               	goto	i1l6885
 12107  09E6  3A03               	xorlw	3	; case 38
 12108  09E7  1903               	skipnz
 12109  09E8  2943               	goto	i1l6889
 12110  09E9  3A01               	xorlw	1	; case 39
 12111  09EA  1903               	skipnz
 12112  09EB  2944               	goto	i1l6893
 12113  09EC  3A0F               	xorlw	15	; case 40
 12114  09ED  1903               	skipnz
 12115  09EE  2945               	goto	i1l6897
 12116  09EF  3A01               	xorlw	1	; case 41
 12117  09F0  1903               	skipnz
 12118  09F1  2927               	goto	i1l6777
 12119  09F2  3A03               	xorlw	3	; case 42
 12120  09F3  1903               	skipnz
 12121  09F4  2946               	goto	i1l6905
 12122  09F5  3A01               	xorlw	1	; case 43
 12123  09F6  1903               	skipnz
 12124  09F7  2947               	goto	i1l6909
 12125  09F8  3A07               	xorlw	7	; case 44
 12126  09F9  1903               	skipnz
 12127  09FA  2948               	goto	i1l6913
 12128  09FB  3A01               	xorlw	1	; case 45
 12129  09FC  1903               	skipnz
 12130  09FD  2949               	goto	i1l6917
 12131  09FE  3A03               	xorlw	3	; case 46
 12132  09FF  1903               	skipnz
 12133  0A00  292B               	goto	i1l6793
 12134  0A01  3A01               	xorlw	1	; case 47
 12135  0A02  1903               	skipnz
 12136  0A03  294A               	goto	i1l6925
 12137  0A04  3A1F               	xorlw	31	; case 48
 12138  0A05  1903               	skipnz
 12139  0A06  294B               	goto	i1l6929
 12140  0A07  3A01               	xorlw	1	; case 49
 12141  0A08  1903               	skipnz
 12142  0A09  294C               	goto	i1l6933
 12143  0A0A  3A03               	xorlw	3	; case 50
 12144  0A0B  1903               	skipnz
 12145  0A0C  294D               	goto	i1l6937
 12146  0A0D  3A01               	xorlw	1	; case 51
 12147  0A0E  1903               	skipnz
 12148  0A0F  294E               	goto	i1l6941
 12149  0A10  3A07               	xorlw	7	; case 52
 12150  0A11  1903               	skipnz
 12151  0A12  294F               	goto	i1l6945
 12152  0A13  3A01               	xorlw	1	; case 53
 12153  0A14  1903               	skipnz
 12154  0A15  2950               	goto	i1l6949
 12155  0A16  3A03               	xorlw	3	; case 54
 12156  0A17  1903               	skipnz
 12157  0A18  2951               	goto	i1l6953
 12158  0A19  3A01               	xorlw	1	; case 55
 12159  0A1A  1903               	skipnz
 12160  0A1B  2952               	goto	i1l6957
 12161  0A1C  3A0F               	xorlw	15	; case 56
 12162  0A1D  1903               	skipnz
 12163  0A1E  2933               	goto	i1l6825
 12164  0A1F  3A01               	xorlw	1	; case 57
 12165  0A20  1903               	skipnz
 12166  0A21  2953               	goto	i1l6965
 12167  0A22  3A03               	xorlw	3	; case 58
 12168  0A23  1903               	skipnz
 12169  0A24  2934               	goto	i1l6829
 12170  0A25  3A01               	xorlw	1	; case 59
 12171  0A26  1903               	skipnz
 12172  0A27  2929               	goto	i1l6785
 12173  0A28  3A07               	xorlw	7	; case 60
 12174  0A29  1903               	skipnz
 12175  0A2A  2954               	goto	i1l6977
 12176  0A2B  3A01               	xorlw	1	; case 61
 12177  0A2C  1903               	skipnz
 12178  0A2D  293A               	goto	i1l6853
 12179  0A2E  3A03               	xorlw	3	; case 62
 12180  0A2F  1903               	skipnz
 12181  0A30  2955               	goto	i1l6985
 12182  0A31  3A01               	xorlw	1	; case 63
 12183  0A32  1903               	skipnz
 12184  0A33  2944               	goto	i1l6893
 12185  0A34  3A7F               	xorlw	127	; case 64
 12186  0A35  1903               	skipnz
 12187  0A36  2956               	goto	i1l6993
 12188  0A37  3A01               	xorlw	1	; case 65
 12189  0A38  1903               	skipnz
 12190  0A39  2957               	goto	i1l6997
 12191  0A3A  3A03               	xorlw	3	; case 66
 12192  0A3B  1903               	skipnz
 12193  0A3C  2958               	goto	i1l7001
 12194  0A3D  3A01               	xorlw	1	; case 67
 12195  0A3E  1903               	skipnz
 12196  0A3F  2959               	goto	i1l7005
 12197  0A40  3A07               	xorlw	7	; case 68
 12198  0A41  1903               	skipnz
 12199  0A42  295A               	goto	i1l7009
 12200  0A43  3A01               	xorlw	1	; case 69
 12201  0A44  1903               	skipnz
 12202  0A45  295B               	goto	i1l7013
 12203  0A46  3A03               	xorlw	3	; case 70
 12204  0A47  1903               	skipnz
 12205  0A48  295C               	goto	i1l7017
 12206  0A49  3A01               	xorlw	1	; case 71
 12207  0A4A  1903               	skipnz
 12208  0A4B  295D               	goto	i1l7021
 12209  0A4C  3A0F               	xorlw	15	; case 72
 12210  0A4D  1903               	skipnz
 12211  0A4E  295E               	goto	i1l7025
 12212  0A4F  3A01               	xorlw	1	; case 73
 12213  0A50  1903               	skipnz
 12214  0A51  295F               	goto	i1l7029
 12215  0A52  3A03               	xorlw	3	; case 74
 12216  0A53  1903               	skipnz
 12217  0A54  2960               	goto	i1l7033
 12218  0A55  3A01               	xorlw	1	; case 75
 12219  0A56  1903               	skipnz
 12220  0A57  2961               	goto	i1l7037
 12221  0A58  3A07               	xorlw	7	; case 76
 12222  0A59  1903               	skipnz
 12223  0A5A  2962               	goto	i1l7041
 12224  0A5B  3A01               	xorlw	1	; case 77
 12225  0A5C  1903               	skipnz
 12226  0A5D  2963               	goto	i1l7045
 12227  0A5E  3A03               	xorlw	3	; case 78
 12228  0A5F  1903               	skipnz
 12229  0A60  2964               	goto	i1l7049
 12230  0A61  3A01               	xorlw	1	; case 79
 12231  0A62  1903               	skipnz
 12232  0A63  2965               	goto	i1l7053
 12233  0A64  3A1F               	xorlw	31	; case 80
 12234  0A65  1903               	skipnz
 12235  0A66  2966               	goto	i1l7057
 12236  0A67  3A01               	xorlw	1	; case 81
 12237  0A68  1903               	skipnz
 12238  0A69  2967               	goto	i1l7061
 12239  0A6A  3A03               	xorlw	3	; case 82
 12240  0A6B  1903               	skipnz
 12241  0A6C  2968               	goto	i1l7065
 12242  0A6D  3A01               	xorlw	1	; case 83
 12243  0A6E  1903               	skipnz
 12244  0A6F  2969               	goto	i1l7069
 12245  0A70  3A07               	xorlw	7	; case 84
 12246  0A71  1903               	skipnz
 12247  0A72  296A               	goto	i1l7073
 12248  0A73  3A01               	xorlw	1	; case 85
 12249  0A74  1903               	skipnz
 12250  0A75  296B               	goto	i1l7077
 12251  0A76  3A03               	xorlw	3	; case 86
 12252  0A77  1903               	skipnz
 12253  0A78  296C               	goto	i1l7081
 12254  0A79  3A01               	xorlw	1	; case 87
 12255  0A7A  1903               	skipnz
 12256  0A7B  296D               	goto	i1l7085
 12257  0A7C  3A0F               	xorlw	15	; case 88
 12258  0A7D  1903               	skipnz
 12259  0A7E  296E               	goto	i1l7089
 12260  0A7F  3A01               	xorlw	1	; case 89
 12261  0A80  1903               	skipnz
 12262  0A81  296F               	goto	i1l7093
 12263  0A82  3A03               	xorlw	3	; case 90
 12264  0A83  1903               	skipnz
 12265  0A84  2970               	goto	i1l7097
 12266  0A85  3A01               	xorlw	1	; case 91
 12267  0A86  1903               	skipnz
 12268  0A87  2971               	goto	i1l7101
 12269  0A88  3A07               	xorlw	7	; case 92
 12270  0A89  1903               	skipnz
 12271  0A8A  2972               	goto	i1l7105
 12272  0A8B  3A01               	xorlw	1	; case 93
 12273  0A8C  1903               	skipnz
 12274  0A8D  296A               	goto	i1l7073
 12275  0A8E  293F               	goto	i1l6873
 12276  0A8F  0008               	return
 12277  0A90                     __end_of_convDig_LCD:	
 12278  0A90                     __ptext2319:	
 12279 ;; =============== function _I2CRestart ends ============
 12280                           
 12281                           
 12282 ;; *************** function _ConvKeyNum *****************
 12283 ;; Defined at:
 12284 ;;		line 743 in file "prog.c"
 12285 ;; Parameters:    Size  Location     Type
 12286 ;;  Num             1    wreg     unsigned char 
 12287 ;; Auto vars:     Size  Location     Type
 12288 ;;  Num             1    0[COMMON] unsigned char 
 12289 ;; Return value:  Size  Location     Type
 12290 ;;                  1    wreg      unsigned char 
 12291 ;; Registers used:
 12292 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12293 ;; Tracked objects:
 12294 ;;		On entry : 60/0
 12295 ;;		On exit  : 60/0
 12296 ;;		Unchanged: FFF9F/0
 12297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12298 ;;      Params:         0       0       0       0       0
 12299 ;;      Locals:         1       0       0       0       0
 12300 ;;      Temps:          0       0       0       0       0
 12301 ;;      Totals:         1       0       0       0       0
 12302 ;;Total ram usage:        1 bytes
 12303 ;; Hardware stack levels used:    1
 12304 ;; This function calls:
 12305 ;;		Nothing
 12306 ;; This function is called by:
 12307 ;;		_F
 12308 ;; This function uses a non-reentrant model
 12309 ;;
 12310  0A90                     _ConvKeyNum:	
 12311                           
 12312                           ; Regs used in _ConvKeyNum: [wreg-fsr0h+status,2+status,0]
 12313                           ;ConvKeyNum@Num stored from wreg
 12314  0A90  00F0               	movwf	ConvKeyNum@Num
 12315                           
 12316                           ;prog.c: 744: switch (Num){
 12317  0A91  2AA2               	goto	i1l7399
 12318  0A92                     i1l7329:	
 12319  0A92  3421               	retlw	33
 12320  0A93                     i1l7333:	
 12321  0A93  342B               	retlw	43
 12322  0A94                     i1l7337:	
 12323  0A94  342A               	retlw	42
 12324  0A95                     i1l7341:	
 12325  0A95  3429               	retlw	41
 12326  0A96                     i1l7345:	
 12327  0A96  3428               	retlw	40
 12328  0A97                     i1l7349:	
 12329  0A97  342D               	retlw	45
 12330  0A98                     i1l7353:	
 12331  0A98  3427               	retlw	39
 12332  0A99                     i1l7357:	
 12333  0A99  3424               	retlw	36
 12334  0A9A                     i1l7361:	
 12335  0A9A  3425               	retlw	37
 12336  0A9B                     i1l7365:	
 12337  0A9B  3426               	retlw	38
 12338  0A9C                     i1l7369:	
 12339  0A9C  3423               	retlw	35
 12340  0A9D                     i1l7373:	
 12341  0A9D  3422               	retlw	34
 12342  0A9E                     i1l7377:	
 12343  0A9E  3420               	retlw	32
 12344  0A9F                     i1l7381:	
 12345  0A9F  341E               	retlw	30
 12346  0AA0                     i1l7385:	
 12347  0AA0  342C               	retlw	44
 12348  0AA1                     i1l7389:	
 12349  0AA1  341F               	retlw	31
 12350  0AA2                     i1l7399:	
 12351  0AA2  0870               	movf	ConvKeyNum@Num,w
 12352                           
 12353                           ; Switch size 1, requested type "speed"
 12354                           ; Number of cases is 16, Range of values is 0 to 15
 12355                           ; switch strategies available:
 12356                           ; Name         Instructions Cycles
 12357                           ; direct_byte           56     8 (fixed)
 12358                           ; simple_byte           49    25 (average)
 12359                           ; jumptable            260     6 (fixed)
 12360                           ; rangetable            20     6 (fixed)
 12361                           ; spacedrange           38     9 (fixed)
 12362                           ; locatedrange          16     3 (fixed)
 12363                           ;	Chosen strategy is direct_byte
 12364  0AA3  0084               	movwf	4
 12365  0AA4  3010               	movlw	16
 12366  0AA5  0204               	subwf	4,w
 12367  0AA6  1803               	skipnc
 12368  0AA7  3400               	retlw	0
 12369  0AA8  3018               	movlw	high i1S11383
 12370  0AA9  008A               	movwf	10
 12371  0AAA  1003               	clrc
 12372  0AAB  0D04               	rlf	4,w
 12373  0AAC  0704               	addwf	4,w
 12374  0AAD  3E00               	addlw	low i1S11383
 12375  0AAE  0082               	movwf	2
 12376  0AAF  0008               	return
 12377  0AB0                     __end_of_ConvKeyNum:	
 12378  0AB0                     __ptext2309:	
 12379 ;; =============== function i1_I2CInit ends ============
 12380                           
 12381                           
 12382 ;; *************** function i1_FillMinutes *****************
 12383 ;; Defined at:
 12384 ;;		line 1189 in file "prog.c"
 12385 ;; Parameters:    Size  Location     Type
 12386 ;;		None
 12387 ;; Auto vars:     Size  Location     Type
 12388 ;;		None
 12389 ;; Return value:  Size  Location     Type
 12390 ;;		None               void
 12391 ;; Registers used:
 12392 ;;		wreg
 12393 ;; Tracked objects:
 12394 ;;		On entry : 60/0
 12395 ;;		On exit  : 60/0
 12396 ;;		Unchanged: FFF9F/0
 12397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12398 ;;      Params:         0       0       0       0       0
 12399 ;;      Locals:         0       0       0       0       0
 12400 ;;      Temps:          0       0       0       0       0
 12401 ;;      Totals:         0       0       0       0       0
 12402 ;;Total ram usage:        0 bytes
 12403 ;; Hardware stack levels used:    1
 12404 ;; This function calls:
 12405 ;;		Nothing
 12406 ;; This function is called by:
 12407 ;;		_F
 12408 ;; This function uses a non-reentrant model
 12409 ;;
 12410  0AB0                     i1_FillMinutes:	
 12411                           
 12412                           ;prog.c: 1190: Minutes = Clock - 3000;
 12413                           
 12414                           ; Regs used in i1_FillMinutes: [wreg]
 12415  0AB0  1683               	bsf	3,5	;RP0=1, select bank3
 12416  0AB1  1703               	bsf	3,6	;RP1=1, select bank3
 12417  0AB2  085D               	movf	(_Clock+3)^(0+384),w
 12418  0AB3  1283               	bcf	3,5	;RP0=0, select bank0
 12419  0AB4  1303               	bcf	3,6	;RP1=0, select bank0
 12420  0AB5  00D5               	movwf	_Minutes+3
 12421  0AB6  1683               	bsf	3,5	;RP0=1, select bank3
 12422  0AB7  1703               	bsf	3,6	;RP1=1, select bank3
 12423  0AB8  085C               	movf	(_Clock+2)^(0+384),w
 12424  0AB9  1283               	bcf	3,5	;RP0=0, select bank0
 12425  0ABA  1303               	bcf	3,6	;RP1=0, select bank0
 12426  0ABB  00D4               	movwf	_Minutes+2
 12427  0ABC  1683               	bsf	3,5	;RP0=1, select bank3
 12428  0ABD  1703               	bsf	3,6	;RP1=1, select bank3
 12429  0ABE  085B               	movf	(_Clock+1)^(0+384),w
 12430  0ABF  1283               	bcf	3,5	;RP0=0, select bank0
 12431  0AC0  1303               	bcf	3,6	;RP1=0, select bank0
 12432  0AC1  00D3               	movwf	_Minutes+1
 12433  0AC2  1683               	bsf	3,5	;RP0=1, select bank3
 12434  0AC3  1703               	bsf	3,6	;RP1=1, select bank3
 12435  0AC4  085A               	movf	_Clock^(0+384),w
 12436  0AC5  1283               	bcf	3,5	;RP0=0, select bank0
 12437  0AC6  1303               	bcf	3,6	;RP1=0, select bank0
 12438  0AC7  00D2               	movwf	_Minutes
 12439  0AC8  3048               	movlw	72
 12440  0AC9  07D2               	addwf	_Minutes,f
 12441  0ACA  30F4               	movlw	244
 12442  0ACB  1803               	skipnc
 12443  0ACC  30F5               	movlw	245
 12444  0ACD  07D3               	addwf	_Minutes+1,f
 12445  0ACE  30FF               	movlw	255
 12446  0ACF  1C03               	skipc
 12447  0AD0  07D4               	addwf	_Minutes+2,f
 12448  0AD1  1C03               	skipc
 12449  0AD2  07D5               	addwf	_Minutes+3,f
 12450  0AD3  0008               	return
 12451  0AD4                     __end_ofi1_FillMinutes:	
 12452  0AD4                     __ptext2300:	
 12453 ;; =============== function _BCD_to_DEC ends ============
 12454                           
 12455                           
 12456 ;; *************** function _SendSymbolToLCD *****************
 12457 ;; Defined at:
 12458 ;;		line 615 in file "prog.c"
 12459 ;; Parameters:    Size  Location     Type
 12460 ;;  Symb            1    wreg     unsigned char 
 12461 ;; Auto vars:     Size  Location     Type
 12462 ;;  Symb            1    8[COMMON] unsigned char 
 12463 ;;  a               2    9[COMMON] int 
 12464 ;;  Smb             1   11[COMMON] unsigned char 
 12465 ;; Return value:  Size  Location     Type
 12466 ;;		None               void
 12467 ;; Registers used:
 12468 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 12469 ;; Tracked objects:
 12470 ;;		On entry : 60/100
 12471 ;;		On exit  : 0/0
 12472 ;;		Unchanged: FFE00/0
 12473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12474 ;;      Params:         0       0       0       0       0
 12475 ;;      Locals:         8       0       0       0       0
 12476 ;;      Temps:          1       0       0       0       0
 12477 ;;      Totals:         9       0       0       0       0
 12478 ;;Total ram usage:        9 bytes
 12479 ;; Hardware stack levels used:    1
 12480 ;; Hardware stack levels required when called:    1
 12481 ;; This function calls:
 12482 ;;		_delay
 12483 ;; This function is called by:
 12484 ;;		_F
 12485 ;; This function uses a non-reentrant model
 12486 ;;
 12487  0AD4                     _SendSymbolToLCD:	
 12488                           
 12489                           ; Regs used in _SendSymbolToLCD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
 12490                           ;SendSymbolToLCD@Symb stored from wreg
 12491  0AD4  00F8               	movwf	SendSymbolToLCD@Symb
 12492  0AD5  3008               	movlw	8
 12493                           
 12494                           ;prog.c: 616: unsigned char Smb = 0;
 12495  0AD6  01FB               	clrf	SendSymbolToLCD@Smb
 12496                           
 12497                           ;prog.c: 617: for(int a = 8; a>0; a--){
 12498  0AD7  00F9               	movwf	SendSymbolToLCD@a
 12499  0AD8  01FA               	clrf	SendSymbolToLCD@a+1
 12500  0AD9                     i1l982:	
 12501                           
 12502                           ;prog.c: 618: Smb*=2;
 12503  0AD9  1003               	clrc
 12504  0ADA  0DFB               	rlf	SendSymbolToLCD@Smb,f
 12505                           
 12506                           ;prog.c: 619: if(Symb%2==1){
 12507  0ADB  1878               	btfsc	SendSymbolToLCD@Symb,0
 12508                           
 12509                           ;prog.c: 620: Smb++;
 12510  0ADC  0AFB               	incf	SendSymbolToLCD@Smb,f
 12511                           
 12512                           ;prog.c: 621: }
 12513                           ;prog.c: 622: Symb/=2;
 12514  0ADD  1003               	clrc
 12515  0ADE  0CF8               	rrf	SendSymbolToLCD@Symb,f
 12516  0ADF  0064               	clrwdt	;#
 12517  0AE0  30FF               	movlw	-1
 12518  0AE1  07F9               	addwf	SendSymbolToLCD@a,f
 12519  0AE2  1C03               	skipc
 12520  0AE3  03FA               	decf	SendSymbolToLCD@a+1,f
 12521  0AE4  087A               	movf	SendSymbolToLCD@a+1,w
 12522  0AE5  3A80               	xorlw	128
 12523  0AE6  00FF               	movwf	127
 12524  0AE7  3080               	movlw	128
 12525  0AE8  027F               	subwf	127,w
 12526  0AE9  1D03               	skipz
 12527  0AEA  2AED               	goto	u388_25
 12528  0AEB  3001               	movlw	1
 12529  0AEC  0279               	subwf	SendSymbolToLCD@a,w
 12530  0AED                     u388_25:	
 12531  0AED  1803               	skipnc
 12532  0AEE  2AD9               	goto	i1l982
 12533                           
 12534                           ;prog.c: 624: }
 12535                           ;prog.c: 626: RC1 = 1;
 12536  0AEF  1283               	bcf	3,5	;RP0=0, select bank0
 12537  0AF0  1303               	bcf	3,6	;RP1=0, select bank0
 12538  0AF1  1487               	bsf	7,1
 12539                           
 12540                           ;prog.c: 627: PORTA = (0b11110000 & (Smb * 16)) / 4 | (LCD_Light_On == 1 ? 0b00000010 : 
      +                          0b00000000);
 12541  0AF2  195D               	btfsc	_LCD_Light_On/(0+8),_LCD_Light_On& (0+7)
 12542  0AF3  2AF6               	goto	i1l7253
 12543  0AF4  01F4               	clrf	_SendSymbolToLCD$1335
 12544  0AF5  2AF8               	goto	L42
 12545  0AF6                     i1l7253:	
 12546  0AF6  3002               	movlw	2
 12547  0AF7  00F4               	movwf	_SendSymbolToLCD$1335
 12548  0AF8                     L42:	
 12549  0AF8  01F5               	clrf	_SendSymbolToLCD$1335+1
 12550  0AF9  087B               	movf	SendSymbolToLCD@Smb,w
 12551  0AFA  00F3               	movwf	??_SendSymbolToLCD
 12552  0AFB  1003               	clrc
 12553  0AFC  0DF3               	rlf	??_SendSymbolToLCD,f
 12554  0AFD  1003               	clrc
 12555  0AFE  0D73               	rlf	??_SendSymbolToLCD,w
 12556  0AFF  393C               	andlw	60
 12557  0B00  0474               	iorwf	_SendSymbolToLCD$1335,w
 12558  0B01  0085               	movwf	5	;volatile
 12559                           
 12560                           ;prog.c: 628: RC0 = 1;
 12561  0B02  1407               	bsf	7,0
 12562  0B03  0064               	clrwdt	;#
 12563  0B04  300A               	movlw	10
 12564                           
 12565                           ;prog.c: 630: delay(10, 1);
 12566  0B05  01F0               	clrf	?_delay
 12567  0B06  0AF0               	incf	?_delay,f
 12568  0B07  01F1               	clrf	?_delay+1
 12569  0B08  233E  120A  158A   	fcall	_delay
 12570                           
 12571                           ;prog.c: 631: RC0 = 0;
 12572  0B0B  1283               	bcf	3,5	;RP0=0, select bank0
 12573  0B0C  1303               	bcf	3,6	;RP1=0, select bank0
 12574  0B0D  1007               	bcf	7,0
 12575                           
 12576                           ;prog.c: 632: RC1 = 0;
 12577  0B0E  1087               	bcf	7,1
 12578  0B0F  0064               	clrwdt	;#
 12579                           
 12580                           ;prog.c: 634: delay(25, 5);
 12581  0B10  3005               	movlw	5
 12582  0B11  00F0               	movwf	?_delay
 12583  0B12  3019               	movlw	25
 12584  0B13  01F1               	clrf	?_delay+1
 12585  0B14  233E  120A  158A   	fcall	_delay
 12586                           
 12587                           ;prog.c: 636: RC1 = 1;
 12588  0B17  1283               	bcf	3,5	;RP0=0, select bank0
 12589  0B18  1303               	bcf	3,6	;RP1=0, select bank0
 12590  0B19  1487               	bsf	7,1
 12591                           
 12592                           ;prog.c: 637: PORTA = (0b11110000 & Smb) / 4 | (LCD_Light_On == 1 ? 0b00000010 : 0b00000
      +                          000);
 12593  0B1A  195D               	btfsc	_LCD_Light_On/(0+8),_LCD_Light_On& (0+7)
 12594  0B1B  2B1E               	goto	i1l7277
 12595  0B1C  01F6               	clrf	_SendSymbolToLCD$1336
 12596  0B1D  2B20               	goto	L43
 12597  0B1E                     i1l7277:	
 12598  0B1E  3002               	movlw	2
 12599  0B1F  00F6               	movwf	_SendSymbolToLCD$1336
 12600  0B20                     L43:	
 12601  0B20  01F7               	clrf	_SendSymbolToLCD$1336+1
 12602  0B21  087B               	movf	SendSymbolToLCD@Smb,w
 12603  0B22  00F3               	movwf	??_SendSymbolToLCD
 12604  0B23  1003               	clrc
 12605  0B24  0CF3               	rrf	??_SendSymbolToLCD,f
 12606  0B25  1003               	clrc
 12607  0B26  0CF3               	rrf	??_SendSymbolToLCD,f
 12608  0B27  0873               	movf	??_SendSymbolToLCD,w
 12609  0B28  393C               	andlw	60
 12610  0B29  0476               	iorwf	_SendSymbolToLCD$1336,w
 12611  0B2A  0085               	movwf	5	;volatile
 12612                           
 12613                           ;prog.c: 638: RC0 = 1;
 12614  0B2B  1407               	bsf	7,0
 12615  0B2C  0064               	clrwdt	;#
 12616  0B2D  300A               	movlw	10
 12617                           
 12618                           ;prog.c: 640: delay(10, 1);
 12619  0B2E  01F0               	clrf	?_delay
 12620  0B2F  0AF0               	incf	?_delay,f
 12621  0B30  01F1               	clrf	?_delay+1
 12622  0B31  233E  120A  158A   	fcall	_delay
 12623                           
 12624                           ;prog.c: 641: RC0 = 0;
 12625  0B34  1283               	bcf	3,5	;RP0=0, select bank0
 12626  0B35  1303               	bcf	3,6	;RP1=0, select bank0
 12627  0B36  1007               	bcf	7,0
 12628                           
 12629                           ;prog.c: 642: RC1 = 0;
 12630  0B37  1087               	bcf	7,1
 12631  0B38  0064               	clrwdt	;#
 12632                           
 12633                           ;prog.c: 644: delay(25, 5);
 12634  0B39  3005               	movlw	5
 12635  0B3A  00F0               	movwf	?_delay
 12636  0B3B  3019               	movlw	25
 12637  0B3C  01F1               	clrf	?_delay+1
 12638  0B3D  2B3E               	ljmp	_delay
 12639  0B3E                     __end_of_SendSymbolToLCD:	
 12640  0B3E                     __ptext2320:	
 12641 ;; =============== function _ConvKeyNum ends ============
 12642                           
 12643                           
 12644 ;; *************** function _delay *****************
 12645 ;; Defined at:
 12646 ;;		line 605 in file "prog.c"
 12647 ;; Parameters:    Size  Location     Type
 12648 ;;  del             1    wreg     unsigned char 
 12649 ;;  count           2    0[COMMON] unsigned int 
 12650 ;; Auto vars:     Size  Location     Type
 12651 ;;  del             1    2[COMMON] unsigned char 
 12652 ;; Return value:  Size  Location     Type
 12653 ;;		None               void
 12654 ;; Registers used:
 12655 ;;		wreg, status,2, status,0
 12656 ;; Tracked objects:
 12657 ;;		On entry : 0/100
 12658 ;;		On exit  : 0/100
 12659 ;;		Unchanged: FFF9F/0
 12660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12661 ;;      Params:         2       0       0       0       0
 12662 ;;      Locals:         1       0       0       0       0
 12663 ;;      Temps:          0       0       0       0       0
 12664 ;;      Totals:         3       0       0       0       0
 12665 ;;Total ram usage:        3 bytes
 12666 ;; Hardware stack levels used:    1
 12667 ;; This function calls:
 12668 ;;		Nothing
 12669 ;; This function is called by:
 12670 ;;		_SendSymbolToLCD
 12671 ;; This function uses a non-reentrant model
 12672 ;;
 12673  0B3E                     _delay:	
 12674                           
 12675                           ; Regs used in _delay: [wreg+status,2+status,0]
 12676                           ;delay@del stored from wreg
 12677  0B3E  00F2               	movwf	delay@del
 12678  0B3F                     i1l7231:	
 12679                           ;prog.c: 606: while(count > 0){
 12680                           
 12681  0B3F  0871               	movf	delay@count+1,w
 12682  0B40  0470               	iorwf	delay@count,w
 12683  0B41  1903               	btfsc	3,2
 12684  0B42  0008               	return
 12685                           
 12686                           ;prog.c: 607: TMR2 = 0;
 12687  0B43  1283               	bcf	3,5	;RP0=0, select bank0
 12688  0B44  1303               	bcf	3,6	;RP1=0, select bank0
 12689  0B45  0191               	clrf	17	;volatile
 12690                           
 12691                           ;prog.c: 608: PR2 = del;
 12692  0B46  0872               	movf	delay@del,w
 12693  0B47  1683               	bsf	3,5	;RP0=1, select bank1
 12694  0B48  0092               	movwf	18	;volatile
 12695                           
 12696                           ;prog.c: 609: TMR2IF = 0;
 12697  0B49  1283               	bcf	3,5	;RP0=0, select bank0
 12698  0B4A  108C               	bcf	12,1
 12699  0B4B                     i1l975:	
 12700                           ;prog.c: 610: while(!TMR2IF);
 12701                           
 12702  0B4B  1C8C               	btfss	12,1
 12703  0B4C  2B4B               	goto	i1l975
 12704                           
 12705                           ;prog.c: 611: count--;
 12706  0B4D  3001               	movlw	1
 12707  0B4E  02F0               	subwf	delay@count,f
 12708  0B4F  3000               	movlw	0
 12709  0B50  1C03               	skipc
 12710  0B51  03F1               	decf	delay@count+1,f
 12711  0B52  02F1               	subwf	delay@count+1,f
 12712  0B53  2B3F               	goto	i1l7231
 12713  0B54                     __end_of_delay:	
 12714  0B54                     __ptext2297:	
 12715 ;; =============== function i1_WriteTime ends ============
 12716                           
 12717                           
 12718 ;; *************** function i1_lcd_send_byte *****************
 12719 ;; Defined at:
 12720 ;;		line 677 in file "prog.c"
 12721 ;; Parameters:    Size  Location     Type
 12722 ;;  lcd_send_byt    1    wreg     unsigned char 
 12723 ;; Auto vars:     Size  Location     Type
 12724 ;;  lcd_send_byt    1    8[COMMON] unsigned char 
 12725 ;; Return value:  Size  Location     Type
 12726 ;;		None               void
 12727 ;; Registers used:
 12728 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
 12729 ;; Tracked objects:
 12730 ;;		On entry : 160/100
 12731 ;;		On exit  : 0/0
 12732 ;;		Unchanged: 0/0
 12733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12734 ;;      Params:         0       0       0       0       0
 12735 ;;      Locals:         1       0       0       0       0
 12736 ;;      Temps:          1       0       0       0       0
 12737 ;;      Totals:         2       0       0       0       0
 12738 ;;Total ram usage:        2 bytes
 12739 ;; Hardware stack levels used:    1
 12740 ;; Hardware stack levels required when called:    1
 12741 ;; This function calls:
 12742 ;;		i1_lcd_send_initial_half_byte
 12743 ;; This function is called by:
 12744 ;;		_F
 12745 ;; This function uses a non-reentrant model
 12746 ;;
 12747  0B54                     i1_lcd_send_byte:	
 12748                           
 12749                           ; Regs used in i1_lcd_send_byte: [wreg+status,2+status,0+btemp+1+pclath+cstack]
 12750                           ;i1lcd_send_byte@data stored from wreg
 12751  0B54  00F8               	movwf	i1lcd_send_byte@data
 12752                           
 12753                           ;prog.c: 678: lcd_send_initial_half_byte((data & 0b11110000) / 16);
 12754  0B55  0E78               	swapf	i1lcd_send_byte@data,w
 12755  0B56  390F               	andlw	15
 12756  0B57  236A  120A  158A   	fcall	i1_lcd_send_initial_half_byte
 12757                           
 12758                           ;prog.c: 679: _delay((unsigned long)((40)*(20000000/4000000.0)));
 12759  0B5A  3042               	movlw	66
 12760  0B5B  00F7               	movwf	??i1_lcd_send_byte
 12761  0B5C                     u944_27:	
 12762  0B5C  0BF7               	decfsz	??i1_lcd_send_byte,f
 12763  0B5D  2B5C               	goto	u944_27
 12764  0B5E  0064               	clrwdt
 12765                           
 12766                           ;prog.c: 680: lcd_send_initial_half_byte(data & 0b00001111);
 12767  0B5F  0878               	movf	i1lcd_send_byte@data,w
 12768  0B60  390F               	andlw	15
 12769  0B61  236A  120A  158A   	fcall	i1_lcd_send_initial_half_byte
 12770                           
 12771                           ;prog.c: 681: _delay((unsigned long)((40)*(20000000/4000000.0)));
 12772  0B64  3042               	movlw	66
 12773  0B65  00F7               	movwf	??i1_lcd_send_byte
 12774  0B66                     u945_27:	
 12775  0B66  0BF7               	decfsz	??i1_lcd_send_byte,f
 12776  0B67  2B66               	goto	u945_27
 12777  0B68  0064               	clrwdt
 12778  0B69  0008               	return
 12779  0B6A                     __end_ofi1_lcd_send_byte:	
 12780  0B6A                     __ptext2311:	
 12781 ;; =============== function i1_ConvertDayToBit ends ============
 12782                           
 12783                           
 12784 ;; *************** function i1_lcd_send_initial_half_byte *****************
 12785 ;; Defined at:
 12786 ;;		line 661 in file "prog.c"
 12787 ;; Parameters:    Size  Location     Type
 12788 ;;  lcd_send_ini    1    wreg     unsigned char 
 12789 ;; Auto vars:     Size  Location     Type
 12790 ;;  lcd_send_ini    1    1[COMMON] unsigned char 
 12791 ;;  lcd_send_ini    2    5[COMMON] int 
 12792 ;;  lcd_send_ini    2    2[COMMON] int 
 12793 ;;  lcd_send_ini    1    4[COMMON] unsigned char 
 12794 ;; Return value:  Size  Location     Type
 12795 ;;		None               void
 12796 ;; Registers used:
 12797 ;;		wreg, status,2, status,0, btemp+1
 12798 ;; Tracked objects:
 12799 ;;		On entry : 0/100
 12800 ;;		On exit  : 60/0
 12801 ;;		Unchanged: FFE00/0
 12802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12803 ;;      Params:         0       0       0       0       0
 12804 ;;      Locals:         6       0       0       0       0
 12805 ;;      Temps:          1       0       0       0       0
 12806 ;;      Totals:         7       0       0       0       0
 12807 ;;Total ram usage:        7 bytes
 12808 ;; Hardware stack levels used:    1
 12809 ;; This function calls:
 12810 ;;		Nothing
 12811 ;; This function is called by:
 12812 ;;		i1_lcd_send_byte
 12813 ;; This function uses a non-reentrant model
 12814 ;;
 12815  0B6A                     i1_lcd_send_initial_half_byte:	
 12816                           
 12817                           ; Regs used in i1_lcd_send_initial_half_byte: [wreg+status,2+status,0+btemp+1]
 12818                           ;i1lcd_send_initial_half_byte@data stored from wreg
 12819  0B6A  00F1               	movwf	i1lcd_send_initial_half_byte@data
 12820                           
 12821                           ;prog.c: 662: RC1 = 0;
 12822  0B6B  1283               	bcf	3,5	;RP0=0, select bank0
 12823  0B6C  1303               	bcf	3,6	;RP1=0, select bank0
 12824  0B6D  1087               	bcf	7,1
 12825                           
 12826                           ;prog.c: 663: unsigned char data_temp = 0;
 12827  0B6E  01F4               	clrf	i1lcd_send_initial_half_byte@data_temp
 12828  0B6F  0064               	clrwdt	;#
 12829                           
 12830                           ;prog.c: 665: for(int a = 4; a>0; a--){
 12831  0B70  3004               	movlw	4
 12832  0B71  00F5               	movwf	i1lcd_send_initial_half_byte@a
 12833  0B72  01F6               	clrf	i1lcd_send_initial_half_byte@a+1
 12834  0B73                     i1l1007:	
 12835                           
 12836                           ;prog.c: 666: data_temp*=2;
 12837  0B73  1003               	clrc
 12838  0B74  0DF4               	rlf	i1lcd_send_initial_half_byte@data_temp,f
 12839                           
 12840                           ;prog.c: 667: if(data%2==1){
 12841  0B75  1871               	btfsc	i1lcd_send_initial_half_byte@data,0
 12842                           
 12843                           ;prog.c: 668: data_temp++;
 12844  0B76  0AF4               	incf	i1lcd_send_initial_half_byte@data_temp,f
 12845                           
 12846                           ;prog.c: 669: }
 12847                           ;prog.c: 670: data/=2;
 12848  0B77  1003               	clrc
 12849  0B78  0CF1               	rrf	i1lcd_send_initial_half_byte@data,f
 12850  0B79  0064               	clrwdt	;#
 12851  0B7A  30FF               	movlw	-1
 12852  0B7B  07F5               	addwf	i1lcd_send_initial_half_byte@a,f
 12853  0B7C  1C03               	skipc
 12854  0B7D  03F6               	decf	i1lcd_send_initial_half_byte@a+1,f
 12855  0B7E  0876               	movf	i1lcd_send_initial_half_byte@a+1,w
 12856  0B7F  3A80               	xorlw	128
 12857  0B80  00FF               	movwf	127
 12858  0B81  3080               	movlw	128
 12859  0B82  027F               	subwf	127,w
 12860  0B83  1D03               	skipz
 12861  0B84  2B87               	goto	u492_25
 12862  0B85  3001               	movlw	1
 12863  0B86  0275               	subwf	i1lcd_send_initial_half_byte@a,w
 12864  0B87                     u492_25:	
 12865  0B87  1803               	skipnc
 12866  0B88  2B73               	goto	i1l1007
 12867                           
 12868                           ;prog.c: 672: }
 12869                           ;prog.c: 673: PORTA = (0b00111100 & (data_temp * 4)) | (LCD_Light_On == 1 ? 0b00000010 :
      +                           0b00000000);
 12870  0B89  1283               	bcf	3,5	;RP0=0, select bank0
 12871  0B8A  1303               	bcf	3,6	;RP1=0, select bank0
 12872  0B8B  195D               	btfsc	_LCD_Light_On/(0+8),_LCD_Light_On& (0+7)
 12873  0B8C  2B8F               	goto	i1l7999
 12874  0B8D  01F2               	clrf	i1_lcd_send_initial_half_byte$1348
 12875  0B8E  2B91               	goto	L50
 12876  0B8F                     i1l7999:	
 12877  0B8F  3002               	movlw	2
 12878  0B90  00F2               	movwf	i1_lcd_send_initial_half_byte$1348
 12879  0B91                     L50:	
 12880  0B91  01F3               	clrf	i1_lcd_send_initial_half_byte$1348+1
 12881  0B92  0874               	movf	i1lcd_send_initial_half_byte@data_temp,w
 12882  0B93  00F0               	movwf	??i1_lcd_send_initial_half_byte
 12883  0B94  1003               	clrc
 12884  0B95  0DF0               	rlf	??i1_lcd_send_initial_half_byte,f
 12885  0B96  1003               	clrc
 12886  0B97  0D70               	rlf	??i1_lcd_send_initial_half_byte,w
 12887  0B98  393C               	andlw	60
 12888  0B99  0472               	iorwf	i1_lcd_send_initial_half_byte$1348,w
 12889  0B9A  0085               	movwf	5	;volatile
 12890                           
 12891                           ;prog.c: 674: RC0 = 1;
 12892  0B9B  1407               	bsf	7,0
 12893                           
 12894                           ;prog.c: 675: RC0 = 0;
 12895  0B9C  1007               	bcf	7,0
 12896  0B9D  0008               	return
 12897  0B9E                     __end_ofi1_lcd_send_initial_half_byte:	
 12898  0B9E                     __ptext2294:	
 12899 ;; =============== function _F ends ============
 12900                           
 12901                           
 12902 ;; *************** function _ReadTime *****************
 12903 ;; Defined at:
 12904 ;;		line 1364 in file "prog.c"
 12905 ;; Parameters:    Size  Location     Type
 12906 ;;		None
 12907 ;; Auto vars:     Size  Location     Type
 12908 ;;  I               1   35[BANK0 ] unsigned char 
 12909 ;;  Seconds         1   34[BANK0 ] unsigned char 
 12910 ;; Return value:  Size  Location     Type
 12911 ;;		None               void
 12912 ;; Registers used:
 12913 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 12914 ;; Tracked objects:
 12915 ;;		On entry : 60/0
 12916 ;;		On exit  : 0/0
 12917 ;;		Unchanged: FFE00/0
 12918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12919 ;;      Params:         0       0       0       0       0
 12920 ;;      Locals:         0       2       0       0       0
 12921 ;;      Temps:          0      16       0       0       0
 12922 ;;      Totals:         0      18       0       0       0
 12923 ;;Total ram usage:       18 bytes
 12924 ;; Hardware stack levels used:    1
 12925 ;; Hardware stack levels required when called:    2
 12926 ;; This function calls:
 12927 ;;		i1_I2CInit
 12928 ;;		i1_I2CStart
 12929 ;;		i1_I2CSend
 12930 ;;		_I2CRestart
 12931 ;;		_I2CRead
 12932 ;;		_I2CAck
 12933 ;;		_I2CNak
 12934 ;;		i1_I2CStop
 12935 ;;		i1_EERD
 12936 ;;		i1_WriteTime
 12937 ;;		_BCD_to_DEC
 12938 ;;		i1___lmul
 12939 ;; This function is called by:
 12940 ;;		_F
 12941 ;; This function uses a non-reentrant model
 12942 ;;
 12943  0B9E                     _ReadTime:	
 12944                           
 12945                           ;prog.c: 1368: I2CInit();
 12946                           
 12947 ;; hardware stack exceeded
 12948                           ; Regs used in _ReadTime: [allreg]
 12949  0B9E  25F6  120A  158A   	fcall	i1_I2CInit
 12950                           
 12951                           ;prog.c: 1369: I2CStart();
 12952  0BA1  2602  120A  158A   	fcall	i1_I2CStart
 12953                           
 12954                           ;prog.c: 1370: I2CSend(0xD0);
 12955  0BA4  30D0               	movlw	208
 12956  0BA5  25D3  120A  158A   	fcall	i1_I2CSend
 12957                           
 12958                           ;prog.c: 1371: I2CSend(0x00);
 12959  0BA8  3000               	movlw	0
 12960  0BA9  25D3  120A  158A   	fcall	i1_I2CSend
 12961                           
 12962                           ;prog.c: 1372: I2CRestart();
 12963  0BAC  2606  120A  158A   	fcall	_I2CRestart
 12964                           
 12965                           ;prog.c: 1373: I2CSend(0xD1);
 12966  0BAF  30D1               	movlw	209
 12967  0BB0  25D3  120A  158A   	fcall	i1_I2CSend
 12968                           
 12969                           ;prog.c: 1375: unsigned char I = I2CRead();
 12970  0BB3  24B4  120A  158A   	fcall	_I2CRead
 12971  0BB6  1283               	bcf	3,5	;RP0=0, select bank0
 12972  0BB7  00C3               	movwf	ReadTime@I
 12973                           
 12974                           ;prog.c: 1377: if((I & 0b10000000) == 0){
 12975  0BB8  1BC3               	btfsc	ReadTime@I,7
 12976  0BB9  2BE9               	goto	i1l1359
 12977                           
 12978                           ;prog.c: 1378: TimeIsRead = 1;
 12979  0BBA  17DD               	bsf	_TimeIsRead/(0+8),_TimeIsRead& (0+7)
 12980                           
 12981                           ;prog.c: 1379: I2CAck();
 12982  0BBB  24C3  120A  158A   	fcall	_I2CAck
 12983                           
 12984                           ;prog.c: 1380: Seconds = I;
 12985  0BBE  1283               	bcf	3,5	;RP0=0, select bank0
 12986  0BBF  0843               	movf	ReadTime@I,w
 12987  0BC0  00C2               	movwf	ReadTime@Seconds
 12988                           
 12989                           ;prog.c: 1381: cMinutes = I2CRead(); I2CAck();
 12990  0BC1  24B4  120A  158A   	fcall	_I2CRead
 12991  0BC4  1283               	bcf	3,5	;RP0=0, select bank0
 12992  0BC5  00DC               	movwf	_cMinutes
 12993  0BC6  24C3  120A  158A   	fcall	_I2CAck
 12994                           
 12995                           ;prog.c: 1382: cHours = I2CRead(); I2CAck();
 12996  0BC9  24B4  120A  158A   	fcall	_I2CRead
 12997  0BCC  1283               	bcf	3,5	;RP0=0, select bank0
 12998  0BCD  00DB               	movwf	_cHours
 12999  0BCE  24C3  120A  158A   	fcall	_I2CAck
 13000                           
 13001                           ;prog.c: 1383: cWeekDay = I2CRead();
 13002  0BD1  24B4  120A  158A   	fcall	_I2CRead
 13003  0BD4  1283               	bcf	3,5	;RP0=0, select bank0
 13004  0BD5  00E5               	movwf	_cWeekDay
 13005                           
 13006                           ;prog.c: 1384: if(!isTimeSetting){
 13007  0BD6  185E               	btfsc	_isTimeSetting/(0+8),_isTimeSetting& (0+7)
 13008  0BD7  2C0C               	goto	i1l7659
 13009                           
 13010                           ;prog.c: 1385: I2CAck();
 13011  0BD8  24C3  120A  158A   	fcall	_I2CAck
 13012                           
 13013                           ;prog.c: 1386: cDays = I2CRead(); I2CAck();
 13014  0BDB  24B4  120A  158A   	fcall	_I2CRead
 13015  0BDE  1283               	bcf	3,5	;RP0=0, select bank0
 13016  0BDF  00E3               	movwf	_cDays
 13017  0BE0  24C3  120A  158A   	fcall	_I2CAck
 13018                           
 13019                           ;prog.c: 1387: cMonths = I2CRead();
 13020  0BE3  24B4  120A  158A   	fcall	_I2CRead
 13021  0BE6  1283               	bcf	3,5	;RP0=0, select bank0
 13022  0BE7  00E4               	movwf	_cMonths
 13023  0BE8  2C0C               	goto	i1l7659
 13024  0BE9                     i1l1359:	
 13025                           
 13026                           ;prog.c: 1391: TimeIsRead = 0;
 13027  0BE9  13DD               	bcf	_TimeIsRead/(0+8),_TimeIsRead& (0+7)
 13028                           
 13029                           ;prog.c: 1392: I2CNak();
 13030  0BEA  25F0  120A  158A   	fcall	_I2CNak
 13031                           
 13032                           ;prog.c: 1393: I2CStop();
 13033  0BED  25E1  120A  158A   	fcall	i1_I2CStop
 13034                           
 13035                           ;prog.c: 1394: cDays = EERD(cDaysAdress);
 13036  0BF0  30F3               	movlw	243
 13037  0BF1  24C9  120A  158A   	fcall	i1_EERD
 13038  0BF4  1303               	bcf	3,6	;RP1=0, select bank0
 13039  0BF5  00E3               	movwf	_cDays
 13040                           
 13041                           ;prog.c: 1395: cMonths = EERD(cMonthsAdress);
 13042  0BF6  30F4               	movlw	244
 13043  0BF7  24C9  120A  158A   	fcall	i1_EERD
 13044  0BFA  1303               	bcf	3,6	;RP1=0, select bank0
 13045  0BFB  00E4               	movwf	_cMonths
 13046                           
 13047                           ;prog.c: 1396: WriteTime(
 13048                           ;prog.c: 1397: EERD(cMinutesAdress),
 13049                           ;prog.c: 1398: EERD(cHoursAdress),
 13050                           ;prog.c: 1399: EERD(cWeekDayAdress)
 13051                           ;prog.c: 1400: );
 13052  0BFC  30F1               	movlw	241
 13053  0BFD  24C9  120A  158A   	fcall	i1_EERD
 13054  0C00  00FB               	movwf	?i1_WriteTime
 13055  0C01  30F2               	movlw	242
 13056  0C02  24C9  120A  158A   	fcall	i1_EERD
 13057  0C05  00FC               	movwf	?i1_WriteTime+1
 13058  0C06  30F0               	movlw	240
 13059  0C07  24C9  120A  158A   	fcall	i1_EERD
 13060  0C0A  250F               	fcall	i1_WriteTime
 13061  0C0B  0008               	return
 13062  0C0C                     i1l7659:	
 13063                           
 13064                           ;prog.c: 1402: }
 13065                           ;prog.c: 1403: I2CNak();
 13066  0C0C  25F0  120A  158A   	fcall	_I2CNak
 13067                           
 13068                           ;prog.c: 1405: I2CStop();
 13069  0C0F  25E1  120A  158A   	fcall	i1_I2CStop
 13070                           
 13071                           ;prog.c: 1407: Clock = ( (long int)BCD_to_DEC(Seconds)
 13072                           ;prog.c: 1408: + (long int)BCD_to_DEC(cMinutes) * 60
 13073                           ;prog.c: 1409: + (long int)BCD_to_DEC(cHours) * 3600
 13074                           ;prog.c: 1410: + ((long int)cWeekDay - 1) * 86400) * 100;
 13075  0C12  3080               	movlw	128
 13076  0C13  1283               	bcf	3,5	;RP0=0, select bank0
 13077  0C14  00B2               	movwf	??_ReadTime
 13078  0C15  30AE               	movlw	174
 13079  0C16  00B3               	movwf	??_ReadTime+1
 13080  0C17  30FE               	movlw	254
 13081  0C18  00B4               	movwf	??_ReadTime+2
 13082  0C19  30FF               	movlw	255
 13083  0C1A  00B5               	movwf	??_ReadTime+3
 13084  0C1B  0842               	movf	ReadTime@Seconds,w
 13085  0C1C  25E5  120A  158A   	fcall	_BCD_to_DEC
 13086  0C1F  00B6               	movwf	??_ReadTime+4
 13087  0C20  01B7               	clrf	??_ReadTime+5
 13088  0C21  01B8               	clrf	??_ReadTime+6
 13089  0C22  01B9               	clrf	??_ReadTime+7
 13090  0C23  085C               	movf	_cMinutes,w
 13091  0C24  25E5  120A  158A   	fcall	_BCD_to_DEC
 13092  0C27  00F3               	movwf	?i1___lmul
 13093  0C28  303C               	movlw	60
 13094  0C29  01F4               	clrf	?i1___lmul+1
 13095  0C2A  01F5               	clrf	?i1___lmul+2
 13096  0C2B  01F6               	clrf	?i1___lmul+3
 13097  0C2C  00F7               	movwf	?i1___lmul+4
 13098  0C2D  01F8               	clrf	?i1___lmul+5
 13099  0C2E  01F9               	clrf	?i1___lmul+6
 13100  0C2F  01FA               	clrf	?i1___lmul+7
 13101  0C30  24DC  120A  158A   	fcall	i1___lmul
 13102  0C33  0873               	movf	?i1___lmul,w
 13103  0C34  00BA               	movwf	??_ReadTime+8
 13104  0C35  0874               	movf	?i1___lmul+1,w
 13105  0C36  00BB               	movwf	??_ReadTime+9
 13106  0C37  0875               	movf	?i1___lmul+2,w
 13107  0C38  00BC               	movwf	??_ReadTime+10
 13108  0C39  0876               	movf	?i1___lmul+3,w
 13109  0C3A  00BD               	movwf	??_ReadTime+11
 13110  0C3B  085B               	movf	_cHours,w
 13111  0C3C  25E5  120A  158A   	fcall	_BCD_to_DEC
 13112  0C3F  00F3               	movwf	?i1___lmul
 13113  0C40  300E               	movlw	14
 13114  0C41  01F4               	clrf	?i1___lmul+1
 13115  0C42  01F5               	clrf	?i1___lmul+2
 13116  0C43  01F6               	clrf	?i1___lmul+3
 13117  0C44  01FA               	clrf	?i1___lmul+7
 13118  0C45  01F9               	clrf	?i1___lmul+6
 13119  0C46  00F8               	movwf	?i1___lmul+5
 13120  0C47  3010               	movlw	16
 13121  0C48  00F7               	movwf	?i1___lmul+4
 13122  0C49  24DC  120A  158A   	fcall	i1___lmul
 13123  0C4C  0873               	movf	?i1___lmul,w
 13124  0C4D  00BE               	movwf	??_ReadTime+12
 13125  0C4E  0874               	movf	?i1___lmul+1,w
 13126  0C4F  00BF               	movwf	??_ReadTime+13
 13127  0C50  0875               	movf	?i1___lmul+2,w
 13128  0C51  00C0               	movwf	??_ReadTime+14
 13129  0C52  0876               	movf	?i1___lmul+3,w
 13130  0C53  00C1               	movwf	??_ReadTime+15
 13131  0C54  0865               	movf	_cWeekDay,w
 13132  0C55  00F3               	movwf	?i1___lmul
 13133  0C56  3001               	movlw	1
 13134  0C57  01F4               	clrf	?i1___lmul+1
 13135  0C58  01F5               	clrf	?i1___lmul+2
 13136  0C59  01F6               	clrf	?i1___lmul+3
 13137  0C5A  01FA               	clrf	?i1___lmul+7
 13138  0C5B  00F9               	movwf	?i1___lmul+6
 13139  0C5C  3051               	movlw	81
 13140  0C5D  00F8               	movwf	?i1___lmul+5
 13141  0C5E  3080               	movlw	128
 13142  0C5F  00F7               	movwf	?i1___lmul+4
 13143  0C60  24DC  120A  158A   	fcall	i1___lmul
 13144  0C63  0873               	movf	?i1___lmul,w
 13145  0C64  07BE               	addwf	??_ReadTime+12,f
 13146  0C65  0874               	movf	?i1___lmul+1,w
 13147  0C66  1803               	skipnc
 13148  0C67  0F74               	incfsz	?i1___lmul+1,w
 13149  0C68  07BF               	addwf	??_ReadTime+13,f
 13150  0C69  0875               	movf	?i1___lmul+2,w
 13151  0C6A  1803               	skipnc
 13152  0C6B  0F75               	incfsz	?i1___lmul+2,w
 13153  0C6C  07C0               	addwf	??_ReadTime+14,f
 13154  0C6D  0876               	movf	?i1___lmul+3,w
 13155  0C6E  1803               	skipnc
 13156  0C6F  0A76               	incf	?i1___lmul+3,w
 13157  0C70  07C1               	addwf	??_ReadTime+15,f
 13158  0C71  083E               	movf	??_ReadTime+12,w
 13159  0C72  07BA               	addwf	??_ReadTime+8,f
 13160  0C73  083F               	movf	??_ReadTime+13,w
 13161  0C74  1803               	skipnc
 13162  0C75  0F3F               	incfsz	??_ReadTime+13,w
 13163  0C76  07BB               	addwf	??_ReadTime+9,f
 13164  0C77  0840               	movf	??_ReadTime+14,w
 13165  0C78  1803               	skipnc
 13166  0C79  0F40               	incfsz	??_ReadTime+14,w
 13167  0C7A  07BC               	addwf	??_ReadTime+10,f
 13168  0C7B  0841               	movf	??_ReadTime+15,w
 13169  0C7C  1803               	skipnc
 13170  0C7D  0A41               	incf	??_ReadTime+15,w
 13171  0C7E  07BD               	addwf	??_ReadTime+11,f
 13172  0C7F  083A               	movf	??_ReadTime+8,w
 13173  0C80  07B6               	addwf	??_ReadTime+4,f
 13174  0C81  083B               	movf	??_ReadTime+9,w
 13175  0C82  1803               	skipnc
 13176  0C83  0F3B               	incfsz	??_ReadTime+9,w
 13177  0C84  07B7               	addwf	??_ReadTime+5,f
 13178  0C85  083C               	movf	??_ReadTime+10,w
 13179  0C86  1803               	skipnc
 13180  0C87  0F3C               	incfsz	??_ReadTime+10,w
 13181  0C88  07B8               	addwf	??_ReadTime+6,f
 13182  0C89  083D               	movf	??_ReadTime+11,w
 13183  0C8A  1803               	skipnc
 13184  0C8B  0A3D               	incf	??_ReadTime+11,w
 13185  0C8C  07B9               	addwf	??_ReadTime+7,f
 13186  0C8D  0836               	movf	??_ReadTime+4,w
 13187  0C8E  07B2               	addwf	??_ReadTime,f
 13188  0C8F  0837               	movf	??_ReadTime+5,w
 13189  0C90  1803               	skipnc
 13190  0C91  0F37               	incfsz	??_ReadTime+5,w
 13191  0C92  07B3               	addwf	??_ReadTime+1,f
 13192  0C93  0838               	movf	??_ReadTime+6,w
 13193  0C94  1803               	skipnc
 13194  0C95  0F38               	incfsz	??_ReadTime+6,w
 13195  0C96  07B4               	addwf	??_ReadTime+2,f
 13196  0C97  0839               	movf	??_ReadTime+7,w
 13197  0C98  1803               	skipnc
 13198  0C99  0A39               	incf	??_ReadTime+7,w
 13199  0C9A  07B5               	addwf	??_ReadTime+3,f
 13200  0C9B  0835               	movf	??_ReadTime+3,w
 13201  0C9C  00F6               	movwf	?i1___lmul+3
 13202  0C9D  0834               	movf	??_ReadTime+2,w
 13203  0C9E  00F5               	movwf	?i1___lmul+2
 13204  0C9F  0833               	movf	??_ReadTime+1,w
 13205  0CA0  00F4               	movwf	?i1___lmul+1
 13206  0CA1  0832               	movf	??_ReadTime,w
 13207  0CA2  00F3               	movwf	?i1___lmul
 13208  0CA3  3064               	movlw	100
 13209  0CA4  00F7               	movwf	?i1___lmul+4
 13210  0CA5  01F8               	clrf	?i1___lmul+5
 13211  0CA6  01F9               	clrf	?i1___lmul+6
 13212  0CA7  01FA               	clrf	?i1___lmul+7
 13213  0CA8  24DC               	fcall	i1___lmul
 13214  0CA9  0876               	movf	?i1___lmul+3,w
 13215  0CAA  1683               	bsf	3,5	;RP0=1, select bank3
 13216  0CAB  1703               	bsf	3,6	;RP1=1, select bank3
 13217  0CAC  00DD               	movwf	(_Clock+3)^(0+384)
 13218  0CAD  0875               	movf	?i1___lmul+2,w
 13219  0CAE  00DC               	movwf	(_Clock+2)^(0+384)
 13220  0CAF  0874               	movf	?i1___lmul+1,w
 13221  0CB0  00DB               	movwf	(_Clock+1)^(0+384)
 13222  0CB1  0873               	movf	?i1___lmul,w
 13223  0CB2  00DA               	movwf	_Clock^(0+384)
 13224  0CB3  0008               	return
 13225  0CB4                     __end_of_ReadTime:	
 13226  0CB4                     __ptext2317:	
 13227 ;; =============== function _I2CAck ends ============
 13228                           
 13229                           
 13230 ;; *************** function _I2CRead *****************
 13231 ;; Defined at:
 13232 ;;		line 1477 in file "prog.c"
 13233 ;; Parameters:    Size  Location     Type
 13234 ;;		None
 13235 ;; Auto vars:     Size  Location     Type
 13236 ;;  temp            1    0[COMMON] unsigned char 
 13237 ;; Return value:  Size  Location     Type
 13238 ;;                  1    wreg      unsigned char 
 13239 ;; Registers used:
 13240 ;;		wreg, status,2
 13241 ;; Tracked objects:
 13242 ;;		On entry : 40/20
 13243 ;;		On exit  : 60/20
 13244 ;;		Unchanged: FFF9F/0
 13245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13246 ;;      Params:         0       0       0       0       0
 13247 ;;      Locals:         1       0       0       0       0
 13248 ;;      Temps:          0       0       0       0       0
 13249 ;;      Totals:         1       0       0       0       0
 13250 ;;Total ram usage:        1 bytes
 13251 ;; Hardware stack levels used:    1
 13252 ;; This function calls:
 13253 ;;		Nothing
 13254 ;; This function is called by:
 13255 ;;		_ReadTime
 13256 ;; This function uses a non-reentrant model
 13257 ;;
 13258  0CB4                     _I2CRead:	
 13259                           
 13260                           ;prog.c: 1478: unsigned char temp;
 13261                           ;prog.c: 1480: RCEN = 1;
 13262                           
 13263                           ; Regs used in _I2CRead: [wreg+status,2]
 13264  0CB4  1683               	bsf	3,5	;RP0=1, select bank1
 13265  0CB5  1591               	bsf	17,3
 13266  0CB6                     i1l1410:	
 13267                           ;prog.c: 1481: while(!BF);
 13268                           
 13269  0CB6  1C14               	btfss	20,0
 13270  0CB7  2CB6               	goto	i1l1410
 13271                           
 13272                           ;prog.c: 1482: temp = SSPBUF;
 13273  0CB8  1283               	bcf	3,5	;RP0=0, select bank0
 13274  0CB9  0813               	movf	19,w	;volatile
 13275  0CBA  00F0               	movwf	I2CRead@temp
 13276  0CBB                     i1l7685:	
 13277                           ;prog.c: 1483: while ((SSPCON2 & 0b00011111) || (SSPSTAT & 0b00000100));
 13278                           
 13279  0CBB  1683               	bsf	3,5	;RP0=1, select bank1
 13280  0CBC  0811               	movf	17,w
 13281  0CBD  391F               	andlw	31
 13282  0CBE  1903               	btfsc	3,2
 13283  0CBF  1914               	btfsc	20,2
 13284  0CC0  2CBB               	goto	i1l7685
 13285                           
 13286                           ;prog.c: 1484: return temp;
 13287  0CC1  0870               	movf	I2CRead@temp,w
 13288  0CC2  0008               	return
 13289  0CC3                     __end_of_I2CRead:	
 13290  0CC3                     __ptext2316:	
 13291 ;; =============== function _I2CNak ends ============
 13292                           
 13293                           
 13294 ;; *************** function _I2CAck *****************
 13295 ;; Defined at:
 13296 ;;		line 1462 in file "prog.c"
 13297 ;; Parameters:    Size  Location     Type
 13298 ;;		None
 13299 ;; Auto vars:     Size  Location     Type
 13300 ;;		None
 13301 ;; Return value:  Size  Location     Type
 13302 ;;		None               void
 13303 ;; Registers used:
 13304 ;;		None
 13305 ;; Tracked objects:
 13306 ;;		On entry : 60/0
 13307 ;;		On exit  : 60/20
 13308 ;;		Unchanged: FFF9F/0
 13309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13310 ;;      Params:         0       0       0       0       0
 13311 ;;      Locals:         0       0       0       0       0
 13312 ;;      Temps:          0       0       0       0       0
 13313 ;;      Totals:         0       0       0       0       0
 13314 ;;Total ram usage:        0 bytes
 13315 ;; Hardware stack levels used:    1
 13316 ;; This function calls:
 13317 ;;		Nothing
 13318 ;; This function is called by:
 13319 ;;		_ReadTime
 13320 ;; This function uses a non-reentrant model
 13321 ;;
 13322  0CC3                     _I2CAck:	
 13323                           
 13324                           ;prog.c: 1463: ACKDT = 0;
 13325                           
 13326                           ; Regs used in _I2CAck: []
 13327  0CC3  1683               	bsf	3,5	;RP0=1, select bank1
 13328  0CC4  1291               	bcf	17,5
 13329                           
 13330                           ;prog.c: 1464: ACKEN = 1;
 13331  0CC5  1611               	bsf	17,4
 13332  0CC6                     i1l1389:	
 13333                           ;prog.c: 1465: while(ACKEN);
 13334                           
 13335  0CC6  1E11               	btfss	17,4
 13336  0CC7  0008               	return
 13337  0CC8  2CC6               	goto	i1l1389
 13338  0CC9                     __end_of_I2CAck:	
 13339  0CC9                     __ptext2312:	
 13340 ;; =============== function i1_lcd_send_initial_half_byte ends ============
 13341                           
 13342                           
 13343 ;; *************** function i1_EERD *****************
 13344 ;; Defined at:
 13345 ;;		line 407 in file "prog.c"
 13346 ;; Parameters:    Size  Location     Type
 13347 ;;  EERD            1    wreg     unsigned char 
 13348 ;; Auto vars:     Size  Location     Type
 13349 ;;  EERD            1    0[COMMON] unsigned char 
 13350 ;;  EERD            1    2[COMMON] volatile unsigned char 
 13351 ;;  EERD            1    1[COMMON] volatile unsigned char 
 13352 ;; Return value:  Size  Location     Type
 13353 ;;                  1    wreg      unsigned char 
 13354 ;; Registers used:
 13355 ;;		wreg
 13356 ;; Tracked objects:
 13357 ;;		On entry : 0/20
 13358 ;;		On exit  : 60/40
 13359 ;;		Unchanged: FFE00/0
 13360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13361 ;;      Params:         0       0       0       0       0
 13362 ;;      Locals:         3       0       0       0       0
 13363 ;;      Temps:          0       0       0       0       0
 13364 ;;      Totals:         3       0       0       0       0
 13365 ;;Total ram usage:        3 bytes
 13366 ;; Hardware stack levels used:    1
 13367 ;; This function calls:
 13368 ;;		Nothing
 13369 ;; This function is called by:
 13370 ;;		_ReadTime
 13371 ;;		i1_ReadFourBytesEE
 13372 ;; This function uses a non-reentrant model
 13373 ;;
 13374  0CC9                     i1_EERD:	
 13375                           
 13376                           ; Regs used in i1_EERD: [wreg]
 13377                           ;i1EERD@adress stored from wreg
 13378  0CC9  00F0               	movwf	i1EERD@adress
 13379                           
 13380                           ;prog.c: 408: volatile unsigned char INTCON_BUP = INTCON;
 13381  0CCA  080B               	movf	11,w	;volatile
 13382  0CCB  00F1               	movwf	i1EERD@INTCON_BUP	;volatile
 13383                           
 13384                           ;prog.c: 409: GIE = 0;
 13385  0CCC  138B               	bcf	11,7
 13386  0CCD  0064               	clrwdt	;#
 13387                           
 13388                           ;prog.c: 411: EEADR = adress;
 13389  0CCE  0870               	movf	i1EERD@adress,w
 13390  0CCF  1283               	bcf	3,5	;RP0=0, select bank2
 13391  0CD0  1703               	bsf	3,6	;RP1=1, select bank2
 13392  0CD1  008D               	movwf	13	;volatile
 13393                           
 13394                           ;prog.c: 412: EEPGD = 0;
 13395  0CD2  1683               	bsf	3,5	;RP0=1, select bank3
 13396  0CD3  138C               	bcf	12,7
 13397                           
 13398                           ;prog.c: 413: RD = 1;
 13399  0CD4  140C               	bsf	12,0
 13400                           
 13401                           ;prog.c: 414: volatile unsigned char EEDATA_BUP = EEDATA;
 13402  0CD5  1283               	bcf	3,5	;RP0=0, select bank2
 13403  0CD6  080C               	movf	12,w	;volatile
 13404  0CD7  00F2               	movwf	i1EERD@EEDATA_BUP	;volatile
 13405                           
 13406                           ;prog.c: 415: INTCON = INTCON_BUP;
 13407  0CD8  0871               	movf	i1EERD@INTCON_BUP,w	;volatile
 13408  0CD9  008B               	movwf	11	;volatile
 13409                           
 13410                           ;prog.c: 416: return EEDATA_BUP;
 13411  0CDA  0872               	movf	i1EERD@EEDATA_BUP,w	;volatile
 13412  0CDB  0008               	return
 13413  0CDC                     __end_ofi1_EERD:	
 13414  0CDC                     __ptext2302:	
 13415 ;; =============== function i1___aldiv ends ============
 13416                           
 13417                           
 13418 ;; *************** function i1___lmul *****************
 13419 ;; Defined at:
 13420 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lmul.c"
 13421 ;; Parameters:    Size  Location     Type
 13422 ;;  __lmul          4    3[COMMON] unsigned long 
 13423 ;;  __lmul          4    7[COMMON] unsigned long 
 13424 ;; Auto vars:     Size  Location     Type
 13425 ;;  __lmul          4    0[BANK0 ] unsigned long 
 13426 ;; Return value:  Size  Location     Type
 13427 ;;                  4    3[COMMON] unsigned long 
 13428 ;; Registers used:
 13429 ;;		wreg, status,2, status,0
 13430 ;; Tracked objects:
 13431 ;;		On entry : 60/0
 13432 ;;		On exit  : 60/0
 13433 ;;		Unchanged: FFF9F/0
 13434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13435 ;;      Params:         8       0       0       0       0
 13436 ;;      Locals:         0       4       0       0       0
 13437 ;;      Temps:          0       0       0       0       0
 13438 ;;      Totals:         8       4       0       0       0
 13439 ;;Total ram usage:       12 bytes
 13440 ;; Hardware stack levels used:    1
 13441 ;; This function calls:
 13442 ;;		Nothing
 13443 ;; This function is called by:
 13444 ;;		_ReadTime
 13445 ;;		i1_WriteTime
 13446 ;; This function uses a non-reentrant model
 13447 ;;
 13448  0CDC                     i1___lmul:	
 13449                           
 13450                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 13451  0CDC  01A0               	clrf	i1___lmul@product
 13452  0CDD  01A1               	clrf	i1___lmul@product+1
 13453  0CDE  01A2               	clrf	i1___lmul@product+2
 13454  0CDF  01A3               	clrf	i1___lmul@product+3
 13455  0CE0                     i1l2110:	
 13456  0CE0  1C73               	btfss	i1___lmul@multiplier,0
 13457  0CE1  2CF6               	goto	i1l8149
 13458  0CE2  0877               	movf	i1___lmul@multiplicand,w
 13459  0CE3  07A0               	addwf	i1___lmul@product,f
 13460  0CE4  0878               	movf	i1___lmul@multiplicand+1,w
 13461  0CE5  1103               	clrz
 13462  0CE6  1803               	skipnc
 13463  0CE7  3E01               	addlw	1
 13464  0CE8  1D03               	btfss	3,2
 13465  0CE9  07A1               	addwf	i1___lmul@product+1,f
 13466  0CEA  0879               	movf	i1___lmul@multiplicand+2,w
 13467  0CEB  1103               	clrz
 13468  0CEC  1803               	skipnc
 13469  0CED  3E01               	addlw	1
 13470  0CEE  1D03               	btfss	3,2
 13471  0CEF  07A2               	addwf	i1___lmul@product+2,f
 13472  0CF0  087A               	movf	i1___lmul@multiplicand+3,w
 13473  0CF1  1103               	clrz
 13474  0CF2  1803               	skipnc
 13475  0CF3  3E01               	addlw	1
 13476  0CF4  1D03               	btfss	3,2
 13477  0CF5  07A3               	addwf	i1___lmul@product+3,f
 13478  0CF6                     i1l8149:	
 13479  0CF6  1003               	clrc
 13480  0CF7  0DF7               	rlf	i1___lmul@multiplicand,f
 13481  0CF8  0DF8               	rlf	i1___lmul@multiplicand+1,f
 13482  0CF9  0DF9               	rlf	i1___lmul@multiplicand+2,f
 13483  0CFA  0DFA               	rlf	i1___lmul@multiplicand+3,f
 13484  0CFB  1003               	clrc
 13485  0CFC  0CF6               	rrf	i1___lmul@multiplier+3,f
 13486  0CFD  0CF5               	rrf	i1___lmul@multiplier+2,f
 13487  0CFE  0CF4               	rrf	i1___lmul@multiplier+1,f
 13488  0CFF  0CF3               	rrf	i1___lmul@multiplier,f
 13489  0D00  0876               	movf	i1___lmul@multiplier+3,w
 13490  0D01  0475               	iorwf	i1___lmul@multiplier+2,w
 13491  0D02  0474               	iorwf	i1___lmul@multiplier+1,w
 13492  0D03  0473               	iorwf	i1___lmul@multiplier,w
 13493  0D04  1D03               	skipz
 13494  0D05  2CE0               	goto	i1l2110
 13495  0D06  0823               	movf	i1___lmul@product+3,w
 13496  0D07  00F6               	movwf	?i1___lmul+3
 13497  0D08  0822               	movf	i1___lmul@product+2,w
 13498  0D09  00F5               	movwf	?i1___lmul+2
 13499  0D0A  0821               	movf	i1___lmul@product+1,w
 13500  0D0B  00F4               	movwf	?i1___lmul+1
 13501  0D0C  0820               	movf	i1___lmul@product,w
 13502  0D0D  00F3               	movwf	?i1___lmul
 13503  0D0E  0008               	return
 13504  0D0F                     __end_ofi1___lmul:	
 13505  0D0F                     __ptext2296:	
 13506 ;; =============== function _SignalsOnOff ends ============
 13507                           
 13508                           
 13509 ;; *************** function i1_WriteTime *****************
 13510 ;; Defined at:
 13511 ;;		line 1413 in file "prog.c"
 13512 ;; Parameters:    Size  Location     Type
 13513 ;;  WriteTime       1    wreg     unsigned char 
 13514 ;;  WriteTime       1   11[COMMON] unsigned char 
 13515 ;;  WriteTime       1   12[COMMON] unsigned char 
 13516 ;; Auto vars:     Size  Location     Type
 13517 ;;  WriteTime       1   17[BANK0 ] unsigned char 
 13518 ;;  WriteTime       1   16[BANK0 ] volatile unsigned char 
 13519 ;; Return value:  Size  Location     Type
 13520 ;;		None               void
 13521 ;; Registers used:
 13522 ;;		wreg, status,2, status,0, pclath, cstack
 13523 ;; Tracked objects:
 13524 ;;		On entry : 60/40
 13525 ;;		On exit  : 60/0
 13526 ;;		Unchanged: FFE00/0
 13527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13528 ;;      Params:         2       0       0       0       0
 13529 ;;      Locals:         0       2       0       0       0
 13530 ;;      Temps:          0      12       0       0       0
 13531 ;;      Totals:         2      14       0       0       0
 13532 ;;Total ram usage:       16 bytes
 13533 ;; Hardware stack levels used:    1
 13534 ;; Hardware stack levels required when called:    1
 13535 ;; This function calls:
 13536 ;;		i1_I2CInit
 13537 ;;		i1_I2CStart
 13538 ;;		i1_I2CSend
 13539 ;;		i1_I2CStop
 13540 ;;		i1___lmul
 13541 ;; This function is called by:
 13542 ;;		_ReadTime
 13543 ;; This function uses a non-reentrant model
 13544 ;;
 13545  0D0F                     i1_WriteTime:	
 13546                           
 13547 ;; hardware stack exceeded
 13548                           ; Regs used in i1_WriteTime: [wreg+status,2+status,0+pclath+cstack]
 13549                           ;i1WriteTime@Minutes stored from wreg
 13550  0D0F  1303               	bcf	3,6	;RP1=0, select bank0
 13551  0D10  00B1               	movwf	i1WriteTime@Minutes
 13552                           
 13553                           ;prog.c: 1415: volatile unsigned char INTCON_BUP = INTCON;
 13554  0D11  080B               	movf	11,w	;volatile
 13555  0D12  00B0               	movwf	i1WriteTime@INTCON_BUP	;volatile
 13556                           
 13557                           ;prog.c: 1416: GIE = 0;
 13558  0D13  138B               	bcf	11,7
 13559  0D14  0064               	clrwdt	;#
 13560                           
 13561                           ;prog.c: 1419: I2CInit();
 13562  0D15  25F6  120A  158A   	fcall	i1_I2CInit
 13563                           
 13564                           ;prog.c: 1420: I2CStart();
 13565  0D18  2602  120A  158A   	fcall	i1_I2CStart
 13566                           
 13567                           ;prog.c: 1421: I2CSend(0xD0);
 13568  0D1B  30D0               	movlw	208
 13569  0D1C  25D3  120A  158A   	fcall	i1_I2CSend
 13570                           
 13571                           ;prog.c: 1422: I2CSend(0x00);
 13572  0D1F  3000               	movlw	0
 13573  0D20  25D3  120A  158A   	fcall	i1_I2CSend
 13574                           
 13575                           ;prog.c: 1424: I2CSend(0x00);
 13576  0D23  3000               	movlw	0
 13577  0D24  25D3  120A  158A   	fcall	i1_I2CSend
 13578                           
 13579                           ;prog.c: 1425: I2CSend(Minutes);
 13580  0D27  1283               	bcf	3,5	;RP0=0, select bank0
 13581  0D28  0831               	movf	i1WriteTime@Minutes,w
 13582  0D29  25D3  120A  158A   	fcall	i1_I2CSend
 13583                           
 13584                           ;prog.c: 1426: I2CSend(Hours);
 13585  0D2C  087B               	movf	i1WriteTime@Hours,w
 13586  0D2D  25D3  120A  158A   	fcall	i1_I2CSend
 13587                           
 13588                           ;prog.c: 1427: I2CSend(DayOfWeek);
 13589  0D30  087C               	movf	i1WriteTime@DayOfWeek,w
 13590  0D31  25D3  120A  158A   	fcall	i1_I2CSend
 13591                           
 13592                           ;prog.c: 1428: I2CSend(cDays);
 13593  0D34  1283               	bcf	3,5	;RP0=0, select bank0
 13594  0D35  0863               	movf	_cDays,w
 13595  0D36  25D3  120A  158A   	fcall	i1_I2CSend
 13596                           
 13597                           ;prog.c: 1429: I2CSend(cMonths);
 13598  0D39  1283               	bcf	3,5	;RP0=0, select bank0
 13599  0D3A  0864               	movf	_cMonths,w
 13600  0D3B  25D3  120A  158A   	fcall	i1_I2CSend
 13601                           
 13602                           ;prog.c: 1430: I2CSend(cYears);
 13603  0D3E  3016               	movlw	22
 13604  0D3F  25D3  120A  158A   	fcall	i1_I2CSend
 13605                           
 13606                           ;prog.c: 1431: I2CSend(0b00010000);
 13607  0D42  3010               	movlw	16
 13608  0D43  25D3  120A  158A   	fcall	i1_I2CSend
 13609                           
 13610                           ;prog.c: 1433: I2CStop();
 13611  0D46  25E1  120A  158A   	fcall	i1_I2CStop
 13612                           
 13613                           ;prog.c: 1435: Clock = ( (long int)Minutes * 60
 13614                           ;prog.c: 1436: + (long int)Hours * 3600
 13615                           ;prog.c: 1437: + ((long int)DayOfWeek - 1) * 86400) * 100;
 13616  0D49  3080               	movlw	128
 13617  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
 13618  0D4B  00A4               	movwf	??i1_WriteTime
 13619  0D4C  30AE               	movlw	174
 13620  0D4D  00A5               	movwf	??i1_WriteTime+1
 13621  0D4E  30FE               	movlw	254
 13622  0D4F  00A6               	movwf	??i1_WriteTime+2
 13623  0D50  30FF               	movlw	255
 13624  0D51  00A7               	movwf	??i1_WriteTime+3
 13625  0D52  087B               	movf	i1WriteTime@Hours,w
 13626  0D53  00F3               	movwf	?i1___lmul
 13627  0D54  300E               	movlw	14
 13628  0D55  01F4               	clrf	?i1___lmul+1
 13629  0D56  01F5               	clrf	?i1___lmul+2
 13630  0D57  01F6               	clrf	?i1___lmul+3
 13631  0D58  01FA               	clrf	?i1___lmul+7
 13632  0D59  01F9               	clrf	?i1___lmul+6
 13633  0D5A  00F8               	movwf	?i1___lmul+5
 13634  0D5B  3010               	movlw	16
 13635  0D5C  00F7               	movwf	?i1___lmul+4
 13636  0D5D  24DC  120A  158A   	fcall	i1___lmul
 13637  0D60  0873               	movf	?i1___lmul,w
 13638  0D61  00A8               	movwf	??i1_WriteTime+4
 13639  0D62  0874               	movf	?i1___lmul+1,w
 13640  0D63  00A9               	movwf	??i1_WriteTime+5
 13641  0D64  0875               	movf	?i1___lmul+2,w
 13642  0D65  00AA               	movwf	??i1_WriteTime+6
 13643  0D66  0876               	movf	?i1___lmul+3,w
 13644  0D67  00AB               	movwf	??i1_WriteTime+7
 13645  0D68  087C               	movf	i1WriteTime@DayOfWeek,w
 13646  0D69  00F3               	movwf	?i1___lmul
 13647  0D6A  3001               	movlw	1
 13648  0D6B  01F4               	clrf	?i1___lmul+1
 13649  0D6C  01F5               	clrf	?i1___lmul+2
 13650  0D6D  01F6               	clrf	?i1___lmul+3
 13651  0D6E  01FA               	clrf	?i1___lmul+7
 13652  0D6F  00F9               	movwf	?i1___lmul+6
 13653  0D70  3051               	movlw	81
 13654  0D71  00F8               	movwf	?i1___lmul+5
 13655  0D72  3080               	movlw	128
 13656  0D73  00F7               	movwf	?i1___lmul+4
 13657  0D74  24DC  120A  158A   	fcall	i1___lmul
 13658  0D77  0873               	movf	?i1___lmul,w
 13659  0D78  00AC               	movwf	??i1_WriteTime+8
 13660  0D79  0874               	movf	?i1___lmul+1,w
 13661  0D7A  00AD               	movwf	??i1_WriteTime+9
 13662  0D7B  0875               	movf	?i1___lmul+2,w
 13663  0D7C  00AE               	movwf	??i1_WriteTime+10
 13664  0D7D  0876               	movf	?i1___lmul+3,w
 13665  0D7E  00AF               	movwf	??i1_WriteTime+11
 13666  0D7F  0831               	movf	i1WriteTime@Minutes,w
 13667  0D80  00F3               	movwf	?i1___lmul
 13668  0D81  303C               	movlw	60
 13669  0D82  01F4               	clrf	?i1___lmul+1
 13670  0D83  01F5               	clrf	?i1___lmul+2
 13671  0D84  01F6               	clrf	?i1___lmul+3
 13672  0D85  00F7               	movwf	?i1___lmul+4
 13673  0D86  01F8               	clrf	?i1___lmul+5
 13674  0D87  01F9               	clrf	?i1___lmul+6
 13675  0D88  01FA               	clrf	?i1___lmul+7
 13676  0D89  24DC  120A  158A   	fcall	i1___lmul
 13677  0D8C  0873               	movf	?i1___lmul,w
 13678  0D8D  07AC               	addwf	??i1_WriteTime+8,f
 13679  0D8E  0874               	movf	?i1___lmul+1,w
 13680  0D8F  1803               	skipnc
 13681  0D90  0F74               	incfsz	?i1___lmul+1,w
 13682  0D91  07AD               	addwf	??i1_WriteTime+9,f
 13683  0D92  0875               	movf	?i1___lmul+2,w
 13684  0D93  1803               	skipnc
 13685  0D94  0F75               	incfsz	?i1___lmul+2,w
 13686  0D95  07AE               	addwf	??i1_WriteTime+10,f
 13687  0D96  0876               	movf	?i1___lmul+3,w
 13688  0D97  1803               	skipnc
 13689  0D98  0A76               	incf	?i1___lmul+3,w
 13690  0D99  07AF               	addwf	??i1_WriteTime+11,f
 13691  0D9A  082C               	movf	??i1_WriteTime+8,w
 13692  0D9B  07A8               	addwf	??i1_WriteTime+4,f
 13693  0D9C  082D               	movf	??i1_WriteTime+9,w
 13694  0D9D  1803               	skipnc
 13695  0D9E  0F2D               	incfsz	??i1_WriteTime+9,w
 13696  0D9F  07A9               	addwf	??i1_WriteTime+5,f
 13697  0DA0  082E               	movf	??i1_WriteTime+10,w
 13698  0DA1  1803               	skipnc
 13699  0DA2  0F2E               	incfsz	??i1_WriteTime+10,w
 13700  0DA3  07AA               	addwf	??i1_WriteTime+6,f
 13701  0DA4  082F               	movf	??i1_WriteTime+11,w
 13702  0DA5  1803               	skipnc
 13703  0DA6  0A2F               	incf	??i1_WriteTime+11,w
 13704  0DA7  07AB               	addwf	??i1_WriteTime+7,f
 13705  0DA8  0828               	movf	??i1_WriteTime+4,w
 13706  0DA9  07A4               	addwf	??i1_WriteTime,f
 13707  0DAA  0829               	movf	??i1_WriteTime+5,w
 13708  0DAB  1803               	skipnc
 13709  0DAC  0F29               	incfsz	??i1_WriteTime+5,w
 13710  0DAD  07A5               	addwf	??i1_WriteTime+1,f
 13711  0DAE  082A               	movf	??i1_WriteTime+6,w
 13712  0DAF  1803               	skipnc
 13713  0DB0  0F2A               	incfsz	??i1_WriteTime+6,w
 13714  0DB1  07A6               	addwf	??i1_WriteTime+2,f
 13715  0DB2  082B               	movf	??i1_WriteTime+7,w
 13716  0DB3  1803               	skipnc
 13717  0DB4  0A2B               	incf	??i1_WriteTime+7,w
 13718  0DB5  07A7               	addwf	??i1_WriteTime+3,f
 13719  0DB6  0827               	movf	??i1_WriteTime+3,w
 13720  0DB7  00F6               	movwf	?i1___lmul+3
 13721  0DB8  0826               	movf	??i1_WriteTime+2,w
 13722  0DB9  00F5               	movwf	?i1___lmul+2
 13723  0DBA  0825               	movf	??i1_WriteTime+1,w
 13724  0DBB  00F4               	movwf	?i1___lmul+1
 13725  0DBC  0824               	movf	??i1_WriteTime,w
 13726  0DBD  00F3               	movwf	?i1___lmul
 13727  0DBE  3064               	movlw	100
 13728  0DBF  00F7               	movwf	?i1___lmul+4
 13729  0DC0  01F8               	clrf	?i1___lmul+5
 13730  0DC1  01F9               	clrf	?i1___lmul+6
 13731  0DC2  01FA               	clrf	?i1___lmul+7
 13732  0DC3  24DC               	fcall	i1___lmul
 13733  0DC4  0876               	movf	?i1___lmul+3,w
 13734  0DC5  1683               	bsf	3,5	;RP0=1, select bank3
 13735  0DC6  1703               	bsf	3,6	;RP1=1, select bank3
 13736  0DC7  00DD               	movwf	(_Clock+3)^(0+384)
 13737  0DC8  0875               	movf	?i1___lmul+2,w
 13738  0DC9  00DC               	movwf	(_Clock+2)^(0+384)
 13739  0DCA  0874               	movf	?i1___lmul+1,w
 13740  0DCB  00DB               	movwf	(_Clock+1)^(0+384)
 13741  0DCC  0873               	movf	?i1___lmul,w
 13742  0DCD  00DA               	movwf	_Clock^(0+384)
 13743                           
 13744                           ;prog.c: 1439: INTCON = INTCON_BUP;
 13745  0DCE  1283               	bcf	3,5	;RP0=0, select bank0
 13746  0DCF  1303               	bcf	3,6	;RP1=0, select bank0
 13747  0DD0  0830               	movf	i1WriteTime@INTCON_BUP,w	;volatile
 13748  0DD1  008B               	movwf	11	;volatile
 13749  0DD2  0008               	return
 13750  0DD3                     __end_ofi1_WriteTime:	
 13751  0DD3                     __ptext2305:	
 13752 ;; =============== function i1___lwdiv ends ============
 13753                           
 13754                           
 13755 ;; *************** function i1_I2CSend *****************
 13756 ;; Defined at:
 13757 ;;		line 1472 in file "prog.c"
 13758 ;; Parameters:    Size  Location     Type
 13759 ;;  I2CSend         1    wreg     unsigned char 
 13760 ;; Auto vars:     Size  Location     Type
 13761 ;;  I2CSend         1    0[COMMON] unsigned char 
 13762 ;; Return value:  Size  Location     Type
 13763 ;;		None               void
 13764 ;; Registers used:
 13765 ;;		wreg, status,2
 13766 ;; Tracked objects:
 13767 ;;		On entry : 40/20
 13768 ;;		On exit  : 60/20
 13769 ;;		Unchanged: FFF9F/0
 13770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13771 ;;      Params:         0       0       0       0       0
 13772 ;;      Locals:         1       0       0       0       0
 13773 ;;      Temps:          0       0       0       0       0
 13774 ;;      Totals:         1       0       0       0       0
 13775 ;;Total ram usage:        1 bytes
 13776 ;; Hardware stack levels used:    1
 13777 ;; This function calls:
 13778 ;;		Nothing
 13779 ;; This function is called by:
 13780 ;;		_ReadTime
 13781 ;;		i1_WriteTime
 13782 ;; This function uses a non-reentrant model
 13783 ;;
 13784  0DD3                     i1_I2CSend:	
 13785                           
 13786 ;; hardware stack exceeded
 13787                           ; Regs used in i1_I2CSend: [wreg+status,2]
 13788                           ;i1I2CSend@dat stored from wreg
 13789  0DD3  00F0               	movwf	i1I2CSend@dat
 13790                           
 13791                           ;prog.c: 1473: SSPBUF = dat;
 13792  0DD4  0870               	movf	i1I2CSend@dat,w
 13793  0DD5  1283               	bcf	3,5	;RP0=0, select bank0
 13794  0DD6  0093               	movwf	19	;volatile
 13795  0DD7                     i1l1401:	
 13796                           ;prog.c: 1474: while(BF);
 13797                           
 13798  0DD7  1683               	bsf	3,5	;RP0=1, select bank1
 13799  0DD8  1814               	btfsc	20,0
 13800  0DD9  2DD7               	goto	i1l1401
 13801  0DDA                     i1l8095:	
 13802  0DDA  0811               	movf	17,w
 13803  0DDB  391F               	andlw	31
 13804  0DDC  1D03               	btfss	3,2
 13805  0DDD  2DDA               	goto	i1l8095
 13806  0DDE  1D14               	btfss	20,2
 13807  0DDF  0008               	return
 13808  0DE0  2DDA               	goto	i1l8095
 13809  0DE1                     __end_ofi1_I2CSend:	
 13810  0DE1                     __ptext2306:	
 13811 ;; =============== function i1_I2CSend ends ============
 13812                           
 13813                           
 13814 ;; *************** function i1_I2CStop *****************
 13815 ;; Defined at:
 13816 ;;		line 1453 in file "prog.c"
 13817 ;; Parameters:    Size  Location     Type
 13818 ;;		None
 13819 ;; Auto vars:     Size  Location     Type
 13820 ;;		None
 13821 ;; Return value:  Size  Location     Type
 13822 ;;		None               void
 13823 ;; Registers used:
 13824 ;;		None
 13825 ;; Tracked objects:
 13826 ;;		On entry : 60/20
 13827 ;;		On exit  : 60/20
 13828 ;;		Unchanged: FFF9F/0
 13829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13830 ;;      Params:         0       0       0       0       0
 13831 ;;      Locals:         0       0       0       0       0
 13832 ;;      Temps:          0       0       0       0       0
 13833 ;;      Totals:         0       0       0       0       0
 13834 ;;Total ram usage:        0 bytes
 13835 ;; Hardware stack levels used:    1
 13836 ;; This function calls:
 13837 ;;		Nothing
 13838 ;; This function is called by:
 13839 ;;		_ReadTime
 13840 ;;		i1_WriteTime
 13841 ;; This function uses a non-reentrant model
 13842 ;;
 13843  0DE1                     i1_I2CStop:	
 13844                           
 13845                           ;prog.c: 1454: PEN = 1;
 13846                           
 13847 ;; hardware stack exceeded
 13848                           ; Regs used in i1_I2CStop: []
 13849  0DE1  1511               	bsf	17,2
 13850  0DE2                     i1l1377:	
 13851                           ;prog.c: 1455: while(PEN);
 13852                           
 13853  0DE2  1D11               	btfss	17,2
 13854  0DE3  0008               	return
 13855  0DE4  2DE2               	goto	i1l1377
 13856  0DE5                     __end_ofi1_I2CStop:	
 13857  0DE5                     __ptext2299:	
 13858 ;; =============== function i1_ReadFourBytesEE ends ============
 13859                           
 13860                           
 13861 ;; *************** function _BCD_to_DEC *****************
 13862 ;; Defined at:
 13863 ;;		line 1355 in file "prog.c"
 13864 ;; Parameters:    Size  Location     Type
 13865 ;;  BCD             1    wreg     unsigned char 
 13866 ;; Auto vars:     Size  Location     Type
 13867 ;;  BCD             1   12[COMMON] unsigned char 
 13868 ;; Return value:  Size  Location     Type
 13869 ;;                  1    wreg      unsigned char 
 13870 ;; Registers used:
 13871 ;;		wreg, status,2, status,0, pclath, cstack
 13872 ;; Tracked objects:
 13873 ;;		On entry : 60/0
 13874 ;;		On exit  : 60/0
 13875 ;;		Unchanged: FFF9F/0
 13876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13877 ;;      Params:         0       0       0       0       0
 13878 ;;      Locals:         1       0       0       0       0
 13879 ;;      Temps:          1       0       0       0       0
 13880 ;;      Totals:         2       0       0       0       0
 13881 ;;Total ram usage:        2 bytes
 13882 ;; Hardware stack levels used:    1
 13883 ;; Hardware stack levels required when called:    1
 13884 ;; This function calls:
 13885 ;;		___bmul
 13886 ;; This function is called by:
 13887 ;;		_ReadTime
 13888 ;; This function uses a non-reentrant model
 13889 ;;
 13890  0DE5                     _BCD_to_DEC:	
 13891                           
 13892 ;; hardware stack exceeded
 13893                           ; Regs used in _BCD_to_DEC: [wreg+status,2+status,0+pclath+cstack]
 13894                           ;BCD_to_DEC@BCD stored from wreg
 13895  0DE5  00FC               	movwf	BCD_to_DEC@BCD
 13896                           
 13897                           ;prog.c: 1356: return (BCD & 0b11110000) / 16 * 10 + (BCD & 0b00001111);
 13898  0DE6  300A               	movlw	10
 13899  0DE7  00F0               	movwf	?___bmul
 13900  0DE8  0E7C               	swapf	BCD_to_DEC@BCD,w
 13901  0DE9  390F               	andlw	15
 13902  0DEA  27F2               	fcall	___bmul
 13903  0DEB  00FB               	movwf	??_BCD_to_DEC
 13904  0DEC  087C               	movf	BCD_to_DEC@BCD,w
 13905  0DED  390F               	andlw	15
 13906  0DEE  077B               	addwf	??_BCD_to_DEC,w
 13907  0DEF  0008               	return
 13908  0DF0                     __end_of_BCD_to_DEC:	
 13909  0DF0                     __ptext2315:	
 13910 ;; =============== function ___bmul ends ============
 13911                           
 13912                           
 13913 ;; *************** function _I2CNak *****************
 13914 ;; Defined at:
 13915 ;;		line 1467 in file "prog.c"
 13916 ;; Parameters:    Size  Location     Type
 13917 ;;		None
 13918 ;; Auto vars:     Size  Location     Type
 13919 ;;		None
 13920 ;; Return value:  Size  Location     Type
 13921 ;;		None               void
 13922 ;; Registers used:
 13923 ;;		None
 13924 ;; Tracked objects:
 13925 ;;		On entry : 60/0
 13926 ;;		On exit  : 60/20
 13927 ;;		Unchanged: FFF9F/0
 13928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13929 ;;      Params:         0       0       0       0       0
 13930 ;;      Locals:         0       0       0       0       0
 13931 ;;      Temps:          0       0       0       0       0
 13932 ;;      Totals:         0       0       0       0       0
 13933 ;;Total ram usage:        0 bytes
 13934 ;; Hardware stack levels used:    1
 13935 ;; This function calls:
 13936 ;;		Nothing
 13937 ;; This function is called by:
 13938 ;;		_ReadTime
 13939 ;; This function uses a non-reentrant model
 13940 ;;
 13941  0DF0                     _I2CNak:	
 13942                           
 13943                           ;prog.c: 1468: ACKDT = 1;
 13944                           
 13945                           ; Regs used in _I2CNak: []
 13946  0DF0  1683               	bsf	3,5	;RP0=1, select bank1
 13947  0DF1  1691               	bsf	17,5
 13948                           
 13949                           ;prog.c: 1469: ACKEN = 1;
 13950  0DF2  1611               	bsf	17,4
 13951  0DF3                     i1l1395:	
 13952                           ;prog.c: 1470: while(ACKEN);
 13953                           
 13954  0DF3  1E11               	btfss	17,4
 13955  0DF4  0008               	return
 13956  0DF5  2DF3               	goto	i1l1395
 13957  0DF6                     __end_of_I2CNak:	
 13958  0DF6                     __ptext2308:	
 13959 ;; =============== function i1_I2CStart ends ============
 13960                           
 13961                           
 13962 ;; *************** function i1_I2CInit *****************
 13963 ;; Defined at:
 13964 ;;		line 1441 in file "prog.c"
 13965 ;; Parameters:    Size  Location     Type
 13966 ;;		None
 13967 ;; Auto vars:     Size  Location     Type
 13968 ;;		None
 13969 ;; Return value:  Size  Location     Type
 13970 ;;		None               void
 13971 ;; Registers used:
 13972 ;;		wreg
 13973 ;; Tracked objects:
 13974 ;;		On entry : 0/0
 13975 ;;		On exit  : 60/20
 13976 ;;		Unchanged: FFF9F/0
 13977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 13978 ;;      Params:         0       0       0       0       0
 13979 ;;      Locals:         0       0       0       0       0
 13980 ;;      Temps:          0       0       0       0       0
 13981 ;;      Totals:         0       0       0       0       0
 13982 ;;Total ram usage:        0 bytes
 13983 ;; Hardware stack levels used:    1
 13984 ;; This function calls:
 13985 ;;		Nothing
 13986 ;; This function is called by:
 13987 ;;		_ReadTime
 13988 ;;		i1_WriteTime
 13989 ;; This function uses a non-reentrant model
 13990 ;;
 13991  0DF6                     i1_I2CInit:	
 13992                           
 13993                           ;prog.c: 1442: TRISC3 = 1;
 13994                           
 13995 ;; hardware stack exceeded
 13996                           ; Regs used in i1_I2CInit: [wreg]
 13997  0DF6  1683               	bsf	3,5	;RP0=1, select bank1
 13998  0DF7  1303               	bcf	3,6	;RP1=0, select bank1
 13999  0DF8  1587               	bsf	7,3
 14000                           
 14001                           ;prog.c: 1443: TRISC4 = 1;
 14002  0DF9  1607               	bsf	7,4
 14003                           
 14004                           ;prog.c: 1444: SSPSTAT |= 0x80;
 14005  0DFA  1794               	bsf	20,7	;volatile
 14006                           
 14007                           ;prog.c: 1445: SSPCON = 0x28;
 14008  0DFB  3028               	movlw	40
 14009  0DFC  1283               	bcf	3,5	;RP0=0, select bank0
 14010  0DFD  0094               	movwf	20	;volatile
 14011                           
 14012                           ;prog.c: 1446: SSPADD = 0x27;
 14013  0DFE  3027               	movlw	39
 14014  0DFF  1683               	bsf	3,5	;RP0=1, select bank1
 14015  0E00  0093               	movwf	19	;volatile
 14016  0E01  0008               	return
 14017  0E02                     __end_ofi1_I2CInit:	
 14018  0E02                     __ptext2307:	
 14019 ;; =============== function i1_I2CStop ends ============
 14020                           
 14021                           
 14022 ;; *************** function i1_I2CStart *****************
 14023 ;; Defined at:
 14024 ;;		line 1448 in file "prog.c"
 14025 ;; Parameters:    Size  Location     Type
 14026 ;;		None
 14027 ;; Auto vars:     Size  Location     Type
 14028 ;;		None
 14029 ;; Return value:  Size  Location     Type
 14030 ;;		None               void
 14031 ;; Registers used:
 14032 ;;		None
 14033 ;; Tracked objects:
 14034 ;;		On entry : 60/20
 14035 ;;		On exit  : 60/20
 14036 ;;		Unchanged: FFF9F/0
 14037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14038 ;;      Params:         0       0       0       0       0
 14039 ;;      Locals:         0       0       0       0       0
 14040 ;;      Temps:          0       0       0       0       0
 14041 ;;      Totals:         0       0       0       0       0
 14042 ;;Total ram usage:        0 bytes
 14043 ;; Hardware stack levels used:    1
 14044 ;; This function calls:
 14045 ;;		Nothing
 14046 ;; This function is called by:
 14047 ;;		_ReadTime
 14048 ;;		i1_WriteTime
 14049 ;; This function uses a non-reentrant model
 14050 ;;
 14051  0E02                     i1_I2CStart:	
 14052                           
 14053                           ;prog.c: 1449: SEN = 1;
 14054                           
 14055 ;; hardware stack exceeded
 14056                           ; Regs used in i1_I2CStart: []
 14057  0E02  1411               	bsf	17,0
 14058  0E03                     i1l1371:	
 14059                           ;prog.c: 1450: while(SEN);
 14060                           
 14061  0E03  1C11               	btfss	17,0
 14062  0E04  0008               	return
 14063  0E05  2E03               	goto	i1l1371
 14064  0E06                     __end_ofi1_I2CStart:	
 14065  0E06                     __ptext2318:	
 14066 ;; =============== function _I2CRead ends ============
 14067                           
 14068                           
 14069 ;; *************** function _I2CRestart *****************
 14070 ;; Defined at:
 14071 ;;		line 1458 in file "prog.c"
 14072 ;; Parameters:    Size  Location     Type
 14073 ;;		None
 14074 ;; Auto vars:     Size  Location     Type
 14075 ;;		None
 14076 ;; Return value:  Size  Location     Type
 14077 ;;		None               void
 14078 ;; Registers used:
 14079 ;;		None
 14080 ;; Tracked objects:
 14081 ;;		On entry : 60/20
 14082 ;;		On exit  : 60/20
 14083 ;;		Unchanged: FFF9F/0
 14084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14085 ;;      Params:         0       0       0       0       0
 14086 ;;      Locals:         0       0       0       0       0
 14087 ;;      Temps:          0       0       0       0       0
 14088 ;;      Totals:         0       0       0       0       0
 14089 ;;Total ram usage:        0 bytes
 14090 ;; Hardware stack levels used:    1
 14091 ;; This function calls:
 14092 ;;		Nothing
 14093 ;; This function is called by:
 14094 ;;		_ReadTime
 14095 ;; This function uses a non-reentrant model
 14096 ;;
 14097  0E06                     _I2CRestart:	
 14098                           
 14099                           ;prog.c: 1459: RSEN = 1;
 14100                           
 14101                           ; Regs used in _I2CRestart: []
 14102  0E06  1491               	bsf	17,1
 14103  0E07                     i1l1383:	
 14104                           ;prog.c: 1460: while(RSEN);
 14105                           
 14106  0E07  1C91               	btfss	17,1
 14107  0E08  0008               	return
 14108  0E09  2E07               	goto	i1l1383
 14109  0E0A                     __end_of_I2CRestart:	
 14110  0E0A                     __ptext2295:	
 14111 ;; =============== function _ReadTime ends ============
 14112                           
 14113                           
 14114 ;; *************** function _SignalsOnOff *****************
 14115 ;; Defined at:
 14116 ;;		line 1144 in file "prog.c"
 14117 ;; Parameters:    Size  Location     Type
 14118 ;;		None
 14119 ;; Auto vars:     Size  Location     Type
 14120 ;;  DayTime         2   18[BANK0 ] unsigned int 
 14121 ;;  ThisTime        2   16[BANK0 ] unsigned int 
 14122 ;;  ThisDay         1   22[BANK0 ] unsigned char 
 14123 ;;  TimeStop        2   12[BANK0 ] unsigned int 
 14124 ;;  TimeStart       2   10[BANK0 ] unsigned int 
 14125 ;;  Signals         1   21[BANK0 ] unsigned char 
 14126 ;;  Days            1   20[BANK0 ] unsigned char 
 14127 ;;  Data            1   23[BANK0 ] unsigned char 
 14128 ;;  Data            4   24[BANK0 ] unsigned long 
 14129 ;; Return value:  Size  Location     Type
 14130 ;;		None               void
 14131 ;; Registers used:
 14132 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14133 ;; Tracked objects:
 14134 ;;		On entry : 60/0
 14135 ;;		On exit  : 60/0
 14136 ;;		Unchanged: FFE00/0
 14137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14138 ;;      Params:         0       0       0       0       0
 14139 ;;      Locals:         0      18       0       0       0
 14140 ;;      Temps:          0       2       0       0       0
 14141 ;;      Totals:         0      20       0       0       0
 14142 ;;Total ram usage:       20 bytes
 14143 ;; Hardware stack levels used:    1
 14144 ;; Hardware stack levels required when called:    2
 14145 ;; This function calls:
 14146 ;;		i1_ReadFourBytesEE
 14147 ;;		i1___aldiv
 14148 ;;		i1___lwmod
 14149 ;;		i1___lwdiv
 14150 ;;		i1_ConvertDayToBit
 14151 ;;		i1_EEWR
 14152 ;; This function is called by:
 14153 ;;		_F
 14154 ;; This function uses a non-reentrant model
 14155 ;;
 14156  0E0A                     _SignalsOnOff:	
 14157                           
 14158                           ;prog.c: 1145: if(!TimeIsRead) return;
 14159                           
 14160 ;; hardware stack exceeded
 14161                           ; Regs used in _SignalsOnOff: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14162  0E0A  1FDD               	btfss	_TimeIsRead/(0+8),_TimeIsRead& (0+7)
 14163  0E0B  0008               	return
 14164                           
 14165                           ;prog.c: 1146: if(!LockSignals && CurrentReadingCell<240){
 14166  0E0C  1A5D               	btfsc	_LockSignals/(0+8),_LockSignals& (0+7)
 14167  0E0D  2EB2               	goto	i1l1264
 14168  0E0E  30F0               	movlw	240
 14169  0E0F  0258               	subwf	_CurrentReadingCell,w
 14170  0E10  1803               	skipnc
 14171  0E11  2EB2               	goto	i1l1264
 14172                           
 14173                           ;prog.c: 1147: unsigned long int Data = ReadFourBytesEE(CurrentReadingCell);
 14174  0E12  0858               	movf	_CurrentReadingCell,w
 14175  0E13  160A  158A  2162   	fcall	i1_ReadFourBytesEE
      +       120A  158A         
 14176  0E18  0876               	movf	?i1_ReadFourBytesEE+3,w
 14177  0E19  00BB               	movwf	SignalsOnOff@Data+3
 14178  0E1A  0875               	movf	?i1_ReadFourBytesEE+2,w
 14179  0E1B  00BA               	movwf	SignalsOnOff@Data+2
 14180  0E1C  0874               	movf	?i1_ReadFourBytesEE+1,w
 14181  0E1D  00B9               	movwf	SignalsOnOff@Data+1
 14182  0E1E  0873               	movf	?i1_ReadFourBytesEE,w
 14183  0E1F  00B8               	movwf	SignalsOnOff@Data
 14184                           
 14185                           ;prog.c: 1148: if(Data!=0xFFFFFFFF){
 14186  0E20  0A38               	incf	SignalsOnOff@Data,w
 14187  0E21  1903               	skipnz
 14188  0E22  0A39               	incf	SignalsOnOff@Data+1,w
 14189  0E23  1903               	skipnz
 14190  0E24  0A3A               	incf	SignalsOnOff@Data+2,w
 14191  0E25  1903               	skipnz
 14192  0E26  0A3B               	incf	SignalsOnOff@Data+3,w
 14193  0E27  1903               	skipnz
 14194  0E28  2EAF               	goto	i1l1265
 14195                           
 14196                           ;prog.c: 1149: unsigned int TimeStart;
 14197                           ;prog.c: 1150: unsigned int TimeStop;
 14198                           ;prog.c: 1151: unsigned char Days;
 14199                           ;prog.c: 1152: unsigned char Signals;
 14200                           ;prog.c: 1153: TimeStart = Data%2048;
 14201  0E29  0839               	movf	SignalsOnOff@Data+1,w
 14202  0E2A  00AB               	movwf	SignalsOnOff@TimeStart+1
 14203  0E2B  0838               	movf	SignalsOnOff@Data,w
 14204  0E2C  00AA               	movwf	SignalsOnOff@TimeStart
 14205  0E2D  3007               	movlw	7
 14206  0E2E  05AB               	andwf	SignalsOnOff@TimeStart+1,f
 14207                           
 14208                           ;prog.c: 1154: Data/=2048;
 14209  0E2F  300B               	movlw	11
 14210  0E30                     u398_25:	
 14211  0E30  1003               	clrc
 14212  0E31  0CBB               	rrf	SignalsOnOff@Data+3,f
 14213  0E32  0CBA               	rrf	SignalsOnOff@Data+2,f
 14214  0E33  0CB9               	rrf	SignalsOnOff@Data+1,f
 14215  0E34  0CB8               	rrf	SignalsOnOff@Data,f
 14216  0E35  3EFF               	addlw	-1
 14217  0E36  1D03               	skipz
 14218  0E37  2E30               	goto	u398_25
 14219                           
 14220                           ;prog.c: 1155: TimeStop = Data%2048;
 14221  0E38  0839               	movf	SignalsOnOff@Data+1,w
 14222  0E39  00AD               	movwf	SignalsOnOff@TimeStop+1
 14223  0E3A  0838               	movf	SignalsOnOff@Data,w
 14224  0E3B  00AC               	movwf	SignalsOnOff@TimeStop
 14225  0E3C  3007               	movlw	7
 14226  0E3D  05AD               	andwf	SignalsOnOff@TimeStop+1,f
 14227                           
 14228                           ;prog.c: 1156: Data/=2048;
 14229  0E3E  300B               	movlw	11
 14230  0E3F                     u399_25:	
 14231  0E3F  1003               	clrc
 14232  0E40  0CBB               	rrf	SignalsOnOff@Data+3,f
 14233  0E41  0CBA               	rrf	SignalsOnOff@Data+2,f
 14234  0E42  0CB9               	rrf	SignalsOnOff@Data+1,f
 14235  0E43  0CB8               	rrf	SignalsOnOff@Data,f
 14236  0E44  3EFF               	addlw	-1
 14237  0E45  1D03               	skipz
 14238  0E46  2E3F               	goto	u399_25
 14239                           
 14240                           ;prog.c: 1157: Days = Data%128;
 14241  0E47  0838               	movf	SignalsOnOff@Data,w
 14242  0E48  00B4               	movwf	SignalsOnOff@Days
 14243  0E49  3007               	movlw	7
 14244  0E4A  13B4               	bcf	SignalsOnOff@Days,7
 14245  0E4B                     u400_25:	
 14246                           ;prog.c: 1158: Data/=128;
 14247                           
 14248  0E4B  1003               	clrc
 14249  0E4C  0CBB               	rrf	SignalsOnOff@Data+3,f
 14250  0E4D  0CBA               	rrf	SignalsOnOff@Data+2,f
 14251  0E4E  0CB9               	rrf	SignalsOnOff@Data+1,f
 14252  0E4F  0CB8               	rrf	SignalsOnOff@Data,f
 14253  0E50  3EFF               	addlw	-1
 14254  0E51  1D03               	skipz
 14255  0E52  2E4B               	goto	u400_25
 14256                           
 14257                           ;prog.c: 1159: Signals = Data%8;
 14258  0E53  0838               	movf	SignalsOnOff@Data,w
 14259  0E54  00B5               	movwf	SignalsOnOff@Signals
 14260  0E55  3007               	movlw	7
 14261  0E56  05B5               	andwf	SignalsOnOff@Signals,f
 14262                           
 14263                           ;prog.c: 1160: if(Signals!=0 && Days!=0){
 14264  0E57  0835               	movf	SignalsOnOff@Signals,w
 14265  0E58  1903               	btfsc	3,2
 14266  0E59  2EAF               	goto	i1l1265
 14267  0E5A  0834               	movf	SignalsOnOff@Days,w
 14268  0E5B  1903               	btfsc	3,2
 14269  0E5C  2EAF               	goto	i1l1265
 14270                           
 14271                           ;prog.c: 1161: unsigned int ThisTime;
 14272                           ;prog.c: 1162: unsigned char ThisDay;
 14273                           ;prog.c: 1163: unsigned int DayTime = (unsigned int)(Clock/6000);
 14274  0E5D  3017               	movlw	23
 14275  0E5E  01F3               	clrf	?i1___aldiv+3
 14276  0E5F  01F2               	clrf	?i1___aldiv+2
 14277  0E60  00F1               	movwf	?i1___aldiv+1
 14278  0E61  3070               	movlw	112
 14279  0E62  00F0               	movwf	?i1___aldiv
 14280  0E63  1683               	bsf	3,5	;RP0=1, select bank3
 14281  0E64  1703               	bsf	3,6	;RP1=1, select bank3
 14282  0E65  085D               	movf	(_Clock+3)^(0+384),w
 14283  0E66  00F7               	movwf	?i1___aldiv+7
 14284  0E67  085C               	movf	(_Clock+2)^(0+384),w
 14285  0E68  00F6               	movwf	?i1___aldiv+6
 14286  0E69  085B               	movf	(_Clock+1)^(0+384),w
 14287  0E6A  00F5               	movwf	?i1___aldiv+5
 14288  0E6B  085A               	movf	_Clock^(0+384),w
 14289  0E6C  00F4               	movwf	?i1___aldiv+4
 14290  0E6D  277D  120A  158A   	fcall	i1___aldiv
 14291  0E70  0871               	movf	?i1___aldiv+1,w
 14292  0E71  1283               	bcf	3,5	;RP0=0, select bank0
 14293  0E72  1303               	bcf	3,6	;RP1=0, select bank0
 14294  0E73  00B3               	movwf	SignalsOnOff@DayTime+1
 14295  0E74  0870               	movf	?i1___aldiv,w
 14296  0E75  00B2               	movwf	SignalsOnOff@DayTime
 14297                           
 14298                           ;prog.c: 1164: ThisTime = DayTime%1440;
 14299  0E76  30A0               	movlw	160
 14300  0E77  00F0               	movwf	?i1___lwmod
 14301  0E78  3005               	movlw	5
 14302  0E79  00F1               	movwf	?i1___lwmod+1
 14303  0E7A  0833               	movf	SignalsOnOff@DayTime+1,w
 14304  0E7B  00F3               	movwf	?i1___lwmod+3
 14305  0E7C  0832               	movf	SignalsOnOff@DayTime,w
 14306  0E7D  00F2               	movwf	?i1___lwmod+2
 14307  0E7E  2759  120A  158A   	fcall	i1___lwmod
 14308  0E81  0871               	movf	?i1___lwmod+1,w
 14309  0E82  00B1               	movwf	SignalsOnOff@ThisTime+1
 14310  0E83  0870               	movf	?i1___lwmod,w
 14311  0E84  00B0               	movwf	SignalsOnOff@ThisTime
 14312                           
 14313                           ;prog.c: 1165: ThisDay = DayTime/1440 + 1;
 14314  0E85  30A0               	movlw	160
 14315  0E86  00F0               	movwf	?i1___lwdiv
 14316  0E87  3005               	movlw	5
 14317  0E88  00F1               	movwf	?i1___lwdiv+1
 14318  0E89  0833               	movf	SignalsOnOff@DayTime+1,w
 14319  0E8A  00F3               	movwf	?i1___lwdiv+3
 14320  0E8B  0832               	movf	SignalsOnOff@DayTime,w
 14321  0E8C  00F2               	movwf	?i1___lwdiv+2
 14322  0E8D  272F  120A  158A   	fcall	i1___lwdiv
 14323  0E90  0870               	movf	?i1___lwdiv,w
 14324  0E91  00A8               	movwf	??_SignalsOnOff
 14325  0E92  0871               	movf	?i1___lwdiv+1,w
 14326  0E93  00A9               	movwf	??_SignalsOnOff+1
 14327  0E94  0A28               	incf	??_SignalsOnOff,w
 14328  0E95  00B6               	movwf	SignalsOnOff@ThisDay
 14329                           
 14330                           ;prog.c: 1166: ThisDay = ConvertDayToBit(ThisDay);
 14331  0E96  2715  120A  158A   	fcall	i1_ConvertDayToBit
 14332  0E99  00B6               	movwf	SignalsOnOff@ThisDay
 14333                           
 14334                           ;prog.c: 1167: if(((ThisDay&Days) > 0) && (TimeStart<=ThisTime) && (TimeStop>ThisTime)){
 14335  0E9A  0534               	andwf	SignalsOnOff@Days,w
 14336  0E9B  1903               	btfsc	3,2
 14337  0E9C  2EAF               	goto	i1l1265
 14338  0E9D  082B               	movf	SignalsOnOff@TimeStart+1,w
 14339  0E9E  0231               	subwf	SignalsOnOff@ThisTime+1,w
 14340  0E9F  1D03               	skipz
 14341  0EA0  2EA3               	goto	u404_25
 14342  0EA1  082A               	movf	SignalsOnOff@TimeStart,w
 14343  0EA2  0230               	subwf	SignalsOnOff@ThisTime,w
 14344  0EA3                     u404_25:	
 14345  0EA3  1C03               	skipc
 14346  0EA4  2EAF               	goto	i1l1265
 14347  0EA5  082D               	movf	SignalsOnOff@TimeStop+1,w
 14348  0EA6  0231               	subwf	SignalsOnOff@ThisTime+1,w
 14349  0EA7  1D03               	skipz
 14350  0EA8  2EAB               	goto	u405_25
 14351  0EA9  082C               	movf	SignalsOnOff@TimeStop,w
 14352  0EAA  0230               	subwf	SignalsOnOff@ThisTime,w
 14353  0EAB                     u405_25:	
 14354  0EAB  1803               	skipnc
 14355  0EAC  2EAF               	goto	i1l1265
 14356                           
 14357                           ;prog.c: 1168: SignalsOut = Signals|SignalsOut;
 14358  0EAD  0835               	movf	SignalsOnOff@Signals,w
 14359  0EAE  04DA               	iorwf	_SignalsOut,f	;volatile
 14360  0EAF                     i1l1265:	
 14361                           
 14362                           ;prog.c: 1169: }
 14363                           ;prog.c: 1170: }
 14364                           ;prog.c: 1171: }
 14365                           ;prog.c: 1172: CurrentReadingCell+=4;
 14366  0EAF  3004               	movlw	4
 14367  0EB0  07D8               	addwf	_CurrentReadingCell,f
 14368                           
 14369                           ;prog.c: 1173: }else{
 14370  0EB1  0008               	return
 14371  0EB2                     i1l1264:	
 14372                           
 14373                           ;prog.c: 1174: SignalsForInd = (LockSignals ? 0 : SignalsOut);
 14374  0EB2  1A5D               	btfsc	_LockSignals/(0+8),_LockSignals& (0+7)
 14375  0EB3  2EB7               	goto	i1l7487
 14376  0EB4  085A               	movf	_SignalsOut,w	;volatile
 14377  0EB5  00AE               	movwf	_SignalsOnOff$1441
 14378  0EB6  2EB8               	goto	L41
 14379  0EB7                     i1l7487:	
 14380  0EB7  01AE               	clrf	_SignalsOnOff$1441
 14381  0EB8                     L41:	
 14382  0EB8  01AF               	clrf	_SignalsOnOff$1441+1
 14383  0EB9  082E               	movf	_SignalsOnOff$1441,w
 14384  0EBA  1683               	bsf	3,5	;RP0=1, select bank3
 14385  0EBB  1703               	bsf	3,6	;RP1=1, select bank3
 14386  0EBC  00E0               	movwf	_SignalsForInd^(0+384)	;volatile
 14387                           
 14388                           ;prog.c: 1175: SignalsOut = 0;
 14389  0EBD  1283               	bcf	3,5	;RP0=0, select bank0
 14390  0EBE  1303               	bcf	3,6	;RP1=0, select bank0
 14391  0EBF  01DA               	clrf	_SignalsOut	;volatile
 14392                           
 14393                           ;prog.c: 1176: CurrentReadingCell = 0;
 14394  0EC0  01D8               	clrf	_CurrentReadingCell
 14395                           
 14396                           ;prog.c: 1177: unsigned char Data = (PORTB & 0b00011111) | ((CurrentSignals|SignalsForIn
      +                          d)*32);
 14397  0EC1  1683               	bsf	3,5	;RP0=1, select bank3
 14398  0EC2  1703               	bsf	3,6	;RP1=1, select bank3
 14399  0EC3  085F               	movf	_CurrentSignals^(0+384),w
 14400  0EC4  0460               	iorwf	_SignalsForInd^(0+384),w	;volatile
 14401  0EC5  1283               	bcf	3,5	;RP0=0, select bank0
 14402  0EC6  1303               	bcf	3,6	;RP1=0, select bank0
 14403  0EC7  00A8               	movwf	??_SignalsOnOff
 14404  0EC8  3005               	movlw	5
 14405  0EC9                     u407_25:	
 14406  0EC9  1003               	clrc
 14407  0ECA  0DA8               	rlf	??_SignalsOnOff,f
 14408  0ECB  3EFF               	addlw	-1
 14409  0ECC  1D03               	skipz
 14410  0ECD  2EC9               	goto	u407_25
 14411  0ECE  0806               	movf	6,w
 14412  0ECF  391F               	andlw	31
 14413  0ED0  0428               	iorwf	??_SignalsOnOff,w
 14414  0ED1  00B7               	movwf	SignalsOnOff@Data_1442
 14415                           
 14416                           ;prog.c: 1178: if((Data&0b11100000)!=CurrentSignalsData){
 14417  0ED2  39E0               	andlw	224
 14418  0ED3  0659               	xorwf	_CurrentSignalsData,w
 14419  0ED4  1903               	skipnz
 14420  0ED5  2EF2               	goto	i1l7501
 14421                           
 14422                           ;prog.c: 1179: EEWR(cMinutesAdress, cMinutes);
 14423  0ED6  085C               	movf	_cMinutes,w
 14424  0ED7  00F0               	movwf	?i1_EEWR
 14425  0ED8  30F0               	movlw	240
 14426  0ED9  26F9  120A  158A   	fcall	i1_EEWR
 14427                           
 14428                           ;prog.c: 1180: EEWR(cHoursAdress , cHours);
 14429  0EDC  085B               	movf	_cHours,w
 14430  0EDD  00F0               	movwf	?i1_EEWR
 14431  0EDE  30F1               	movlw	241
 14432  0EDF  26F9  120A  158A   	fcall	i1_EEWR
 14433                           
 14434                           ;prog.c: 1181: EEWR(cWeekDayAdress, cWeekDay);
 14435  0EE2  0865               	movf	_cWeekDay,w
 14436  0EE3  00F0               	movwf	?i1_EEWR
 14437  0EE4  30F2               	movlw	242
 14438  0EE5  26F9  120A  158A   	fcall	i1_EEWR
 14439                           
 14440                           ;prog.c: 1182: EEWR(cDaysAdress , cDays);
 14441  0EE8  0863               	movf	_cDays,w
 14442  0EE9  00F0               	movwf	?i1_EEWR
 14443  0EEA  30F3               	movlw	243
 14444  0EEB  26F9  120A  158A   	fcall	i1_EEWR
 14445                           
 14446                           ;prog.c: 1183: EEWR(cMonthsAdress , cMonths);
 14447  0EEE  0864               	movf	_cMonths,w
 14448  0EEF  00F0               	movwf	?i1_EEWR
 14449  0EF0  30F4               	movlw	244
 14450  0EF1  26F9               	fcall	i1_EEWR
 14451  0EF2                     i1l7501:	
 14452                           
 14453                           ;prog.c: 1184: }
 14454                           ;prog.c: 1185: CurrentSignalsData = Data&0b11100000;
 14455  0EF2  0837               	movf	SignalsOnOff@Data_1442,w
 14456  0EF3  00D9               	movwf	_CurrentSignalsData
 14457  0EF4  30E0               	movlw	224
 14458  0EF5  05D9               	andwf	_CurrentSignalsData,f
 14459                           
 14460                           ;prog.c: 1186: PORTB = Data;
 14461  0EF6  0837               	movf	SignalsOnOff@Data_1442,w
 14462  0EF7  0086               	movwf	6	;volatile
 14463  0EF8  0008               	return
 14464  0EF9                     __end_of_SignalsOnOff:	
 14465  0EF9                     __ptext2313:	
 14466 ;; =============== function i1_EERD ends ============
 14467                           
 14468                           
 14469 ;; *************** function i1_EEWR *****************
 14470 ;; Defined at:
 14471 ;;		line 391 in file "prog.c"
 14472 ;; Parameters:    Size  Location     Type
 14473 ;;  EEWR            1    wreg     unsigned char 
 14474 ;;  EEWR            1    0[COMMON] unsigned char 
 14475 ;; Auto vars:     Size  Location     Type
 14476 ;;  EEWR            1    1[COMMON] unsigned char 
 14477 ;;  EEWR            1    2[COMMON] volatile unsigned char 
 14478 ;; Return value:  Size  Location     Type
 14479 ;;		None               void
 14480 ;; Registers used:
 14481 ;;		wreg
 14482 ;; Tracked objects:
 14483 ;;		On entry : 60/0
 14484 ;;		On exit  : 60/0
 14485 ;;		Unchanged: FFE00/0
 14486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14487 ;;      Params:         1       0       0       0       0
 14488 ;;      Locals:         2       0       0       0       0
 14489 ;;      Temps:          0       0       0       0       0
 14490 ;;      Totals:         3       0       0       0       0
 14491 ;;Total ram usage:        3 bytes
 14492 ;; Hardware stack levels used:    1
 14493 ;; This function calls:
 14494 ;;		Nothing
 14495 ;; This function is called by:
 14496 ;;		_SignalsOnOff
 14497 ;; This function uses a non-reentrant model
 14498 ;;
 14499  0EF9                     i1_EEWR:	
 14500                           
 14501                           ; Regs used in i1_EEWR: [wreg]
 14502                           ;i1EEWR@adress stored from wreg
 14503  0EF9  00F1               	movwf	i1EEWR@adress
 14504                           
 14505                           ;prog.c: 392: volatile unsigned char INTCON_BUP = INTCON;
 14506  0EFA  080B               	movf	11,w	;volatile
 14507  0EFB  00F2               	movwf	i1EEWR@INTCON_BUP	;volatile
 14508                           
 14509                           ;prog.c: 393: GIE = 0;
 14510  0EFC  138B               	bcf	11,7
 14511  0EFD  0064               	clrwdt	;#
 14512                           
 14513                           ;prog.c: 395: EEADR = adress;
 14514  0EFE  0871               	movf	i1EEWR@adress,w
 14515  0EFF  1283               	bcf	3,5	;RP0=0, select bank2
 14516  0F00  1703               	bsf	3,6	;RP1=1, select bank2
 14517  0F01  008D               	movwf	13	;volatile
 14518                           
 14519                           ;prog.c: 396: EEDATA = data;
 14520  0F02  0870               	movf	i1EEWR@data,w
 14521  0F03  008C               	movwf	12	;volatile
 14522                           
 14523                           ;prog.c: 397: EEPGD = 0;
 14524  0F04  1683               	bsf	3,5	;RP0=1, select bank3
 14525  0F05  3055               	movlw	85
 14526  0F06  138C               	bcf	12,7
 14527  0F07  150C               	bsf	12,2
 14528                           
 14529                           ;prog.c: 399: EECON2 = 0x55;
 14530  0F08  008D               	movwf	13	;volatile
 14531                           
 14532                           ;prog.c: 400: EECON2 = 0xAA;
 14533  0F09  30AA               	movlw	170
 14534  0F0A  008D               	movwf	13	;volatile
 14535                           
 14536                           ;prog.c: 401: WR = 1;
 14537  0F0B  148C               	bsf	12,1
 14538                           
 14539                           ;prog.c: 402: WREN = 0;
 14540  0F0C  110C               	bcf	12,2
 14541  0F0D                     i1l903:	
 14542                           ;prog.c: 403: while(WR==1){}
 14543                           
 14544  0F0D  188C               	btfsc	12,1
 14545  0F0E  2F0D               	goto	i1l903
 14546                           
 14547                           ;prog.c: 404: EEIF = 0;
 14548  0F0F  1283               	bcf	3,5	;RP0=0, select bank0
 14549  0F10  1303               	bcf	3,6	;RP1=0, select bank0
 14550  0F11  120D               	bcf	13,4
 14551                           
 14552                           ;prog.c: 405: INTCON = INTCON_BUP;
 14553  0F12  0872               	movf	i1EEWR@INTCON_BUP,w	;volatile
 14554  0F13  008B               	movwf	11	;volatile
 14555  0F14  0008               	return
 14556  0F15                     __end_ofi1_EEWR:	
 14557  0F15                     __ptext2310:	
 14558 ;; =============== function i1_FillMinutes ends ============
 14559                           
 14560                           
 14561 ;; *************** function i1_ConvertDayToBit *****************
 14562 ;; Defined at:
 14563 ;;		line 858 in file "prog.c"
 14564 ;; Parameters:    Size  Location     Type
 14565 ;;  ConvertDayTo    1    wreg     unsigned char 
 14566 ;; Auto vars:     Size  Location     Type
 14567 ;;  ConvertDayTo    1    0[COMMON] unsigned char 
 14568 ;; Return value:  Size  Location     Type
 14569 ;;                  1    wreg      unsigned char 
 14570 ;; Registers used:
 14571 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14572 ;; Tracked objects:
 14573 ;;		On entry : 60/0
 14574 ;;		On exit  : 60/0
 14575 ;;		Unchanged: FFF9F/0
 14576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14577 ;;      Params:         0       0       0       0       0
 14578 ;;      Locals:         1       0       0       0       0
 14579 ;;      Temps:          0       0       0       0       0
 14580 ;;      Totals:         1       0       0       0       0
 14581 ;;Total ram usage:        1 bytes
 14582 ;; Hardware stack levels used:    1
 14583 ;; This function calls:
 14584 ;;		Nothing
 14585 ;; This function is called by:
 14586 ;;		_SignalsOnOff
 14587 ;; This function uses a non-reentrant model
 14588 ;;
 14589  0F15                     i1_ConvertDayToBit:	
 14590                           
 14591                           ; Regs used in i1_ConvertDayToBit: [wreg-fsr0h+status,2+status,0]
 14592                           ;i1ConvertDayToBit@DayNumber stored from wreg
 14593  0F15  00F0               	movwf	i1ConvertDayToBit@DayNumber
 14594                           
 14595                           ;prog.c: 859: switch (DayNumber){
 14596  0F16  2F1E               	goto	i1l8049
 14597  0F17                     i1l8015:	
 14598  0F17  3401               	retlw	1
 14599  0F18                     i1l8019:	
 14600  0F18  3402               	retlw	2
 14601  0F19                     i1l8023:	
 14602  0F19  3404               	retlw	4
 14603  0F1A                     i1l8027:	
 14604  0F1A  3408               	retlw	8
 14605  0F1B                     i1l8031:	
 14606  0F1B  3410               	retlw	16
 14607  0F1C                     i1l8035:	
 14608  0F1C  3420               	retlw	32
 14609  0F1D                     i1l8039:	
 14610  0F1D  3440               	retlw	64
 14611  0F1E                     i1l8049:	
 14612  0F1E  0870               	movf	i1ConvertDayToBit@DayNumber,w
 14613                           
 14614                           ; Switch size 1, requested type "speed"
 14615                           ; Number of cases is 7, Range of values is 1 to 7
 14616                           ; switch strategies available:
 14617                           ; Name         Instructions Cycles
 14618                           ; direct_byte           32    11 (fixed)
 14619                           ; simple_byte           22    12 (average)
 14620                           ; jumptable            263     9 (fixed)
 14621                           ;	Chosen strategy is direct_byte
 14622  0F1F  3EFF               	addlw	-1
 14623  0F20  1C03               	skipc
 14624  0F21  3400               	retlw	0
 14625  0F22  0084               	movwf	4
 14626  0F23  3007               	movlw	7
 14627  0F24  0204               	subwf	4,w
 14628  0F25  1803               	skipnc
 14629  0F26  3400               	retlw	0
 14630  0F27  3018               	movlw	high i1S11381
 14631  0F28  008A               	movwf	10
 14632  0F29  1003               	clrc
 14633  0F2A  0D04               	rlf	4,w
 14634  0F2B  0704               	addwf	4,w
 14635  0F2C  3E51               	addlw	low i1S11381
 14636  0F2D  0082               	movwf	2
 14637  0F2E  0008               	return
 14638  0F2F                     __end_ofi1_ConvertDayToBit:	
 14639  0F2F                     __ptext2304:	
 14640 ;; =============== function i1___lwmod ends ============
 14641                           
 14642                           
 14643 ;; *************** function i1___lwdiv *****************
 14644 ;; Defined at:
 14645 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lwdiv.c"
 14646 ;; Parameters:    Size  Location     Type
 14647 ;;  __lwdiv         2    0[COMMON] unsigned int 
 14648 ;;  __lwdiv         2    2[COMMON] unsigned int 
 14649 ;; Auto vars:     Size  Location     Type
 14650 ;;  __lwdiv         2    5[COMMON] unsigned int 
 14651 ;;  __lwdiv         1    4[COMMON] unsigned char 
 14652 ;; Return value:  Size  Location     Type
 14653 ;;                  2    0[COMMON] unsigned int 
 14654 ;; Registers used:
 14655 ;;		wreg, status,2, status,0
 14656 ;; Tracked objects:
 14657 ;;		On entry : 60/0
 14658 ;;		On exit  : 60/0
 14659 ;;		Unchanged: FFF9F/0
 14660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14661 ;;      Params:         4       0       0       0       0
 14662 ;;      Locals:         3       0       0       0       0
 14663 ;;      Temps:          0       0       0       0       0
 14664 ;;      Totals:         7       0       0       0       0
 14665 ;;Total ram usage:        7 bytes
 14666 ;; Hardware stack levels used:    1
 14667 ;; This function calls:
 14668 ;;		Nothing
 14669 ;; This function is called by:
 14670 ;;		_SignalsOnOff
 14671 ;; This function uses a non-reentrant model
 14672 ;;
 14673  0F2F                     i1___lwdiv:	
 14674                           
 14675                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
 14676  0F2F  01F5               	clrf	i1___lwdiv@quotient
 14677  0F30  01F6               	clrf	i1___lwdiv@quotient+1
 14678  0F31  0871               	movf	i1___lwdiv@divisor+1,w
 14679  0F32  0470               	iorwf	i1___lwdiv@divisor,w
 14680  0F33  1903               	skipnz
 14681  0F34  2F54               	goto	i1l8121
 14682  0F35  01F4               	clrf	i1___lwdiv@counter
 14683  0F36                     L48:	
 14684  0F36  0AF4               	incf	i1___lwdiv@counter,f
 14685  0F37  1BF1               	btfsc	i1___lwdiv@divisor+1,7
 14686  0F38  2F3D               	goto	i1l8109
 14687  0F39  1003               	clrc
 14688  0F3A  0DF0               	rlf	i1___lwdiv@divisor,f
 14689  0F3B  0DF1               	rlf	i1___lwdiv@divisor+1,f
 14690  0F3C  2F36               	goto	L48
 14691  0F3D                     i1l8109:	
 14692  0F3D  1003               	clrc
 14693  0F3E  0DF5               	rlf	i1___lwdiv@quotient,f
 14694  0F3F  0DF6               	rlf	i1___lwdiv@quotient+1,f
 14695  0F40  0871               	movf	i1___lwdiv@divisor+1,w
 14696  0F41  0273               	subwf	i1___lwdiv@dividend+1,w
 14697  0F42  1D03               	skipz
 14698  0F43  2F46               	goto	u504_25
 14699  0F44  0870               	movf	i1___lwdiv@divisor,w
 14700  0F45  0272               	subwf	i1___lwdiv@dividend,w
 14701  0F46                     u504_25:	
 14702  0F46  1C03               	skipc
 14703  0F47  2F50               	goto	L49
 14704  0F48  0870               	movf	i1___lwdiv@divisor,w
 14705  0F49  02F2               	subwf	i1___lwdiv@dividend,f
 14706  0F4A  0871               	movf	i1___lwdiv@divisor+1,w
 14707  0F4B  1C03               	skipc
 14708  0F4C  03F3               	decf	i1___lwdiv@dividend+1,f
 14709  0F4D  02F3               	subwf	i1___lwdiv@dividend+1,f
 14710  0F4E  1475               	bsf	i1___lwdiv@quotient,0
 14711  0F4F  1003               	clrc
 14712  0F50                     L49:	
 14713  0F50  0CF1               	rrf	i1___lwdiv@divisor+1,f
 14714  0F51  0CF0               	rrf	i1___lwdiv@divisor,f
 14715  0F52  0BF4               	decfsz	i1___lwdiv@counter,f
 14716  0F53  2F3D               	goto	i1l8109
 14717  0F54                     i1l8121:	
 14718  0F54  0876               	movf	i1___lwdiv@quotient+1,w
 14719  0F55  00F1               	movwf	?i1___lwdiv+1
 14720  0F56  0875               	movf	i1___lwdiv@quotient,w
 14721  0F57  00F0               	movwf	?i1___lwdiv
 14722  0F58  0008               	return
 14723  0F59                     __end_ofi1___lwdiv:	
 14724  0F59                     __ptext2303:	
 14725 ;; =============== function i1___lmul ends ============
 14726                           
 14727                           
 14728 ;; *************** function i1___lwmod *****************
 14729 ;; Defined at:
 14730 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lwmod.c"
 14731 ;; Parameters:    Size  Location     Type
 14732 ;;  __lwmod         2    0[COMMON] unsigned int 
 14733 ;;  __lwmod         2    2[COMMON] unsigned int 
 14734 ;; Auto vars:     Size  Location     Type
 14735 ;;  __lwmod         1    4[COMMON] unsigned char 
 14736 ;; Return value:  Size  Location     Type
 14737 ;;                  2    0[COMMON] unsigned int 
 14738 ;; Registers used:
 14739 ;;		wreg, status,2, status,0
 14740 ;; Tracked objects:
 14741 ;;		On entry : 60/0
 14742 ;;		On exit  : 60/0
 14743 ;;		Unchanged: FFF9F/0
 14744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14745 ;;      Params:         4       0       0       0       0
 14746 ;;      Locals:         1       0       0       0       0
 14747 ;;      Temps:          0       0       0       0       0
 14748 ;;      Totals:         5       0       0       0       0
 14749 ;;Total ram usage:        5 bytes
 14750 ;; Hardware stack levels used:    1
 14751 ;; This function calls:
 14752 ;;		Nothing
 14753 ;; This function is called by:
 14754 ;;		_SignalsOnOff
 14755 ;; This function uses a non-reentrant model
 14756 ;;
 14757  0F59                     i1___lwmod:	
 14758                           
 14759                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
 14760  0F59  0871               	movf	i1___lwmod@divisor+1,w
 14761  0F5A  0470               	iorwf	i1___lwmod@divisor,w
 14762  0F5B  1903               	skipnz
 14763  0F5C  2F78               	goto	i1l8141
 14764  0F5D  01F4               	clrf	i1___lwmod@counter
 14765  0F5E                     L46:	
 14766  0F5E  0AF4               	incf	i1___lwmod@counter,f
 14767  0F5F  1BF1               	btfsc	i1___lwmod@divisor+1,7
 14768  0F60  2F65               	goto	i1l8133
 14769  0F61  1003               	clrc
 14770  0F62  0DF0               	rlf	i1___lwmod@divisor,f
 14771  0F63  0DF1               	rlf	i1___lwmod@divisor+1,f
 14772  0F64  2F5E               	goto	L46
 14773  0F65                     i1l8133:	
 14774  0F65  0871               	movf	i1___lwmod@divisor+1,w
 14775  0F66  0273               	subwf	i1___lwmod@dividend+1,w
 14776  0F67  1D03               	skipz
 14777  0F68  2F6B               	goto	u508_25
 14778  0F69  0870               	movf	i1___lwmod@divisor,w
 14779  0F6A  0272               	subwf	i1___lwmod@dividend,w
 14780  0F6B                     u508_25:	
 14781  0F6B  1C03               	skipc
 14782  0F6C  2F74               	goto	L47
 14783  0F6D  0870               	movf	i1___lwmod@divisor,w
 14784  0F6E  02F2               	subwf	i1___lwmod@dividend,f
 14785  0F6F  0871               	movf	i1___lwmod@divisor+1,w
 14786  0F70  1C03               	skipc
 14787  0F71  03F3               	decf	i1___lwmod@dividend+1,f
 14788  0F72  02F3               	subwf	i1___lwmod@dividend+1,f
 14789  0F73  1003               	clrc
 14790  0F74                     L47:	
 14791  0F74  0CF1               	rrf	i1___lwmod@divisor+1,f
 14792  0F75  0CF0               	rrf	i1___lwmod@divisor,f
 14793  0F76  0BF4               	decfsz	i1___lwmod@counter,f
 14794  0F77  2F65               	goto	i1l8133
 14795  0F78                     i1l8141:	
 14796  0F78  0873               	movf	i1___lwmod@dividend+1,w
 14797  0F79  00F1               	movwf	?i1___lwmod+1
 14798  0F7A  0872               	movf	i1___lwmod@dividend,w
 14799  0F7B  00F0               	movwf	?i1___lwmod
 14800  0F7C  0008               	return
 14801  0F7D                     __end_ofi1___lwmod:	
 14802  0F7D                     __ptext2301:	
 14803 ;; =============== function _SendSymbolToLCD ends ============
 14804                           
 14805                           
 14806 ;; *************** function i1___aldiv *****************
 14807 ;; Defined at:
 14808 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\aldiv.c"
 14809 ;; Parameters:    Size  Location     Type
 14810 ;;  __aldiv         4    0[COMMON] long 
 14811 ;;  __aldiv         4    4[COMMON] long 
 14812 ;; Auto vars:     Size  Location     Type
 14813 ;;  __aldiv         4   10[COMMON] long 
 14814 ;;  __aldiv         1    9[COMMON] unsigned char 
 14815 ;;  __aldiv         1    8[COMMON] unsigned char 
 14816 ;; Return value:  Size  Location     Type
 14817 ;;                  4    0[COMMON] long 
 14818 ;; Registers used:
 14819 ;;		wreg, status,2, status,0
 14820 ;; Tracked objects:
 14821 ;;		On entry : 60/60
 14822 ;;		On exit  : 60/60
 14823 ;;		Unchanged: FFF9F/0
 14824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14825 ;;      Params:         8       0       0       0       0
 14826 ;;      Locals:         6       0       0       0       0
 14827 ;;      Temps:          0       0       0       0       0
 14828 ;;      Totals:        14       0       0       0       0
 14829 ;;Total ram usage:       14 bytes
 14830 ;; Hardware stack levels used:    1
 14831 ;; This function calls:
 14832 ;;		Nothing
 14833 ;; This function is called by:
 14834 ;;		_SignalsOnOff
 14835 ;; This function uses a non-reentrant model
 14836 ;;
 14837  0F7D                     i1___aldiv:	
 14838                           
 14839                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 14840  0F7D  01F9               	clrf	i1___aldiv@sign
 14841  0F7E  1FF3               	btfss	i1___aldiv@divisor+3,7
 14842  0F7F  2F8D               	goto	i1l2230
 14843  0F80  09F0               	comf	i1___aldiv@divisor,f
 14844  0F81  09F1               	comf	i1___aldiv@divisor+1,f
 14845  0F82  09F2               	comf	i1___aldiv@divisor+2,f
 14846  0F83  09F3               	comf	i1___aldiv@divisor+3,f
 14847  0F84  0AF0               	incf	i1___aldiv@divisor,f
 14848  0F85  1903               	skipnz
 14849  0F86  0AF1               	incf	i1___aldiv@divisor+1,f
 14850  0F87  1903               	skipnz
 14851  0F88  0AF2               	incf	i1___aldiv@divisor+2,f
 14852  0F89  1903               	skipnz
 14853  0F8A  0AF3               	incf	i1___aldiv@divisor+3,f
 14854  0F8B  01F9               	clrf	i1___aldiv@sign
 14855  0F8C  0AF9               	incf	i1___aldiv@sign,f
 14856  0F8D                     i1l2230:	
 14857  0F8D  1FF7               	btfss	i1___aldiv@dividend+3,7
 14858  0F8E  2F9C               	goto	i1l8167
 14859  0F8F  09F4               	comf	i1___aldiv@dividend,f
 14860  0F90  09F5               	comf	i1___aldiv@dividend+1,f
 14861  0F91  09F6               	comf	i1___aldiv@dividend+2,f
 14862  0F92  09F7               	comf	i1___aldiv@dividend+3,f
 14863  0F93  0AF4               	incf	i1___aldiv@dividend,f
 14864  0F94  1903               	skipnz
 14865  0F95  0AF5               	incf	i1___aldiv@dividend+1,f
 14866  0F96  1903               	skipnz
 14867  0F97  0AF6               	incf	i1___aldiv@dividend+2,f
 14868  0F98  1903               	skipnz
 14869  0F99  0AF7               	incf	i1___aldiv@dividend+3,f
 14870  0F9A  3001               	movlw	1
 14871  0F9B  06F9               	xorwf	i1___aldiv@sign,f
 14872  0F9C                     i1l8167:	
 14873  0F9C  01FA               	clrf	i1___aldiv@quotient
 14874  0F9D  01FB               	clrf	i1___aldiv@quotient+1
 14875  0F9E  01FC               	clrf	i1___aldiv@quotient+2
 14876  0F9F  01FD               	clrf	i1___aldiv@quotient+3
 14877  0FA0  0873               	movf	i1___aldiv@divisor+3,w
 14878  0FA1  0472               	iorwf	i1___aldiv@divisor+2,w
 14879  0FA2  0471               	iorwf	i1___aldiv@divisor+1,w
 14880  0FA3  0470               	iorwf	i1___aldiv@divisor,w
 14881  0FA4  1903               	skipnz
 14882  0FA5  2FDB               	goto	i1l8189
 14883  0FA6  01F8               	clrf	i1___aldiv@counter
 14884  0FA7                     L44:	
 14885  0FA7  0AF8               	incf	i1___aldiv@counter,f
 14886  0FA8  1BF3               	btfsc	i1___aldiv@divisor+3,7
 14887  0FA9  2FB0               	goto	i1l8177
 14888  0FAA  1003               	clrc
 14889  0FAB  0DF0               	rlf	i1___aldiv@divisor,f
 14890  0FAC  0DF1               	rlf	i1___aldiv@divisor+1,f
 14891  0FAD  0DF2               	rlf	i1___aldiv@divisor+2,f
 14892  0FAE  0DF3               	rlf	i1___aldiv@divisor+3,f
 14893  0FAF  2FA7               	goto	L44
 14894  0FB0                     i1l8177:	
 14895  0FB0  1003               	clrc
 14896  0FB1  0DFA               	rlf	i1___aldiv@quotient,f
 14897  0FB2  0DFB               	rlf	i1___aldiv@quotient+1,f
 14898  0FB3  0DFC               	rlf	i1___aldiv@quotient+2,f
 14899  0FB4  0DFD               	rlf	i1___aldiv@quotient+3,f
 14900  0FB5  0873               	movf	i1___aldiv@divisor+3,w
 14901  0FB6  0277               	subwf	i1___aldiv@dividend+3,w
 14902  0FB7  1D03               	skipz
 14903  0FB8  2FC3               	goto	u517_25
 14904  0FB9  0872               	movf	i1___aldiv@divisor+2,w
 14905  0FBA  0276               	subwf	i1___aldiv@dividend+2,w
 14906  0FBB  1D03               	skipz
 14907  0FBC  2FC3               	goto	u517_25
 14908  0FBD  0871               	movf	i1___aldiv@divisor+1,w
 14909  0FBE  0275               	subwf	i1___aldiv@dividend+1,w
 14910  0FBF  1D03               	skipz
 14911  0FC0  2FC3               	goto	u517_25
 14912  0FC1  0870               	movf	i1___aldiv@divisor,w
 14913  0FC2  0274               	subwf	i1___aldiv@dividend,w
 14914  0FC3                     u517_25:	
 14915  0FC3  1C03               	skipc
 14916  0FC4  2FD5               	goto	L45
 14917  0FC5  0870               	movf	i1___aldiv@divisor,w
 14918  0FC6  02F4               	subwf	i1___aldiv@dividend,f
 14919  0FC7  0871               	movf	i1___aldiv@divisor+1,w
 14920  0FC8  1C03               	skipc
 14921  0FC9  0F71               	incfsz	i1___aldiv@divisor+1,w
 14922  0FCA  02F5               	subwf	i1___aldiv@dividend+1,f
 14923  0FCB  0872               	movf	i1___aldiv@divisor+2,w
 14924  0FCC  1C03               	skipc
 14925  0FCD  0F72               	incfsz	i1___aldiv@divisor+2,w
 14926  0FCE  02F6               	subwf	i1___aldiv@dividend+2,f
 14927  0FCF  0873               	movf	i1___aldiv@divisor+3,w
 14928  0FD0  1C03               	skipc
 14929  0FD1  0F73               	incfsz	i1___aldiv@divisor+3,w
 14930  0FD2  02F7               	subwf	i1___aldiv@dividend+3,f
 14931  0FD3  147A               	bsf	i1___aldiv@quotient,0
 14932  0FD4  1003               	clrc
 14933  0FD5                     L45:	
 14934  0FD5  0CF3               	rrf	i1___aldiv@divisor+3,f
 14935  0FD6  0CF2               	rrf	i1___aldiv@divisor+2,f
 14936  0FD7  0CF1               	rrf	i1___aldiv@divisor+1,f
 14937  0FD8  0CF0               	rrf	i1___aldiv@divisor,f
 14938  0FD9  0BF8               	decfsz	i1___aldiv@counter,f
 14939  0FDA  2FB0               	goto	i1l8177
 14940  0FDB                     i1l8189:	
 14941  0FDB  0879               	movf	i1___aldiv@sign,w
 14942  0FDC  1903               	btfsc	3,2
 14943  0FDD  2FE9               	goto	i1l8193
 14944  0FDE  09FA               	comf	i1___aldiv@quotient,f
 14945  0FDF  09FB               	comf	i1___aldiv@quotient+1,f
 14946  0FE0  09FC               	comf	i1___aldiv@quotient+2,f
 14947  0FE1  09FD               	comf	i1___aldiv@quotient+3,f
 14948  0FE2  0AFA               	incf	i1___aldiv@quotient,f
 14949  0FE3  1903               	skipnz
 14950  0FE4  0AFB               	incf	i1___aldiv@quotient+1,f
 14951  0FE5  1903               	skipnz
 14952  0FE6  0AFC               	incf	i1___aldiv@quotient+2,f
 14953  0FE7  1903               	skipnz
 14954  0FE8  0AFD               	incf	i1___aldiv@quotient+3,f
 14955  0FE9                     i1l8193:	
 14956  0FE9  087D               	movf	i1___aldiv@quotient+3,w
 14957  0FEA  00F3               	movwf	?i1___aldiv+3
 14958  0FEB  087C               	movf	i1___aldiv@quotient+2,w
 14959  0FEC  00F2               	movwf	?i1___aldiv+2
 14960  0FED  087B               	movf	i1___aldiv@quotient+1,w
 14961  0FEE  00F1               	movwf	?i1___aldiv+1
 14962  0FEF  087A               	movf	i1___aldiv@quotient,w
 14963  0FF0  00F0               	movwf	?i1___aldiv
 14964  0FF1  0008               	return
 14965  0FF2                     __end_ofi1___aldiv:	
 14966  0FF2                     __ptext2314:	
 14967 ;; =============== function i1_EEWR ends ============
 14968                           
 14969                           
 14970 ;; *************** function ___bmul *****************
 14971 ;; Defined at:
 14972 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\bmul.c"
 14973 ;; Parameters:    Size  Location     Type
 14974 ;;  multiplier      1    wreg     unsigned char 
 14975 ;;  multiplicand    1    0[COMMON] unsigned char 
 14976 ;; Auto vars:     Size  Location     Type
 14977 ;;  multiplier      1    2[COMMON] unsigned char 
 14978 ;;  product         1    1[COMMON] unsigned char 
 14979 ;; Return value:  Size  Location     Type
 14980 ;;                  1    wreg      unsigned char 
 14981 ;; Registers used:
 14982 ;;		wreg, status,2, status,0
 14983 ;; Tracked objects:
 14984 ;;		On entry : 60/0
 14985 ;;		On exit  : 60/0
 14986 ;;		Unchanged: FFF9F/0
 14987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 14988 ;;      Params:         1       0       0       0       0
 14989 ;;      Locals:         2       0       0       0       0
 14990 ;;      Temps:          0       0       0       0       0
 14991 ;;      Totals:         3       0       0       0       0
 14992 ;;Total ram usage:        3 bytes
 14993 ;; Hardware stack levels used:    1
 14994 ;; This function calls:
 14995 ;;		Nothing
 14996 ;; This function is called by:
 14997 ;;		_BCD_to_DEC
 14998 ;; This function uses a non-reentrant model
 14999 ;;
 15000  0FF2                     ___bmul:	
 15001                           
 15002 ;; hardware stack exceeded
 15003                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 15004                           ;___bmul@multiplier stored from wreg
 15005  0FF2  00F2               	movwf	___bmul@multiplier
 15006  0FF3  01F1               	clrf	___bmul@product
 15007  0FF4                     i1l7701:	
 15008  0FF4  0870               	movf	___bmul@multiplicand,w
 15009  0FF5  1872               	btfsc	___bmul@multiplier,0
 15010  0FF6  07F1               	addwf	___bmul@product,f
 15011  0FF7  1003               	clrc
 15012  0FF8  0DF0               	rlf	___bmul@multiplicand,f
 15013  0FF9  1003               	clrc
 15014  0FFA  0CF2               	rrf	___bmul@multiplier,f
 15015  0FFB  08F2               	movf	___bmul@multiplier,f
 15016  0FFC  1D03               	skipz
 15017  0FFD  2FF4               	goto	i1l7701
 15018  0FFE  0871               	movf	___bmul@product,w
 15019  0FFF  0008               	return
 15020  1000                     __end_of___bmul:	
 15021                           
 15022                           	psect	intentry
 15023  0004                     __pintentry:	
 15024 ;; hardware stack exceeded
 15025                           ; Regs used in _F: [allreg]
 15026                           
 15027  0004                     interrupt_function:	
 15028  007E                     saved_w	set	btemp
 15029  0004  00FE               	movwf	btemp
 15030  0005  0E03               	swapf	3,w
 15031  0006  1283               	bcf	3,5	;RP0=0, select bank0
 15032  0007  1303               	bcf	3,6	;RP1=0, select bank0
 15033  0008  00C8               	movwf	??_F+4
 15034  0009  0804               	movf	4,w
 15035  000A  00C9               	movwf	??_F+5
 15036  000B  080A               	movf	10,w
 15037  000C  00CA               	movwf	??_F+6
 15038  000D  087F               	movf	btemp+1,w
 15039  000E  00CB               	movwf	??_F+7
 15040  000F  120A  158A  2808   	ljmp	_F
 15041                           
 15042                           	psect	text2298
 15043  1962                     __ptext2298:	
 15044 ;; =============== function i1_lcd_send_byte ends ============
 15045                           
 15046                           
 15047 ;; *************** function i1_ReadFourBytesEE *****************
 15048 ;; Defined at:
 15049 ;;		line 592 in file "prog.c"
 15050 ;; Parameters:    Size  Location     Type
 15051 ;;  ReadFourByte    1    wreg     unsigned char 
 15052 ;; Auto vars:     Size  Location     Type
 15053 ;;  ReadFourByte    1    7[COMMON] unsigned char 
 15054 ;;  ReadFourByte    4    8[COMMON] unsigned long 
 15055 ;;  ReadFourByte    2   12[COMMON] int 
 15056 ;; Return value:  Size  Location     Type
 15057 ;;                  4    3[COMMON] unsigned long 
 15058 ;; Registers used:
 15059 ;;		wreg, status,2, status,0, pclath, cstack
 15060 ;; Tracked objects:
 15061 ;;		On entry : 60/0
 15062 ;;		On exit  : 60/0
 15063 ;;		Unchanged: FFE00/0
 15064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 15065 ;;      Params:         4       0       0       0       0
 15066 ;;      Locals:         7       0       0       0       0
 15067 ;;      Temps:          0       8       0       0       0
 15068 ;;      Totals:        11       8       0       0       0
 15069 ;;Total ram usage:       19 bytes
 15070 ;; Hardware stack levels used:    1
 15071 ;; Hardware stack levels required when called:    1
 15072 ;; This function calls:
 15073 ;;		i1_EERD
 15074 ;; This function is called by:
 15075 ;;		_SignalsOnOff
 15076 ;; This function uses a non-reentrant model
 15077 ;;
 15078  1962                     i1_ReadFourBytesEE:	
 15079                           
 15080 ;; hardware stack exceeded
 15081                           ; Regs used in i1_ReadFourBytesEE: [wreg+status,2+status,0+pclath+cstack]
 15082                           ;i1ReadFourBytesEE@adress stored from wreg
 15083  1962  00F7               	movwf	i1ReadFourBytesEE@adress
 15084                           
 15085                           ;prog.c: 593: unsigned long int x;
 15086                           ;prog.c: 594: for(int i=3;i>=0;i--){
 15087  1963  3003               	movlw	3
 15088  1964  00FC               	movwf	i1ReadFourBytesEE@i
 15089  1965  01FD               	clrf	i1ReadFourBytesEE@i+1
 15090  1966                     i1l7965:	
 15091                           
 15092                           ;prog.c: 595: x = x*256 + EERD(adress+i);
 15093  1966  087C               	movf	i1ReadFourBytesEE@i,w
 15094  1967  0777               	addwf	i1ReadFourBytesEE@adress,w
 15095  1968  120A  158A  24C9   	fcall	i1_EERD
      +       160A  158A         
 15096  196D  1303               	bcf	3,6	;RP1=0, select bank0
 15097  196E  00A0               	movwf	??i1_ReadFourBytesEE
 15098  196F  01A1               	clrf	??i1_ReadFourBytesEE+1
 15099  1970  01A2               	clrf	??i1_ReadFourBytesEE+2
 15100  1971  01A3               	clrf	??i1_ReadFourBytesEE+3
 15101  1972  0878               	movf	i1ReadFourBytesEE@x,w
 15102  1973  00A4               	movwf	??i1_ReadFourBytesEE+4
 15103  1974  0879               	movf	i1ReadFourBytesEE@x+1,w
 15104  1975  00A5               	movwf	??i1_ReadFourBytesEE+5
 15105  1976  087A               	movf	i1ReadFourBytesEE@x+2,w
 15106  1977  00A6               	movwf	??i1_ReadFourBytesEE+6
 15107  1978  087B               	movf	i1ReadFourBytesEE@x+3,w
 15108  1979  00A7               	movwf	??i1_ReadFourBytesEE+7
 15109  197A  0826               	movf	??i1_ReadFourBytesEE+6,w
 15110  197B  00A7               	movwf	??i1_ReadFourBytesEE+7
 15111  197C  0825               	movf	??i1_ReadFourBytesEE+5,w
 15112  197D  00A6               	movwf	??i1_ReadFourBytesEE+6
 15113  197E  0824               	movf	??i1_ReadFourBytesEE+4,w
 15114  197F  00A5               	movwf	??i1_ReadFourBytesEE+5
 15115  1980  01A4               	clrf	??i1_ReadFourBytesEE+4
 15116  1981  0824               	movf	??i1_ReadFourBytesEE+4,w
 15117  1982  07A0               	addwf	??i1_ReadFourBytesEE,f
 15118  1983  0825               	movf	??i1_ReadFourBytesEE+5,w
 15119  1984  1803               	skipnc
 15120  1985  0F25               	incfsz	??i1_ReadFourBytesEE+5,w
 15121  1986  07A1               	addwf	??i1_ReadFourBytesEE+1,f
 15122  1987  0826               	movf	??i1_ReadFourBytesEE+6,w
 15123  1988  1803               	skipnc
 15124  1989  0F26               	incfsz	??i1_ReadFourBytesEE+6,w
 15125  198A  07A2               	addwf	??i1_ReadFourBytesEE+2,f
 15126  198B  0827               	movf	??i1_ReadFourBytesEE+7,w
 15127  198C  1803               	skipnc
 15128  198D  0A27               	incf	??i1_ReadFourBytesEE+7,w
 15129  198E  07A3               	addwf	??i1_ReadFourBytesEE+3,f
 15130  198F  0823               	movf	??i1_ReadFourBytesEE+3,w
 15131  1990  00FB               	movwf	i1ReadFourBytesEE@x+3
 15132  1991  0822               	movf	??i1_ReadFourBytesEE+2,w
 15133  1992  00FA               	movwf	i1ReadFourBytesEE@x+2
 15134  1993  0821               	movf	??i1_ReadFourBytesEE+1,w
 15135  1994  00F9               	movwf	i1ReadFourBytesEE@x+1
 15136  1995  0820               	movf	??i1_ReadFourBytesEE,w
 15137  1996  00F8               	movwf	i1ReadFourBytesEE@x
 15138  1997  30FF               	movlw	-1
 15139  1998  07FC               	addwf	i1ReadFourBytesEE@i,f
 15140  1999  1C03               	skipc
 15141  199A  03FD               	decf	i1ReadFourBytesEE@i+1,f
 15142  199B  1FFD               	btfss	i1ReadFourBytesEE@i+1,7
 15143  199C  2966               	goto	i1l7965
 15144                           
 15145                           ;prog.c: 596: }
 15146                           ;prog.c: 597: return x;
 15147  199D  087B               	movf	i1ReadFourBytesEE@x+3,w
 15148  199E  00F6               	movwf	?i1_ReadFourBytesEE+3
 15149  199F  087A               	movf	i1ReadFourBytesEE@x+2,w
 15150  19A0  00F5               	movwf	?i1_ReadFourBytesEE+2
 15151  19A1  0879               	movf	i1ReadFourBytesEE@x+1,w
 15152  19A2  00F4               	movwf	?i1_ReadFourBytesEE+1
 15153  19A3  0878               	movf	i1ReadFourBytesEE@x,w
 15154  19A4  00F3               	movwf	?i1_ReadFourBytesEE
 15155  19A5  0008               	return
 15156  19A6                     __end_ofi1_ReadFourBytesEE:	
 15157                           
 15158                           	psect	swtext3
 15159  1851                     __pswtext3:	
 15160  1851                     i1S11381:	
 15161  1851  120A  158A  2F17   	ljmp	i1l8015
 15162  1854  120A  158A  2F18   	ljmp	i1l8019
 15163  1857  120A  158A  2F19   	ljmp	i1l8023
 15164  185A  120A  158A  2F1A   	ljmp	i1l8027
 15165  185D  120A  158A  2F1B   	ljmp	i1l8031
 15166  1860  120A  158A  2F1C   	ljmp	i1l8035
 15167  1863  120A  158A  2F1D   	ljmp	i1l8039
 15168                           
 15169                           	psect	swtext4
 15170  1800                     __pswtext4:	
 15171  1800                     i1S11383:	
 15172  1800  120A  158A  2A92   	ljmp	i1l7329
 15173  1803  120A  158A  2A93   	ljmp	i1l7333
 15174  1806  120A  158A  2A94   	ljmp	i1l7337
 15175  1809  120A  158A  2A95   	ljmp	i1l7341
 15176  180C  120A  158A  2A96   	ljmp	i1l7345
 15177  180F  120A  158A  2A97   	ljmp	i1l7349
 15178  1812  120A  158A  2A98   	ljmp	i1l7353
 15179  1815  120A  158A  2A99   	ljmp	i1l7357
 15180  1818  120A  158A  2A9A   	ljmp	i1l7361
 15181  181B  120A  158A  2A9B   	ljmp	i1l7365
 15182  181E  120A  158A  2A9C   	ljmp	i1l7369
 15183  1821  120A  158A  2A9D   	ljmp	i1l7373
 15184  1824  120A  158A  2A9E   	ljmp	i1l7377
 15185  1827  120A  158A  2A9F   	ljmp	i1l7381
 15186  182A  120A  158A  2AA0   	ljmp	i1l7385
 15187  182D  120A  158A  2AA1   	ljmp	i1l7389
 15188                           
 15189                           	psect	text2322
 15190  0000                     __ptext2322:	
 15191 ;; =============== function _convDig_LCD ends ============
 15192                           
 15193  007E                     btemp	set	126	;btemp
 15194  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Sat Jan 09 22:52:27 2016

                                    _F 0808                                      pc 0002  
                 __end_of_GetDayOfWeek 18E0                         ___bmul@product 0071  
                                   ?_F 0070                                     _BF 04A0  
                      ??_ReIndTimeEdit 00BC                                     _RD 0C60  
                       ?_lcd_send_byte 0070                                     _WR 0C61  
                                   fsr 0004                    ___wmul@multiplicand 00A7  
                      _ParseDataRecord 072F                    __size_of_I2CRestart 0004  
                                  ??_F 0044                            ?i1_I2CStart 0070  
                          i1_WriteTime 0D0F                       ?_SendSymbolToLCD 0070  
                                  l731 16A0                                    l725 0000  
                                  l734 0000                                    l903 1D82  
                                  l912 0000                                    l738 0658  
                                  l906 0000                                    l747 0000  
                                  l909 0000                                    l917 0315  
                                  l880 0000                                    l970 0000  
                                  l965 0000                                    l886 1129  
                                  _GIE 005F                                    _RB0 0030  
                                  _RC0 0038                                    _RC1 0039  
                                  _RC2 003A                                    _PR2 0092  
                                  _PEN 048A                                    _SEN 0488  
                      __end_of_I2CInit 1C03                        __end_of_I2CRead 0CC3  
                      __end_of_I2CSend 1BF7                                    fsr0 0004  
                                  indf 0000                        __end_of_I2CStop 1C0B  
           ItemsToIndicator@firstDigit 00B9                  ReadFourBytesEE@adress 00BD  
                       i1___aldiv@sign 0079                                   l1020 0000  
                                 l1014 0000                                   l1007 1F12  
                                 l1023 0000                                   l1017 0000  
                                 l1026 0000                                   l1107 0000  
                                 l1124 0000                                   l2110 1EB0  
                                 l1062 19AD                                   l1080 0000  
                                 l1401 1BED                                   l2113 0000  
                                 l1242 0000                                   l1314 0000  
                                 l1091 1510                                   l1252 1E86  
                                 l1092 0000                                   l2038 0000  
                                 l2214 0000                                   l2230 16C2  
                                 l1078 19DE                                   l1318 1CB4  
                                 l1407 0000                                   l1239 0000  
                                 l2048 0000                                   l2240 0000  
                                 l2065 0794                                   l2217 1737  
                                 l1097 0000                                   l2058 0000  
                                 l1371 1C04                                   l2227 0000  
                                 l1259 0000                                   l1276 0000  
                                 l1380 0000                                   l2068 0000  
                                 l1365 0000                                   l1374 0000  
                                 l1368 0000                                   l1377 1C08  
                                 l2195 0000                                   l9621 0000  
                                 l9613 0000                                   l9623 0000  
                                 l9615 0000                                   l9711 18B1  
                                 l9703 0000                                   l9609 0000  
                                 l9641 16A2                                   l9633 1688  
                                 l9625 0000                                   l9617 0000  
                                 l9705 0000                                   l9801 1F33  
                                 l9635 0000                                   l9627 0000  
                                 l9619 0000                                   l9643 0000  
                                 l9731 18DB                                   l9723 18C9  
                                 l9715 18BA                                   l9707 18AB  
                                 l9811 06D5                                   l9653 0000  
                                 l9645 0000                                   l9661 0693  
                                 l9741 0000                                   l9805 0000  
                                 l9901 0000                                   l9647 0000  
                                 l9671 0000                                   l9655 0690  
                                 l9727 18D2                                   l9719 18C0  
                                 l9743 0000                                   l9735 0000  
                                 l9751 0000                                   l9807 0000  
                                 l9831 06DA                                   l9823 06D8  
                                 l9815 06D6                                   l9903 17D9  
                                 l9649 064C                                   l9745 0000  
                                 l9737 0000                                   l9761 0000  
                                 l9753 0000                                   l9809 0000  
                                 l9921 0000                                   l9675 0000  
                                 l9667 0694                                   l9683 0000  
                                 l9747 0000                                   l9739 0000  
                                 l9763 0000                                   l9755 0000  
                                 l9771 0000                                   l9835 06DB  
                                 l9827 06D9                                   l9819 06D7  
                                 l9851 0000                                   l9915 179C  
                                 l9923 17AF                                   l9907 0000  
                                 l9931 0000                                   _EEIF 006C  
                                 l9669 0000                                   l9677 0000  
                                 l9757 0000                                   l9749 0000  
                                 l9773 0000                                   l9765 0000  
                                 l9781 0000                                   l9845 06DC  
                                 l9853 0000                                   l9941 0000  
                                 l9933 078E                                   l9759 0000  
                                 l9767 0000                                   l9783 0000  
                                 l9855 0000                                   l9863 0000  
                                 l9871 0681                                   l9927 0000  
                                 l9951 0000                                   l9689 0000  
                                 l9769 0000                                   l9793 0000  
                                 l9777 0000                                   l9849 0000  
                                 l9857 0000                                   l9873 0000  
                                 l9865 0000                                   l9881 0000  
                                 l9945 0000                                   l9937 0000  
                                 l9929 0000                                   l9795 0000  
                                 l9779 0000                                   l9859 1BF0  
                                 l9875 0000                                   l9867 0679  
                                 l9891 17C2                                   l9883 0000  
                                 l9947 07A1                                   l9955 1EC6  
                                 l9971 1AA7                                   l9963 0000  
                                 l9797 0000                                   l9893 0000  
                                 l9957 0000                                   l9983 0000  
                                 l9897 0000                                   l9977 0000  
                                 l9993 1AE9                                   l9985 0000  
                                 l9979 1ACC                                   l9995 0000  
                                 _EERD 07E5                                   l9999 0000  
                                 _EEWR 1D68                    __size_of_BCD_to_DEC 000B  
                                 u7105 073F                                   u7115 0757  
                                 _RCEN 048B                                   u7125 076F  
                                 u7305 17A2                                   u7155 1F2A  
                                 u7415 1AB5                                   u7265 17CB  
                                 u7515 1762                                   u8420 0000  
                                 u8430 0000                                   u7455 1AFC  
                                 u8440 0000                                   u8425 0078  
                                 u8435 0086                                   u8445 0094  
                                 u9407 1C72                                   u9327 1C19  
                                 u8535 0174                                   u7585 16F8  
                                 u9417 1C83                                   u9337 1C27  
                                 u9427 1EF4                                   u9347 1C33  
                                 u9437 1F01                                   u9357 1C3C  
                                 u9367 1C46                                   u7865 1E56  
                                 u9377 1C51                                   u8930 1333  
                                 u8850 10DD                                   u9387 1C5C  
                                 u8860 10E6                                   u8852 10DE  
                                 u7885 1E77                                   u9397 1C67  
                                 u8862 10E7                                   u8880 10F9  
                                 _TMR1 000E                                   _TMR2 0011  
                                 _RSEN 0489                                   _WREN 0C62  
                  i1lcd_send_byte@data 0078                     lcd_init@INTCON_BUF 00AB  
                                 _main 1920                    __end_of_FillMinutes 1DAE  
  FindNextTimeStart@LastFoundTimeStart 00CC                          _isTimeSetting 02F0  
                                 btemp 007E                       __end_of_I2CStart 1C07  
                  WriteTime@INTCON_BUP 00BB                                   start 0012  
                   __size_ofi1_I2CInit 000C                     __size_ofi1_I2CSend 000E  
                   __size_ofi1_I2CStop 0004                         EEWR@INTCON_BUP 00A2  
                    ___bmul@multiplier 0072                      EditSchedule@Times 00E2  
                                S11377 1830                                  S11379 1000  
                                ?_EERD 0070                                  ?_EEWR 00A0  
                                F@line 0051                                  l10003 0000  
                                l10011 0000                                  l10005 1B14  
                                l10101 0000                                  l10031 0000  
                                l10103 17E2                                  l10025 1754  
                                l10033 1779                                  l10017 1744  
                                l10009 0000                                  l10041 0000  
                                l10113 07A8                                  l11001 0000  
                                l10035 0000                                  l10051 16D1  
                                l10043 0000                                  l10115 0000  
                                l10107 0000                                  l10123 0000  
                                l10131 0000                                  l10211 0000  
                                l11003 0000                                  l10037 1787  
                                l10061 16E5                                  l10053 0000  
                                l10117 0000                                  l10125 0000  
                                l10141 0000                                  l10133 0000  
                                l10205 1FEC                                  l10213 0000  
                                l11101 1491                                  l11021 0000  
                                l11013 0000                                  l11005 0000  
                                l10071 0000                                  l10063 0000  
                                l10127 0000                                  l10151 0000  
                                l10143 0000                                  l10135 0000  
                                l10207 0000                                  l10215 0000  
                                l10231 19BD                                  l10223 19B1  
                                l10303 071D                                  l10311 0000  
                                l11031 0000                                  l11023 0000  
                                l11015 0000                                  l11007 111B  
                                l11103 0000                                  l11111 0000  
                                l10073 1710                                  l10049 0000  
                                l10081 0000                                  l10161 0000  
                                l10153 0000                                  l10145 0000  
                                l10137 0000                                  l10129 0000  
                                l10209 0000                                  l10217 0000  
                                l10241 0000                                  l10305 072D  
                                l10313 0000                                  l10321 0000  
                                l10401 0000                                  l11041 1372  
                                l11025 0000                                  l11017 0000  
                                l11009 0000                                  l11105 0000  
                                l11121 0000                                  l11113 1F4E  
                                l11201 0000                                  l10075 0000  
                                l10067 0000                                  l10091 0000  
                                l10083 0000                                  l10163 0000  
                                l10155 0000                                  l10147 0000  
                                l10139 0000                                  l10171 0000  
                                l10243 19D7                                  l10235 19C3  
                                l10219 0000                                  l10315 0000  
                                l10323 0000                                  l10403 0000  
                                l10411 0358                                  l11051 0000  
                                l11043 0000                                  l11027 0000  
                                l11019 0000                                  l11107 0000  
                                l11131 0000                                  l11123 1FB8  
                                l11211 0000                                  l11203 0000  
                                l10077 171E                                  l10085 1A5B  
                                l10165 0000                                  l10157 0000  
                                l10149 0000                                  l10181 0000  
                                l10173 0000                                  l10237 19C5  
                                l10229 19BA                                  l10261 0000  
                                l10253 0000                                  l10317 0000  
                                l10325 1DBF                                  l10501 04DB  
                                l10421 0000                                  l10405 0000  
                                l11061 0000                                  l11053 0000  
                                l11045 0000                                  l11037 0000  
                                l11029 0000                                  l11141 0000  
                                l11125 1F67                                  l11109 0000  
                                l11221 1CDB                                  l11205 1CC0  
                                l11301 0000                                  l10087 0000  
                                l10095 0000                                  l10167 0000  
                                l10159 0000                                  l10191 0000  
                                l10183 0000                                  l10175 0000  
                                l10247 19E5                                  l10239 0000  
                                l10271 0000                                  l10263 0000  
                                l10351 0000                                  l10335 0000  
                                l10327 0000                                  l10319 0000  
                                l10511 0000                                  l10431 03D6  
                                l10423 0000                                  l10407 0000  
                                l11063 0000                                  l11055 0000  
                                l11047 0000                                  l11135 1F79  
                                l11223 0000                                  l11215 0000  
                                l11311 0000                                  l11303 0000  
                                l10089 0000                                  l10193 0000  
                                l10185 0000                                  l10177 0000  
                                l10169 0000                                  l10249 19E9  
                                l10265 0000                                  l10361 1E5B  
                                l10345 1DF5                                  l10329 0000  
                                l10505 0000                                  l10513 04EA  
                                l10433 0000                                  l10417 0000  
                                l10409 0000                                  l11081 0000  
                                l11073 1444                                  l11065 0000  
                                l11057 0000                                  l11049 0000  
                                l11161 1FB1                                  l11153 1F9C  
                                l11145 1F90                                  l11241 1D04  
                                l11233 1CEE                                  l11225 1CE3  
                                l11217 1CD3                                  l11321 0000  
                                l11313 0000                                  l11305 0000  
                                l10099 0000                                  l10195 0000  
                                l10187 0000                                  l10179 0000  
                                l10267 0000                                  l10259 101B  
                                l10283 06EF                                  l10275 0000  
                                l10291 070D                                  l10347 0000  
                                l10371 1E8B                                  l10603 0000  
                                l10531 0000                                  l10515 0000  
                                l10507 04E3                                  l10451 0000  
                                l10443 0000                                  l10435 0000  
                                l11091 0000                                  l11083 0000  
                                l11075 0000                                  l11067 0000  
                                l11059 0000                                  l11171 0000  
                                l11331 0000                                  l11323 0000  
                                l11315 0000                                  l11307 0000  
                                l10197 0000                                  l10189 0000  
                                l10269 0000                                  l10365 0000  
                                l10357 0000                                  l10349 0000  
                                l10621 060A                                  l10613 0000  
                                l10605 0000                                  l10541 0000  
                                l10533 0000                                  l10525 0000  
                                l10517 0000                                  l10461 0000  
                                l10445 0000                                  l10453 0422  
                                l10429 0000                                  l10437 03E0  
                                l10701 0000                                  l11085 0000  
                                l11077 0000                                  l11181 0000  
                                l11173 1FD0                                  l11157 0000  
                                l11149 0000                                  l11261 0000  
                                l11253 0000                                  l11245 0000  
                                l11237 0000                                  l11229 0000  
                                l11333 0000                                  l11325 0000  
                                l11317 1947                                  l11309 0000  
                                l10199 0000                                  l10279 06FB  
                                l10295 0718                                  l10287 0000  
                                l10375 0000                                  l10367 0000  
                                l10623 0000                                  l10615 0000  
                                l10607 0000                                  l10551 054A  
                                l10527 0000                                  l10535 0518  
                                l10519 04F4                                  l10463 0000  
                                l10447 0000                                  l10391 0000  
                                l10383 0000                                  l11095 0000  
                                l11087 0000                                  l11079 0000  
                                l11183 1FE5                                  l11167 1FBC  
                                l11271 0000                                  l11263 0000  
                                l11255 0000                                  l11247 0000  
                                l11239 0000                                  l11191 1CA3  
                                l11335 0000                                  l11327 0000  
                                l11319 0000                                  l10297 071A  
                                l10289 070B                                  l10377 1EA0  
                                l10369 0000                                  l10625 05D8  
                                l10617 05D2                                  l10561 0000  
                                l10553 0000                                  l10545 0000  
                                l10529 0000                                  l10481 0000  
                                l10465 0000                                  l10449 0000  
                                l10393 0000                                  l10385 0000  
                                l10641 0000                                  l10801 0000  
                                l10721 0000                                  l10713 0000  
                                l10705 0000                                  l11097 0000  
                                l11089 1475                                  l11177 0000  
                                l11169 0000                                  l11281 0000  
                                l11273 1D39                                  l11265 1D2B  
                                l11257 1D1C                                  l11249 1D10  
                                l11185 0000                                  l11329 0000  
                                l10379 1EAA                                  l10635 0610  
                                l10571 0000                                  l10555 0000  
                                l10547 0000                                  l10563 055C  
                                l10491 0000                                  l10483 0000  
                                l10475 0000                                  l10467 0000  
                                l10459 0000                                  l10395 0000  
                                l10387 0000                                  l10651 0000  
                                l10643 0000                                  l10803 0000  
                                l10731 0065                                  l10723 0000  
                                l10715 0000                                  l11099 0000  
                                l11179 0000                                  l11291 1D62  
                                l11283 1D4D                                  l11187 0000  
                                l10629 0000                                  l10573 0000  
                                l10557 054F                                  l10477 0000  
                                l10485 04AA                                  l10469 0465  
                                l10389 0000                                  l10661 0000  
                                l10653 0000                                  l10645 0000  
                                l10637 0000                                  l10813 0000  
                                l10805 0000                                  l10741 0000  
                                l10709 001D                                  l11293 0000  
                                l11277 0000                                  l11269 0000  
                                l11189 0000                                  l10591 0000  
                                l10583 0000                                  l10575 0000  
                                l10559 0000                                  l10495 0000  
                                l10479 0000                                  l10399 0000  
                                l10671 0000                                  l10663 0000  
                                l10655 0000                                  l10647 0000  
                                l10639 0000                                  l10903 028D  
                                l10823 01E8                                  l10831 01EB  
                                l10807 0000                                  l10751 0000  
                                l10743 0000                                  l10727 005F  
                                l10719 003A                                  l11295 0000  
                                l11287 1D55                                  l11279 0000  
                                l10593 0000                                  l10585 0000  
                                l10577 0000                                  l10569 0000  
                                l10497 0000                                  l10673 0000  
                                l10665 0000                                  l10657 0000  
                                l10649 0000                                  l10681 0000  
                                l10921 0000                                  l10825 01E9  
                                l10817 0000                                  l10809 01CB  
                                l10761 0000                                  l10737 0066  
                                l11297 0000                                  l10595 0000  
                                l10587 0000                                  l10579 0588  
                                l10675 0000                                  l10667 0000  
                                l10659 0000                                  l10691 0000  
                                l10683 14AD                                  l10907 0000  
                                l10851 0000                                  l10835 0000  
                                l10771 0101                                  l10763 00F8  
                                l10755 00E9                                  l11299 0000  
                                l10589 0000                                  l10597 05AA  
                                l10669 0000                                  l10685 14BA  
                                l10677 0000                                  l10941 0000  
                                l10933 02B7                                  l10925 029F  
                                l10909 0295                                  l10845 0208  
                                l10829 0000                                  l10853 0217  
                                l10781 0000                                  l10757 0000  
                                l10749 00DD                                  l10687 14BE  
                                l10943 02C6                                  l10927 0000  
                                l10919 029D                                  l10863 0234  
                                l10855 0000                                  l10847 0209  
                                l10839 0000                                  l10783 0000  
                                l10767 00FD                                  l10759 0000  
                                l10697 14F5                                  l10689 14D8  
                                l10937 02BE                                  l10929 0000  
                                l10881 0000                                  l10873 0255  
                                l10793 017F                                  l10961 0000  
                                l10891 026E                                  l10883 0262  
                                l10859 0000                                  l10795 0000  
                                l10779 0107                                  l10875 0258  
                                l10893 0000                                  l10885 0266  
                                l10877 025C                                  l10869 024F  
                                l10797 0000                                  l10981 0000  
                                l10973 0000                                  l10895 0000  
                                l10887 0000                                  l10879 0000  
                                l10799 0000                                  l10959 02CF  
                                l10991 0000                                  l10983 0000  
                                l10975 0000                                  l10967 0000  
                                l10889 0000                                  l10993 0000  
                                l10977 10CF                                  l10969 10B7  
                                l10899 0286                                  l10987 0000  
                                l10979 0000                                  l10997 110D  
                                l10989 10FC                                  l10999 0000  
                      __end_of___aldiv 1727                      _SignalsOnOff$1441 002E  
                      __end_of___almod 1790                                  ?_main 0070  
                                _ACKEN 048C                                  _ACKDT 048D  
                      __end_of___lbdiv 07A3                                  _EEADR 010D  
                                _EEPGD 0C67                        __end_of___lldiv 1B1D  
                      __end_of___llmod 1AD5                                  _T2CON 0012  
                      __end_of___lwdiv 17DE                        __end_of___lwmod 17B4  
                                i1l903 0F0D                                  i1l906 0000  
                                i1l909 0000                       ??_SendArrayToLCD 00BA  
                                i1l965 0000                                  i1l982 0AD9  
                                i1l975 0B4B                                  i1l993 0000  
                                i1l979 0000                                  _PORTA 0005  
                                _PORTB 0006                                  _PORTC 0007  
                                _TRISA 0085                                  _TRISB 0086  
                                _TRISC 0087  i1lcd_send_initial_half_byte@data_temp 0074  
  lcd_send_initial_half_byte@data_temp 00A4                                  _Clock 01DA  
                      i1_lcd_send_byte 0B54                    ___lmul@multiplicand 00A4  
                           _ConvKeyNum 0A90                                  _cDays 0063  
                  SignalsOnOff@DayTime 0032                           i1I2CSend@dat 0070  
                      __end_of_lcd_off 1DB8                     i1___lwmod@dividend 0072  
                   WriteTime@DayOfWeek 00AD                 SendArrayToLCD@position 00B9  
                                _delay 0B3E                                  _main2 1C90  
                    ??_ReadFourBytesEE 00B5        RefreshSchedulerIndicator@adress 00C2  
                EditSchedule@TimeStart 00D9                       __end_ofi1___lmul 0D0F  
                                pclath 000A                    SignalsOnOff@ThisDay 0036  
                  SignalsOnOff@Signals 0035                      ItemsToIndicator@i 00BB  
                                status 0003                     __size_ofi1___aldiv 0075  
                                wtemp0 007E                         convDig_LCD@dig 0070  
                      ___lbdiv@divisor 00A0                     __size_ofi1___lwdiv 002A  
                      ___lbdiv@counter 00A2                     __size_ofi1___lwmod 0024  
                  __size_ofi1_I2CStart 0004                       __end_of_FindCell 19EB  
                         __end_of_EERD 07FD                           __end_of_EEWR 1D8B  
              __end_of_ParseDataRecord 0788             __size_ofi1_ReadFourBytesEE 0044  
                         __end_of_main 1962                        ??_lcd_send_byte 00A7  
                  i1___lmul@multiplier 0073                         EERD@EEDATA_BUP 00A2  
            FindNextTimeStart@DayIndex 00DF                                 ??_EERD 00A0  
                               ??_EEWR 00A1                       __end_of_ReadTime 0CB4  
                            ??_I2CInit 00A0                              ??_I2CRead 0070  
                   EditSchedule@adress 00D7                              ??_I2CSend 00A0  
                            ??_I2CStop 00A0                   __size_of_getBorderUp 0026  
                               ??_main 01BE                       __end_of_TimeEdit 1DB8  
                               F@digit 004E                      __end_ofi1_I2CInit 0E02  
                    __end_ofi1_I2CSend 0DE1                      __end_ofi1_I2CStop 0DE5  
                               ?_delay 0070                            _FillMinutes 1D8B  
                               ?_main2 0070                                 _ADCON1 009F  
                               _I2CAck 0CC3                                 _I2CNak 0DF0  
                     ___llmod@dividend 00A4                                 _EEDATA 010C  
                               _EECON2 018D     __size_of_RefreshSchedulerIndicator 0098  
                         ??_I2CRestart 0070                             TimeToInd@D 0196  
                           TimeToInd@i 01B1                             TimeToInd@j 01B4  
                               i1l1014 0000                                 i1l1007 0B73  
                               i1l1017 0000                                 i1l2110 0CE0  
                               i1l1311 090F                                 i1l2032 0000  
                               i1l1401 0DD7                                 i1l2113 0000  
                               i1l1410 0CB6                                 i1l2230 0F8D  
                               i1l1407 0000                                 i1l1416 0000  
                               i1l2048 0000                                 i1l2240 0000  
                               i1l1352 0000                                 i1l1264 0EB2  
                               i1l1265 0EAF                                 i1l2058 0000  
                               i1l1371 0E03                                 i1l1276 0000  
                               i1l1380 0000                                 i1l1365 0000  
                               i1l1374 0000                                 i1l1383 0E07  
                               i1l1359 0BE9                                 i1l1295 08CF  
                               i1l1392 0000                                 i1l1368 0000  
                               i1l1377 0DE2                                 i1l1386 0000  
                               i1l1395 0DF3                                 i1l1389 0CC6  
                               i1l1398 0000                                 i1l7001 0958  
                               i1l7101 0971                                 i1l7021 095D  
                               i1l7013 095B                                 i1l7005 0959  
                               i1l7105 0972                                 i1l7041 0962  
                               i1l7033 0960                                 i1l7025 095E  
                               i1l7017 095C                                 i1l7009 095A  
                               i1l8003 0000                                 i1l8011 0000  
                               i1l7061 0967                                 i1l7053 0965  
                               i1l7045 0963                                 i1l7037 0961  
                               i1l7029 095F                                 i1l7221 0000  
                               i1l8005 0000                                 i1l8013 0000  
                               i1l8101 0000                                 i1l7119 0973  
                               i1l7231 0B3F                                 i1l8031 0F1B  
                               i1l8023 0F19                                 i1l8015 0F17  
                               i1l8111 0000                                 i1l8007 0000  
                               i1l7081 096C                                 i1l7073 096A  
                               i1l7065 0968                                 i1l7057 0966  
                               i1l7049 0964                                 i1l7225 0000  
                               i1l8121 0F54                                 i1l7233 0000  
                               i1l8009 0000                                 i1l7227 0000  
                               i1l8035 0F1C                                 i1l8027 0F1A  
                               i1l8019 0F18                                 i1l8115 0000  
                               i1l7235 0000                                 i1l7093 096F  
                               i1l7085 096D                                 i1l7077 096B  
                               i1l7069 0969                                 i1l7341 0A95  
                               i1l7333 0A93                                 i1l8053 0000  
                               i1l8109 0F3D                                 i1l8133 0F65  
                               i1l8141 0F78                                 i1l8125 0000  
                               i1l7261 0000                                 i1l7253 0AF6  
                               i1l7245 0000                                 i1l8061 0000  
                               i1l7501 0EF2                                 i1l7327 0000  
                               i1l8039 0F1D                                 i1l8119 0000  
                               i1l8151 0000                                 i1l7271 0000  
                               i1l7263 0000                                 i1l7247 0000  
                               i1l8071 0000                                 i1l8063 0000  
                               i1l8055 0000                                 i1l7503 0000  
                               i1l7097 0970                                 i1l7089 096E  
                               i1l6801 092D                                 i1l7361 0A9A  
                               i1l7353 0A98                                 i1l7345 0A96  
                               i1l7337 0A94                                 i1l7329 0A92  
                               i1l8049 0F1E                                 i1l8145 0000  
                               i1l7281 0000                                 i1l7273 0000  
                               i1l7265 0000                                 i1l7257 0000  
                               i1l7249 0000                                 i1l8081 0000  
                               i1l8073 0000                                 i1l8065 0000  
                               i1l8057 0000                                 i1l7505 0000  
                               i1l7601 08FF                                 i1l7521 0000  
                               i1l7513 0000                                 i1l8091 0000  
                               i1l8139 0000                                 i1l7291 0000  
                               i1l7283 0000                                 i1l7267 0000  
                               i1l7259 0000                                 i1l8083 0000  
                               i1l8075 0000                                 i1l8067 0000  
                               i1l8059 0000                                 i1l7451 0000  
                               i1l7443 0000                                 i1l7611 0000  
                               i1l7531 085C                                 i1l7523 0000  
                               i1l7515 0000                                 i1l6821 0932  
                               i1l6813 0930                                 i1l6805 092E  
                               i1l6741 091E                                 i1l7381 0A9F  
                               i1l7373 0A9D                                 i1l7365 0A9B  
                               i1l7357 0A99                                 i1l7349 0A97  
                               i1l7701 0FF4                                 i1l8085 0000  
                               i1l8093 0000                                 i1l8149 0CF6  
                               i1l8165 0000                                 i1l8157 0000  
                               i1l7293 0000                                 i1l7285 0000  
                               i1l7277 0B1E                                 i1l7269 0000  
                               i1l8077 0000                                 i1l8069 0000  
                               i1l7461 0000                                 i1l7621 0000  
                               i1l7613 0000                                 i1l7605 0000  
                               i1l7525 0854                                 i1l7517 0000  
                               i1l7509 0000                                 i1l6735 0000  
                               i1l8087 0000                                 i1l8095 0DDA  
                               i1l8191 0000                                 i1l8183 0000  
                               i1l8167 0F9C                                 i1l8159 0000  
                               i1l7287 0000                                 i1l8079 0000  
                               i1l7471 0000                                 i1l7463 0000  
                               i1l7455 0000                                 i1l7631 0000  
                               i1l7623 0000                                 i1l7615 0000  
                               i1l7607 0000                                 i1l7551 0000  
                               i1l7543 085F                                 i1l7519 0000  
                               i1l6913 0948                                 i1l6905 0946  
                               i1l6841 0937                                 i1l6833 0935  
                               i1l6825 0933                                 i1l6817 0931  
                               i1l6809 092F                                 i1l6761 0923  
                               i1l6753 0921                                 i1l6745 091F  
                               i1l6737 091D                                 i1l7385 0AA0  
                               i1l7377 0A9E                                 i1l7369 0A9C  
                               i1l8089 0000                                 i1l8193 0FE9  
                               i1l8177 0FB0                                 i1l8169 0000  
                               i1l7289 0000                                 i1l7473 0000  
                               i1l7465 0000                                 i1l7457 0000  
                               i1l7641 0000                                 i1l7633 0000  
                               i1l7617 0000                                 i1l7609 0000  
                               i1l7561 089C                                 i1l7537 085D  
                               i1l7707 0000                                 i1l8099 0000  
                               i1l8187 0000                                 i1l8179 0000  
                               i1l7491 0000                                 i1l7475 0000  
                               i1l7467 0000                                 i1l7459 0000  
                               i1l7651 0000                                 i1l7635 0000  
                               i1l7627 0000                                 i1l7619 0000  
                               i1l7563 089E                                 i1l7547 0874  
                               i1l6941 094E                                 i1l6933 094C  
                               i1l6925 094A                                 i1l6917 0949  
                               i1l6909 0947                                 i1l6861 093C  
                               i1l6853 093A                                 i1l6845 0938  
                               i1l6837 0936                                 i1l6829 0934  
                               i1l6781 0928                                 i1l6773 0926  
                               i1l6765 0924                                 i1l6757 0922  
                               i1l6749 0920                                 i1l7389 0AA1  
                               i1l7709 0000                                 i1l8189 0FDB  
                               i1l7493 0000                                 i1l7477 0000  
                               i1l7469 0000                                 i1l7661 0000  
                               i1l7653 0000                                 i1l7645 0000  
                               i1l7637 0000                                 i1l7629 0000  
                               i1l7581 0000                                 i1l7573 0000  
                               i1l7565 0000                                 i1l7557 0898  
                               i1l7549 0000                                 i1l7399 0AA2  
                               i1l7663 0000                                 i1l7495 0000  
                               i1l7487 0EB7                                 i1l7655 0000  
                               i1l7647 0000                                 i1l7639 0000  
                               i1l7583 08D7                                 i1l7559 0000  
                               i1l7567 08B4                                 i1l7575 08CA  
                               i1l6953 0951                                 i1l6945 094F  
                               i1l6937 094D                                 i1l6929 094B  
                               i1l6881 0941                                 i1l6873 093F  
                               i1l6865 093D                                 i1l6857 093B  
                               i1l6849 0939                                 i1l6793 092B  
                               i1l6785 0929                                 i1l6777 0927  
                               i1l6769 0925                                 i1l7681 0000  
                               i1l7497 0000                                 i1l7649 0000  
                               i1l7585 0000                                 i1l7577 0000  
                               i1l7569 0000                                 i1l7931 0000  
                               i1l7659 0C0C                                 i1l7595 08E9  
                               i1l7587 08DE                                 i1l7579 0000  
                               i1l6965 0953                                 i1l6957 0952  
                               i1l6949 0950                                 i1l6893 0944  
                               i1l6885 0942                                 i1l6877 0940  
                               i1l6869 093E                                 i1l6797 092C  
                               i1l6789 092A                                 i1l7685 0CBB  
                               i1l7693 0000                                 i1l7941 0000  
                               i1l7933 0000                                 u400_25 0E4B  
                               i1l7597 08EA                                 i1l7589 0000  
                               i1l7679 0000                                 i1l7695 0000  
                               i1l7943 0000                                 i1l7935 0000  
                               i1l7951 0000                                 _INTCON 000B  
                               i1l6993 0956                                 i1l6985 0955  
                               i1l6977 0954                                 i1l6897 0945  
                               i1l6889 0943                                 i1l7945 0000  
                               i1l7937 0000                                 i1l7953 0000  
                               i1l7699 0000                                 i1l7939 0000  
                               i1l7955 0000                                 i1l7947 0000  
                               i1l6997 0957                                 i1l7949 0000  
                               i1l7981 0000                                 i1l7965 1966  
                               i1l7991 0000                                 i1l7975 0000  
                               i1l7967 0000                                 i1l7959 0000  
                               i1l7993 0000                                 i1l7977 0000  
                               i1l7969 0000                                 i1l7995 0000  
                               i1l7979 0000                                 i1l7999 0B8F  
                               u411_23 0849                          BCD_to_DEC@BCD 007C  
                               i1_EERD 0CC9                                 u404_25 0EA3  
                __size_of_EditSchedule 02C6                                 u405_25 0EAB  
                               u422_25 08C0                                 i1_EEWR 0EF9  
                               u407_25 0EC9                                 u504_25 0F46  
                               u418_25 0885                                 u508_25 0F6B  
                               u517_25 0FC3              FindNextTimeStart@TimeFrom 00DB  
                               u492_25 0B87                                 u388_25 0AED  
                               u398_25 0E30               __end_of_ItemsToIndicator 0709  
                               u399_25 0E3F                                 _TMR1IE 0460  
                               _TMR1IF 0060                                 _TMR2IF 0061  
                               _TMR1ON 0080                      WriteFourBytesEE@i 00A8  
                               u944_27 0B5C              FindNextTimeStart@TimeStop 00C8  
                               u945_27 0B66                           i1EERD@adress 0070  
                               _SSPADD 0093                                 _TRISC3 043B  
                               _TRISC4 043C                                 _SSPCON 0014  
                               _SSPBUF 0013            lcd_send_initial_half_byte@a 00A5  
                        EditSchedule@T 00DD                          EditSchedule@j 00EC  
                        EditSchedule@n 00EE                  __size_of_GetDayOfWeek 003E  
                           _TimeIsRead 02EF                       __end_of_getDigit 062E  
                    i1_ConvertDayToBit 0F15                             _SignalsOut 005A  
                 __size_of_convDig_LCD 0175                     __size_of_ParseTime 0040  
                               _cHours 005B                       __end_of_lcd_init 1C90  
                    TimesToIndicator@j 00BD                     __size_of_Scheduler FFFFFF9B  
                               ___bmul 0FF2                                 ___lmul 1EAC  
                   ?i1_ConvertDayToBit 0070                              ??___aldiv 00A8  
                            ??___almod 00A8                           ??_BCD_to_DEC 007B  
                               ___wmul 0677                              ??___lbdiv 00A1  
                            ??___lldiv 00A8                                 _clrInd 0690  
                            ??___llmod 00A8                                 _digits 0110  
                            ??___lwdiv 00A4                              ??___lwmod 00A4  
             __size_of_ConvertDayToBit 001A                                 _lcd_on 1EDF  
                               _entNum 06BC                __end_ofi1_lcd_send_byte 0B6A  
                          _GlobalBlink 02E8         NumericToIndicator@displacement 00BC  
             _RelevanceOfNextStartCell 02EE                     __size_of_TimeToInd 03EE  
                     __end_of_setDigit 16B2                       __end_of_setBlink 0677  
                   __end_of_I2CRestart 0E0A                              ??_lcd_off 00A9  
                  ??i1_ConvertDayToBit 0070                                 clrloop 0801  
                    __end_ofi1___aldiv 0FF2                     ParseTime@TimeValue 00AE  
                    __end_ofi1___lwdiv 0F59                      __end_ofi1___lwmod 0F7D  
                            ?_I2CStart 0070                            ?_ConvKeyNum 0070  
                        _IsLCDModified 02E9                           _EditSchedule 0015  
                               saved_w 007E                  TimesToIndicator@Times 00BA  
          __size_of_NumericToIndicator 0043                           i1EEWR@adress 0071  
         ??_lcd_send_initial_half_byte 00A0                   SignalsOnOff@ThisTime 0030  
                 SignalsOnOff@TimeStop 002C                  __end_ofi1_FillMinutes 0AD4  
                     SendSymbolToLCD@a 0079                              F@KeyIndex 0057  
                         _GetDayOfWeek 18A2                       ___lbdiv@dividend 00A1  
                   __end_of_BCD_to_DEC 0DF0                         EERD@INTCON_BUP 00A1  
                        setDigit@value 00B5                          setBlink@value 00A1  
            __end_ofi1_ConvertDayToBit 0F2F                     __size_of_WriteTime 00CB  
       ??i1_lcd_send_initial_half_byte 0070                         getDigit@symbol 00A0  
                     SignalsOnOff@Data 0038                       SignalsOnOff@Days 0034  
                  ___bmul@multiplicand 0070              __size_of_WriteFourBytesEE 0017  
                     ?_ParseDataRecord 00A3                         __pcstackCOMMON 0070  
            __size_of_TimesToIndicator 0091                           __pidataBANK0 0000  
                         __pidataBANK3 0000                          __end_of_delay 0B54  
                        __end_of_main2 1F44                    EditSchedule@Signals 00EB  
                       _CurrentSignals 01DF                       ___lbdiv@quotient 00A3  
  __size_of_lcd_send_initial_half_byte 003F                              ?i1___lmul 0073  
                          _LockSignals 02EC                           ??i1_I2CStart 0070  
                         ?i1_WriteTime 007B                  _AdressOfNextStartCell 01D6  
                     WriteTime@Minutes 00BA                             ??_I2CStart 00A0  
                       entNum@KeyValue 00A2                      __end_of_ParseTime 1920  
                            ?_FindCell 00A3                        TimeEdit@borders 00CC  
                        TimeEdit@F1344 01D4                                ??_delay 0072  
                    __end_of_Scheduler 1EDF                                ??_main2 00EF  
                              ?_I2CAck 0070                                ?_I2CNak 0070  
                    i1___aldiv@divisor 0070                      i1___aldiv@counter 0078  
                           __pbssBANK0 0052                             __pbssBANK1 00EF  
                           __pbssBANK2 0110                             __pbssBANK3 01DA  
                              ?i1_EERD 0070                                ?i1_EEWR 0070  
                        ?_SignalsOnOff 0070                              ?_ReadTime 0070  
                    __end_of_TimeToInd 1498                         WriteTime@Hours 00AC  
                   __end_ofi1_I2CStart 0E06                              ?_TimeEdit 0070  
                           I2CSend@dat 00A0                  TimeToInd@SignalsFinal 01B3  
                           __pmaintext 1920                    __size_of_ConvKeyNum 0020  
                              F@symbol 004F                                ?___bmul 0070  
       FindNextTimeStart@TimeOfSignals 00D7                                ?___lmul 00A0  
                              ?___wmul 00A5                                ?_clrInd 0070  
                           __pintentry 0004           RefreshSchedulerIndicator@New 00BD  
                              ?_lcd_on 0070                                ?_entNum 00A0  
                              i1S11381 1851                                i1S11383 1800  
                              _I2CInit 1BF7                                _I2CRead 0CB4  
                           __ptext2300 0AD4                             __ptext2301 0F7D  
                           __ptext2310 0F15                             __ptext2302 0CDC  
                           __ptext2311 0B6A                             __ptext2303 0F59  
                           __ptext2320 0B3E                             __ptext2312 0CC9  
                           __ptext2304 0F2F                             __ptext2321 091B  
                           __ptext2313 0EF9                             __ptext2305 0DD3  
                           __ptext2322 0000                             __ptext2314 0FF2  
                           __ptext2306 0DE1                             __ptext2250 0015  
                           __ptext2315 0DF0                             __ptext2307 0E02  
                           __ptext2251 1498                             __ptext2316 0CC3  
                           __ptext2308 0DF6                             __ptext2260 1EE9  
                           __ptext2252 1C0B                             __ptext2317 0CB4  
                           __ptext2309 0AB0                             __ptext2261 1FE9  
                           __ptext2253 02DB                             __ptext2318 0E06  
                           __ptext2270 1AD5                             __ptext2262 1B1D  
                           __ptext2254 1DB8                             __ptext2246 1C90  
                           __ptext2319 0A90                             __ptext2271 1A97  
                           __ptext2263 1530                             __ptext2255 1DAE  
                           __ptext2247 1F44                             __ptext2280 1BF7  
                           __ptext2272 1EAC                             __ptext2264 18E0  
                           __ptext2256 0709                             __ptext2248 1EDF  
                           __ptext2281 1D8B                             __ptext2273 0788  
                           __ptext2265 07A3                             __ptext2257 06ED  
                           __ptext2249 10AA                             __ptext2290 062E  
                           __ptext2282 06D3                             __ptext2274 1790  
                           __ptext2266 17DE                             __ptext2258 1019  
                           __ptext2291 165C                             __ptext2283 1F05  
                           __ptext2275 17B4                             __ptext2267 1A54  
                           __ptext2259 19A6                             __ptext2292 061F  
                           __ptext2284 07E5                             __ptext2276 0677  
                           __ptext2268 16B2                             __ptext2293 0808  
                           __ptext2285 1D68                             __ptext2277 1C07  
                           __ptext2269 1727                             __ptext2294 0B9E  
                           __ptext2286 072F                             __ptext2278 1BE8  
                           __ptext2295 0E0A                             __ptext2287 18A2  
                           __ptext2279 1C03                             __ptext2296 0D0F  
                           __ptext2288 06BC                             __ptext2297 0B54  
                           __ptext2289 0690                             __ptext2298 1962  
                           __ptext2299 0DE5                                _I2CSend 1BE8  
                       ___lmul@product 00A8                                _I2CStop 1C07  
                     ?i1_lcd_send_byte 0070                        _ReadFourBytesEE 07A3  
                __end_of_ReIndTimeEdit 165C                             ??i1___lmul 007B  
                           __size_of_F 0113                      __end_of_WriteTime 1BE8  
                       entNum@borderUp 00A0                       i1EEWR@INTCON_BUP 0072  
                    ??_ConvertDayToBit 00A0                              ?_getDigit 00A0  
                   _CurrentReadingCell 0058                             ??_FindCell 00A5  
           FindNextTimeStart@TimeStart 00D4                                _SSPCON2 0091  
                      __size_of_I2CAck 0006                              ?_lcd_init 0070  
             __size_of_SendSymbolToLCD 006A                        __size_of_I2CNak 0006  
                              _SSPSTAT 0094                         ??_SignalsOnOff 0028  
                SignalsOnOff@Data_1442 0037                        __size_ofi1_EERD 0013  
                      __size_ofi1_EEWR 001C                             ??_ReadTime 0032  
           __size_ofi1_ConvertDayToBit 001A                                _KeyCode 00EF  
                            ?_setDigit 00AE                              ?_setBlink 00A0  
                              _Minutes 0052                      _FindNextTimeStart 1DB8  
                           ??_TimeEdit 00C0                                _cMonths 0064  
                              ___aldiv 16B2                     ?_FindNextTimeStart 0070  
                      __size_of___bmul 000E                FindNextTimeStart@adress 00DE  
                              ___almod 1727                                ___lbdiv 0788  
                      __size_of___lmul 0033                                ___lldiv 1AD5  
                      __size_of___wmul 0019                                ___llmod 1A97  
                              ___lwdiv 17B4                                ___lwmod 1790  
                      __size_of_clrInd 002C                        __size_of_lcd_on 000A  
                      __size_of_entNum 0017                             EERD@adress 00A0  
                              _lcd_off 1DAE                    ??_FindNextTimeStart 00C4  
                  TimeToInd@DataArray2 019D                           ParseTime@Day 00B3  
                    i1___lwdiv@divisor 0070                      i1___lwdiv@counter 0074  
                           delay@count 0070                          TimeToInd@Days 019C  
                              clrInd@a 00A4                                clrInd@b 00A3  
                     ___aldiv@dividend 00A4               ConvertDayToBit@DayNumber 00A0  
                        TimeToInd@Time 01B6     __end_of_lcd_send_initial_half_byte 1F44  
           _lcd_send_initial_half_byte 1F05                             ??_getDigit 00A1  
                        TimeToInd@line 01B9                       entNum@borderDown 00A1  
                        TimeToInd@temp 01BA                           ?_FillMinutes 0070  
                     i1EERD@EEDATA_BUP 0072                     SendArrayToLCD@Symb 00BB  
                           ??_lcd_init 00A9                              i1_I2CInit 0DF6  
                   SendArrayToLCD@line 00B8                              i1_I2CSend 0DD3  
                 end_of_initialization 1A50                              i1_I2CStop 0DE1  
                     TimeToInd@Signals 01B0                      ?_ItemsToIndicator 00B8  
               ParseDataRecord@Signals 00AD              __end_of_FindNextTimeStart 1EAC  
                   _CurrentSignalsData 0059                             ??_setDigit 00B0  
                           ??_setBlink 00A2                        ___lldiv@divisor 00A0  
                   ??_ItemsToIndicator 00BA                        ___lldiv@counter 00AC  
                            FindCell@D 00A8                       _WriteFourBytesEE 1FE9  
              __end_of_ReadFourBytesEE 07E5                             EEWR@adress 00A1  
                        _setDigit$1257 00B4                       ___aldiv@quotient 00AA  
                     _TimesToIndicator 1019                          ??_getBorderUp 00A5  
                SignalsOnOff@TimeStart 002A                     i1WriteTime@Minutes 0031  
                         Scheduler@new 0190                  __end_of_lcd_send_byte 1F05  
                 WriteFourBytesEE@data 00A3             i1ConvertDayToBit@DayNumber 0070  
                  getBorderUp@BorderUp 00A6                       FindCell@previous 00A4  
                      _ModeOfFirstLine 02ED                           ??_ConvKeyNum 0070  
                 __size_ofi1_WriteTime 00C4                           _LCD_Light_On 02EA  
                            i1___aldiv 0F7D                         setDigit@value0 00B6  
                    __size_of_I2CStart 0004                         setBlink@value0 00A5  
                            i1___lwdiv 0F2F                              i1___lwmod 0F59  
                           F@MinuteAgo 004C                         setDigit@symbol 00AE  
                           ?i1_I2CInit 0070                     Scheduler@StartFrom 0191  
                           ?i1_I2CSend 0070                         setBlink@symbol 00A0  
                           ?i1_I2CStop 0070                         __end_of_I2CAck 0CC9  
                       __end_of_I2CNak 0DF6                __size_of_SendArrayToLCD 0022  
                         _LCD_Power_On 02EB                          ??_convDig_LCD 0070  
                       __end_ofi1_EERD 0CDC                         __end_ofi1_EEWR 0F15  
                i1WriteTime@INTCON_BUP 0030                      ??_SendSymbolToLCD 0073  
                 EditSchedule@BorderUp 00D8                              ReadTime@I 0043  
                     EditSchedule@Data 00E6                       EditSchedule@Days 00EA  
                     EditSchedule@mode 00E1                     __end_of_ConvKeyNum 0AB0  
                       __end_of___bmul 1000                         __end_of___lmul 1EDF  
                  FindCell@adressStart 00A9                         __end_of___wmul 0690  
                     i1EERD@INTCON_BUP 0071                         __end_of_clrInd 06BC  
                 __end_of_SignalsOnOff 0EF9                         __end_of_lcd_on 1EE9  
                       __end_of_entNum 06D3                      i1___lwmod@divisor 0070  
                        __pbitbssBANK0 02E8                      i1___lwmod@counter 0074  
                 EditSchedule@TimeStop 00DB                    __end_of_getBorderUp 072F  
                        _FindCell$1365 00A5             __end_of_NumericToIndicator 1A97  
                i1___lmul@multiplicand 0077                      __size_ofi1___lmul 0033  
           EditSchedule@SourceOfRecord 00C4      i1_lcd_send_initial_half_byte$1348 0072  
      _lcd_send_initial_half_byte$1348 00A2                    start_initialization 19EB  
                     ReadFourBytesEE@i 00C2                       ReadFourBytesEE@x 00BE  
                           ?i1___aldiv 0070                          _SignalsForInd 01E0  
                             ??_I2CAck 0070                             ?i1___lwdiv 0070  
                           ?i1___lwmod 0070                               ??_I2CNak 0070  
                    __size_of_FindCell 0045          i1lcd_send_initial_half_byte@a 0075  
    RefreshSchedulerIndicator@CopyFrom 00BE                              _ParseTime 18E0  
                             ??i1_EERD 0070                               ??i1_EEWR 0071  
                            TimeEdit@c 00CE       i1lcd_send_initial_half_byte@data 0071  
                            TimeEdit@j 00CF                              TimeEdit@t 00C8  
                            _Scheduler 1F44                        ___llmod@divisor 00A0  
           __size_of_FindNextTimeStart 00F4             ?_RefreshSchedulerIndicator 00BD  
                      ___llmod@counter 00A8                      __size_of_ReadTime 0116  
                            _TimeToInd 10AA                       ?_ReadFourBytesEE 00B1  
                             ??___bmul 0071                               ??___lmul 00A8  
                      _ConvertDayToBit 06D3                               ??___wmul 00A9  
                  __end_of_convDig_LCD 0A90                      __size_of_TimeEdit 1ADD  
                             ??_clrInd 00A0                 __size_ofi1_FillMinutes 0024  
                             ??_lcd_on 00AC                               ??_entNum 00A1  
                          __pdataBANK0 005F                            __pdataBANK3 01BF  
                 _SendSymbolToLCD$1335 0074                   _SendSymbolToLCD$1336 0076  
                             ?_I2CInit 0070                               ?_I2CRead 0070  
                   i1___aldiv@dividend 0074                               ?_I2CSend 0070  
                             ?_I2CStop 0070                               EEWR@data 00A0  
                     i1WriteTime@Hours 007B               __size_of_ParseDataRecord 0059  
                 TimesToIndicator@temp 00BB                           setDigit@data 00AF  
                         setDigit@line 00B7                           setBlink@line 00A6  
 __end_ofi1_lcd_send_initial_half_byte 0B9E  __size_ofi1_lcd_send_initial_half_byte 0034  
         i1_lcd_send_initial_half_byte 0B6A                          __pcstackBANK0 0020  
                        __pcstackBANK1 00A0                          __pcstackBANK3 0190  
               TimeToInd@SignalOn_1300 019B                      ReIndTimeEdit@temp 00BC  
                            _WriteTime 1B1D           FindNextTimeStart@TimeIsFound 00D6  
                            __end_of_F 091B                            ??i1_I2CInit 0070  
                          ??i1_I2CSend 0070                       i1___lmul@product 0020  
                    __size_of_getDigit 000F                            ??i1_I2CStop 0070  
                 __size_of_FillMinutes 0023                            I2CRead@temp 0070  
                           ?_ParseTime 00AE                             ?_Scheduler 0190  
                    __size_of_lcd_init 0085                     i1___aldiv@quotient 007A  
                           setDigit@e0 00B3      __end_of_RefreshSchedulerIndicator 1530  
                     ___lwdiv@dividend 00A2                             ?_TimeToInd 0070  
                    __size_of_setDigit 0056                      __size_of_setBlink 0049  
                             ?___aldiv 00A0                               ?___almod 00A0  
                             ?___lbdiv 00A0                               ?___lldiv 00A0  
                             ?___llmod 00A0                               ?___lwdiv 00A0  
                          _getBorderUp 0709                               ?___lwmod 00A0  
                    lcd_send_byte@data 00A8                       ___almod@dividend 00A4  
                            __pswtext1 1830                              __pswtext2 1000  
                            __pswtext3 1851                              __pswtext4 1800  
                             ?_lcd_off 0070                 FindNextTimeStart@DayOn 00CB  
                             _I2CStart 1C03                    NumericToIndicator@n 00B8  
             __end_of_WriteFourBytesEE 2000          ?i1_lcd_send_initial_half_byte 0070  
          ?_lcd_send_initial_half_byte 0070                            ??i1___aldiv 0078  
             __size_ofi1_lcd_send_byte 0016                             ?_WriteTime 00AC  
             __end_of_TimesToIndicator 10AA                       ___lwdiv@quotient 00A5  
                          ??i1___lwdiv 0074                         __size_of_delay 0016  
                          ??i1___lwmod 0074                         __size_of_main2 02B4  
                        i1_FillMinutes 0AB0                     TimeToInd@DataArray 019E  
                       _SendArrayToLCD 17DE                           TimeToInd@Day 01AF  
                      ___aldiv@divisor 00A0                           TimeToInd@day 0190  
                    interrupt_function 0004                        ___aldiv@counter 00A8  
                      TimeToInd@i_1299 01B2                         ___wmul@product 00A9  
              __end_of_ConvertDayToBit 06ED                 __size_of_ReIndTimeEdit 012C  
                          _convDig_LCD 091B                  __size_of_SignalsOnOff 00EF  
                      TimeToInd@symbol 01B8                     i1ReadFourBytesEE@i 007C  
                   i1ReadFourBytesEE@x 0078              __size_of_ItemsToIndicator 001C  
                     __size_of_I2CInit 000C                       __size_of_I2CRead 000F  
                     __size_of_I2CSend 000F                               i1___lmul 0CDC  
                     __size_of_I2CStop 0004                      ___wmul@multiplier 00A5  
                        ?_EditSchedule 00C4                               _FindCell 19A6  
                      EditSchedule@key 00ED                        _SendSymbolToLCD 0AD4  
               __end_of_SendArrayToLCD 1800                         ?i1_FillMinutes 0070  
                    ??_ParseDataRecord 00AF                          ?_GetDayOfWeek 0070  
                    ___lmul@multiplier 00A0                             _I2CRestart 0E06  
                          ??_ParseTime 00B4                            ??_Scheduler 00EF  
                         _SignalsOnOff 0E0A                               _ReadTime 0B9E  
                     ParseTime@DayTime 00B6                     TimeToInd@TimeStart 0192  
             FindNextTimeStart@Signals 00DC                               _TimeEdit 02DB  
                          ??_TimeToInd 00E0                        _modifide_digits 0130  
                  ParseDataRecord@Data 00A3                    ParseDataRecord@Days 00AB  
                           _BCD_to_DEC 0DE5                               _cMinutes 005C  
                           i1EEWR@data 0070                               _cWeekDay 0065  
                     __size_of___aldiv 0075                       __size_of___almod 0069  
                     __size_of___lbdiv 001B                           getDigit@line 00A4  
                     __size_of___lldiv 0048                       __size_of___llmod 003E  
                     __size_of___lwdiv 002A                       __size_of___lwmod 0024  
       _RefreshSchedulerIndicator$1370 00C0               ParseDataRecord@TimeStart 00A7  
                        ??i1_WriteTime 0024                      GetDayOfWeek@array 01D7  
                        _ReIndTimeEdit 1530                          ConvKeyNum@Num 0070  
                       ??_EditSchedule 00C5                       __size_of_lcd_off 000A  
                       ReIndTimeEdit@n 00B8                        ___lwdiv@divisor 00A0  
                             _getDigit 061F                   i1WriteTime@DayOfWeek 007C  
                      ___lwdiv@counter 00A4                         _LCD_ON_TIMEOUT 005F  
                          ??_WriteTime 00AE                         ??_GetDayOfWeek 00A0  
             EditSchedule@TargetAdress 00D5                        ?_SendArrayToLCD 00B8  
                         getBorderUp@n 00A5                               _lcd_init 1C0B  
                      ___almod@divisor 00A0                         TimeToInd@F1311 01D0  
                        __size_of_EERD 0018                         TimeToInd@F1317 01BF  
                        __size_of_EEWR 0023                        ___almod@counter 00A8  
                FindNextTimeStart@Data 00D0                     i1___lwdiv@dividend 0072  
                FindNextTimeStart@Days 00DD                 __size_of_lcd_send_byte 001C  
                        ParseTime@Time 00B2                      ??i1_lcd_send_byte 0077  
                   _NumericToIndicator 1A54                          __size_of_main 0042  
                             delay@del 0072                            FindCell@New 00A3  
                     ?_ConvertDayToBit 0070            ??_RefreshSchedulerIndicator 00BF  
                             _setDigit 165C                               _setBlink 062E  
                       FindCell@adress 00AA                               clear_ram 0800  
                       TimeToInd@nSymb 01B5                    ?_NumericToIndicator 00B8  
                 _GlobalBlinkCycleTime 0062         lcd_send_initial_half_byte@data 00A1  
                       ?_ReIndTimeEdit 00B8                      FindCell@adressNew 00A7  
                   TimeToInd@line_1291 0191           FindNextTimeStart@adressStart 00CA  
              __end_of_SendSymbolToLCD 0B3E                     i1___lwdiv@quotient 0075  
                           i1_I2CStart 0E02                 Scheduler@NumberOfCells 01DE  
              i1ReadFourBytesEE@adress 0077                      TimeToInd@SignalOn 019A  
                      ??i1_FillMinutes 0070                      TimeToInd@TimeStop 0194  
                 ??_NumericToIndicator 00BD                  ItemsToIndicator@max_i 00B8  
                ItemsToIndicator@items 00BA                    __end_ofi1_WriteTime 0DD3  
              ParseDataRecord@TimeStop 00A9                            ?_I2CRestart 0070  
                             intlevel1 0000                            F@DigitValue 004D  
                  SendSymbolToLCD@Symb 0078                 WriteFourBytesEE@adress 00A7  
                     ___lwmod@dividend 00A2                       ___lldiv@dividend 00A4  
                      SendArrayToLCD@i 00BC                    F@ButtonPressTimeOut 0056  
                          ?_BCD_to_DEC 0070                       F@PressedKeyIndex 0061  
                         ?_getBorderUp 0070                      i1_ReadFourBytesEE 1962  
                        _lcd_send_byte 1EE9                       _ItemsToIndicator 06ED  
                   ?i1_ReadFourBytesEE 0073                        GetDayOfWeek@day 00A0  
            _RefreshSchedulerIndicator 1498                             _OPTION_REG 0081  
             __size_of_ReadFourBytesEE 0042                     SendSymbolToLCD@Smb 007B  
                     ___lldiv@quotient 00A8                        ___lwmod@divisor 00A0  
                      ___lwmod@counter 00A4                           ___aldiv@sign 00A9  
                  ??i1_ReadFourBytesEE 0020                          ??_FillMinutes 00A0  
                        _NearTimeStart 01E1                      ?_WriteFourBytesEE 00A3  
                    ?_TimesToIndicator 0070             EditSchedule@BeginEditTimes 00D6  
              Scheduler@isDataModified 0192                     ??_WriteFourBytesEE 00A7  
                         ___almod@sign 00A9                     ??_TimesToIndicator 00B8  
                      ReadTime@Seconds 0042                           ?_convDig_LCD 0070  
                 __end_of_EditSchedule 02DB              __end_ofi1_ReadFourBytesEE 19A6  
